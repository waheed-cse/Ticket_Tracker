{"version":3,"sources":["webpack://GridStack/webpack/universalModuleDefinition","webpack://GridStack/./src/dd-base-impl.ts","webpack://GridStack/./src/dd-draggable.ts","webpack://GridStack/./src/dd-droppable.ts","webpack://GridStack/./src/dd-element.ts","webpack://GridStack/./src/dd-gridstack.ts","webpack://GridStack/./src/dd-manager.ts","webpack://GridStack/./src/dd-resizable-handle.ts","webpack://GridStack/./src/dd-resizable.ts","webpack://GridStack/./src/dd-touch.ts","webpack://GridStack/./src/gridstack-engine.ts","webpack://GridStack/./src/gridstack.ts","webpack://GridStack/./src/types.ts","webpack://GridStack/./src/utils.ts","webpack://GridStack/webpack/bootstrap","webpack://GridStack/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","_eventRegister","disabled","this","_disabled","on","event","callback","off","enable","disable","destroy","triggerEvent","eventName","DDDraggable","DDBaseImplement","constructor","el","option","super","className","handle","substring","dragEl","classList","contains","querySelector","_mouseDown","bind","_mouseMove","_mouseUp","addEventListener","isTouch","touchstart","pointerdown","remove","add","forDestroy","removeEventListener","dragTimeout","window","clearTimeout","dragging","mouseDownEvent","helper","updateOption","opts","Object","keys","forEach","key","e","DDManager","mouseHandled","button","name","target","nodeName","toLowerCase","find","skip","dragElement","dropElement","document","touchmove","touchend","preventDefault","_callDrag","ev","Utils","initEvent","type","drag","ui","s","_dragFollow","pauseDrag","pause","Number","isInteger","setTimeout","Math","abs","x","y","grid","gridstackNode","ddElement","ddDroppable","_createHelper","_setupHelperContainmentStyle","dragOffset","_getDragOffset","helperContainment","_setupHelperStyle","start","parentElement","style","position","parentOriginStylePosition","_removeHelperStyle","stop","drop","cloneNode","body","appendTo","parentNode","dragElementOriginStyle","originStyleProp","map","prop","pointerEvents","width","height","willChange","transition","node","_isAboutToRemove","offset","left","clientX","offsetLeft","top","clientY","offsetTop","getComputedStyle","match","parent","xformOffsetX","xformOffsetY","testEl","createElement","addElStyles","opacity","zIndex","appendChild","testElPosition","getBoundingClientRect","removeChild","targetOffset","containmentRect","DDDroppable","_mouseEnter","_mouseLeave","_setupAccept","pointerenter","pointerleave","_canDrop","stopPropagation","over","_ui","out","parentDrop","accept","matches","draggable","DDElement","static","ddDraggable","indexOf","ddResizable","setupDraggable","cleanDraggable","setupResizable","DDResizable","cleanResizable","setupDroppable","cleanDroppable","DDGridStack","dd","resizable","value","_getDDElements","dEl","handles","getAttribute","autoHide","alwaysShowResizeHandle","resize","dragIn","droppable","_accept","isDroppable","isDraggable","isResizable","els","create","hosts","getElements","length","list","init","filter","d","_itemRemoving","undefined","GridStack","prototype","_setupAcceptWidget","staticGrid","acceptWidgets","removable","cellHeight","cellWidth","onDrag","_temporaryRemoved","max","round","autoPosition","engine","nodeBoundFix","willItFit","_willFitPos","copyPos","_onStartMoving","_dragOrResize","canAccept","selector","maxRow","n","w","h","minW","minH","_leave","getCellHeight","_readAttr","_isExternal","offsetWidth","offsetHeight","_gridstackNodeOrig","cleanupNode","_initDD","_isTemp","removeAsSubGrid","wasAdded","placeholder","origNode","oGrid","removedNodes","push","_triggerRemoveEvent","parentGridItem","nodes","subGridDynamic","_removeDD","subGrid","gridstack","removePositioningStyles","_writeAttr","styleInHead","_updateStyles","_updateContainerHeight","addedNodes","_triggerAddEvent","_triggerChangeEvent","endUpdate","_gsEventHandler","_prepareDragDropByNode","removeNode","_setupRemoveDrop","trashEl","removableOptions","setupDragIn","dragInOptions","dragInDefaultOptions","noMove","disableDrag","noResize","disableResize","onStartMoving","dragOrResize","onEndMoving","_moving","_event","_lastTried","gridToNotify","_orig","_writePosAttr","addNode","_extraDragRow","cleanNodes","beginUpdate","_lastUiPosition","_prevYPix","cacheRects","marginTop","marginRight","marginBottom","marginLeft","maxW","maxH","restoreInitial","resizing","p","mLeft","mRight","mTop","mBottom","mHeight","mWidth","min","distance","updateScrollPosition","prev","collide","row","getRow","extra","updateScrollResize","size","rect","moveNodeCheck","_skipDown","onParentResize","movable","val","enableMove","enableResize","_triggerEvent","doEnable","DDResizableHandle","host","direction","moving","dir","_init","prefix","userSelect","newRect","originalRect","scrolled","temporalRect","_mouseOver","_mouseOut","_setupAutoHide","_setupHandlers","_removeHandlers","updateHandles","updateAutoHide","auto","overResizeElement","handlerDirection","handlers","split","trim","_resizeStart","_resizeStop","move","_resizing","scrollEl","getScrollElement","scrollY","scrollTop","startEvent","_setupHelper","_applyChange","_getChange","_cleanHelper","elOriginStyleVal","_originStyleProp","i","oEvent","offsetX","offsetY","constrain","_constrainSize","oWidth","oHeight","maxWidth","MAX_SAFE_INTEGER","minWidth","maxHeight","minHeight","containmentEl","DocumentTouch","navigator","maxTouchPoints","msMaxTouchPoints","DDTouch","simulateMouseEvent","simulatedType","touches","cancelable","touch","changedTouches","simulatedEvent","createEvent","initMouseEvent","screenX","screenY","dispatchEvent","simulatePointerMouseEvent","touchHandled","pointerLeaveTimeout","wasDragging","releasePointerCapture","pointerId","GridStackEngine","column","_float","float","onChange","batchUpdate","flag","batchMode","_prevFloat","saveInitial","_packNodes","_notify","_useEntireRowArea","nn","_hasLocked","_fixCollisions","opt","sortNodes","nested","swap","area","didMove","newOpt","pack","moved","locked","moveNode","skip2","isIntercepted","collideAll","directionCollideCoverage","o","collides","_rect","r0","r","r2","yOver","MAX_VALUE","xOver","overMax","right","bottom","a","b","_doSwap","_dirty","touching","isTouching","t","isAreaEmpty","compact","copyNodes","sort","_updating","newY","prepareNode","_id","_idSeq","defaults","isNaN","before","_inColumnResize","findCacheLayout","copy","cacheOneLayout","samePos","getDirtyNodes","verify","dirtyNodes","concat","some","findEmptyPosition","found","floor","box","triggerAddEvent","_removeDOM","removeDOM","removeAll","_layouts","changedPosConstrain","clonedNode","clone","canMove","c","content","wasUndefinedPack","prevPos","needToMove","activeDrag","areaIntercept","a1","a2","makeSubGrid","reduce","save","saveElement","len","layout","wl","l","removeInternalForSave","layoutsNodesChange","ratio","updateNodeWidths","prevColumn","cacheLayout","newNodes","domOrder","cacheNodes","lastIndex","cacheNode","j","findIndex","splice","scale","clear","index","minRow","rowAttr","toNumber","anyOpts","oneColumnSize","_alwaysShowResizeHandle","cloneDeep","gridDefaults","toBool","handleClass","itemClass","animate","_initMargin","disableOneColumnMode","_widthOrContainer","_prevColumn","getColumn","rtl","closestUpByClass","_isAutoCellHeight","cellHeightUnit","_styleSheetClass","_setStaticClass","engineClass","cbNodes","elements","getGridItems","parseInt","_prepareElement","setAnimation","_updateWindowResizeEvent","options","elOrString","getGridElement","console","error","grids","getGridElements","doc","implementation","createHTMLDocument","innerHTML","class","children","load","_placeholder","placeholderChild","placeholderText","placeholderClass","addWidget","arguments","domAttr","_insertNotAppend","prepend","_ignoreLayoutsNodeChange","ops","nodeToAdd","saveContent","autoColumn","makeWidget","newItem","newItemOpt","update","addGrid","_autoColumn","nodeThatRemoved","pGrid","removeWidget","saveGridOpt","sub","margin","origShow","removeInternalAndSame","addAndRemove","items","removed","id","item","forcePixel","rows","marginDiff","data","parseHeight","unit","clientWidth","innerWidth","domNodes","oldColumn","oneColumnModeDomSort","Array","from","setStatic","_removeStylesheet","removeAttribute","getFloat","getCellFromPixel","useDocRelative","containerPos","documentElement","relativeLeft","relativeTop","columnWidth","rowHeight","getElement","noData","detail","log","doAnimate","updateClass","warn","m","k","changed","ddChanged","marginUnit","getMargin","CustomEvent","bubbles","Event","_styles","removeStylesheet","forceUpdate","styleLocation","createStylesheet","_max","addCSSRule","getHeight","setAttribute","String","removeProperty","same","attrs","resizeHandles","hasOwnProperty","classes","changedColumn","oneColumn","cellHeightThrottle","_cellHeightThrottle","throttle","forceRemove","workTodo","_windowResizeBind","margins","commit","obsolete","Engine","GDRev","f","oldName","newName","rev","wrapper","args","apply","info","oldAttr","querySelectorAll","getElementById","x0","x1","y0","y1","col","styleSheet","cssText","createTextNode","insertBefore","firstChild","getElementsByTagName","sheet","rules","addRule","insertRule","v","Boolean","Error","parseFloat","sources","source","doMinMax","removeEl","func","delay","isWaiting","scrollingElement","test","overflow","overflowY","innerHeightOrClientHeight","innerHeight","clientHeight","offsetDiffDown","offsetDiffUp","prevScroll","pointerPosY","scrollBy","behavior","obj","skipFields","ret","styles","isArray","evt","which","buttons","dataTransfer","ctrlKey","altKey","shiftKey","metaKey","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"mappings":";CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAmB,UAAID,IAEvBD,EAAgB,UAAIC,GACrB,CATD,CASGK,MAAM,WACT,M,gHCJA,sCAOY,KAAAC,eAEN,CAAC,CA0BP,CAjCaC,eAAwB,OAAOC,KAAKC,SAAW,CASnDC,GAAGC,EAAeC,GACvBJ,KAAKF,eAAeK,GAASC,CAC/B,CAEOC,IAAIF,UACFH,KAAKF,eAAeK,EAC7B,CAEOG,SACLN,KAAKC,WAAY,CACnB,CAEOM,UACLP,KAAKC,WAAY,CACnB,CAEOO,iBACER,KAAKF,cACd,CAEOW,aAAaC,EAAmBP,GACrC,IAAKH,KAAKD,UAAYC,KAAKF,gBAAkBE,KAAKF,eAAeY,GAC/D,OAAOV,KAAKF,eAAeY,GAAWP,EAC1C,E,sFCnCF,eACA,SACA,SAGA,SA4BA,MAAaQ,UAAoB,EAAAC,gBAwB/BC,YAAYC,EAAiBC,EAAyB,CAAC,GACrDC,QACAhB,KAAKc,GAAKA,EACVd,KAAKe,OAASA,EAEd,IAAIE,EAAYF,EAAOG,OAAOC,UAAU,GACxCnB,KAAKoB,OAASN,EAAGO,UAAUC,SAASL,GAAaH,EAAKA,EAAGS,cAAcR,EAAOG,SAAWJ,EAEzFd,KAAKwB,WAAaxB,KAAKwB,WAAWC,KAAKzB,MACvCA,KAAK0B,WAAa1B,KAAK0B,WAAWD,KAAKzB,MACvCA,KAAK2B,SAAW3B,KAAK2B,SAASF,KAAKzB,MACnCA,KAAKM,QACP,CAEOJ,GAAGC,EAAoBC,GAC5BY,MAAMd,GAAGC,EAAOC,EAClB,CAEOC,IAAIF,GACTa,MAAMX,IAAIF,EACZ,CAEOG,UACiB,IAAlBN,KAAKD,WACTiB,MAAMV,SACNN,KAAKoB,OAAOQ,iBAAiB,YAAa5B,KAAKwB,YAC3C,EAAAK,UACF7B,KAAKoB,OAAOQ,iBAAiB,aAAc,EAAAE,YAC3C9B,KAAKoB,OAAOQ,iBAAiB,cAAe,EAAAG,cAG9C/B,KAAKc,GAAGO,UAAUW,OAAO,yBACzBhC,KAAKc,GAAGO,UAAUY,IAAI,gBACxB,CAEO1B,QAAQ2B,GAAa,IACJ,IAAlBlC,KAAKD,WACTiB,MAAMT,UACNP,KAAKoB,OAAOe,oBAAoB,YAAanC,KAAKwB,YAC9C,EAAAK,UACF7B,KAAKoB,OAAOe,oBAAoB,aAAc,EAAAL,YAC9C9B,KAAKoB,OAAOe,oBAAoB,cAAe,EAAAJ,cAEjD/B,KAAKc,GAAGO,UAAUW,OAAO,gBACpBE,GAAYlC,KAAKc,GAAGO,UAAUY,IAAI,yBACzC,CAEOzB,UACDR,KAAKoC,aAAaC,OAAOC,aAAatC,KAAKoC,oBACxCpC,KAAKoC,YACRpC,KAAKuC,UAAUvC,KAAK2B,SAAS3B,KAAKwC,gBACtCxC,KAAKO,SAAQ,UACNP,KAAKc,UACLd,KAAKyC,cACLzC,KAAKe,OACZC,MAAMR,SACR,CAEOkC,aAAaC,GAElB,OADAC,OAAOC,KAAKF,GAAMG,SAAQC,GAAO/C,KAAKe,OAAOgC,GAAOJ,EAAKI,KAClD/C,IACT,CAGUwB,WAAWwB,GAEnB,GAAI,EAAAC,UAAUC,aAAc,OAC5B,GAAiB,IAAbF,EAAEG,OAAc,OAAO,EAG3B,MACMC,EAAQJ,EAAEK,OAAuBC,SAASC,cAChD,MAFsB,CAAC,QAAS,WAAY,SAAU,SAAU,UAE9CC,MAAKC,GAAQA,IAASL,MAUxCpD,KAAKwC,eAAiBQ,SACfhD,KAAKuC,gBACL,EAAAU,UAAUS,mBACV,EAAAT,UAAUU,YAEjBC,SAAShC,iBAAiB,YAAa5B,KAAK0B,YAAY,GACxDkC,SAAShC,iBAAiB,UAAW5B,KAAK2B,UAAU,GAChD,EAAAE,UACF7B,KAAKoB,OAAOQ,iBAAiB,YAAa,EAAAiC,WAC1C7D,KAAKoB,OAAOQ,iBAAiB,WAAY,EAAAkC,WAG3Cd,EAAEe,iBACF,EAAAd,UAAUC,cAAe,IAvB6B,CAyBxD,CAGUc,UAAUhB,GAClB,IAAKhD,KAAKuC,SAAU,OACpB,MAAM0B,EAAK,EAAAC,MAAMC,UAAqBnB,EAAG,CAAEK,OAAQrD,KAAKc,GAAIsD,KAAM,SAC9DpE,KAAKe,OAAOsD,MACdrE,KAAKe,OAAOsD,KAAKJ,EAAIjE,KAAKsE,MAE5BtE,KAAKS,aAAa,OAAQwD,EAC5B,CAGUvC,WAAWsB,G,MAEnB,IAAIuB,EAAIvE,KAAKwC,eAEb,GAAIxC,KAAKuC,SAGP,GAFAvC,KAAKwE,YAAYxB,GAEb,EAAAC,UAAUwB,UAAW,CACvB,MAAMC,EAAQC,OAAOC,UAAU,EAAA3B,UAAUwB,WAAa,EAAAxB,UAAUwB,UAAsB,IAClFzE,KAAKoC,aAAaC,OAAOC,aAAatC,KAAKoC,aAC/CpC,KAAKoC,YAAcC,OAAOwC,YAAW,IAAM7E,KAAKgE,UAAUhB,IAAI0B,E,MAE9D1E,KAAKgE,UAAUhB,QAEZ,GAAI8B,KAAKC,IAAI/B,EAAEgC,EAAIT,EAAES,GAAKF,KAAKC,IAAI/B,EAAEiC,EAAIV,EAAEU,GAAK,EAAG,CAIxDjF,KAAKuC,UAAW,EAChB,EAAAU,UAAUS,YAAc1D,KAExB,IAAIkF,EAAqD,QAA7C,EAAAlF,KAAKc,GAA2BqE,qBAAa,eAAED,KACvDA,EACF,EAAAjC,UAAUU,YAAeuB,EAAKpE,GAAqBsE,UAAUC,mBAEtD,EAAApC,UAAUU,YAEnB3D,KAAKyC,OAASzC,KAAKsF,cAActC,GACjChD,KAAKuF,+BACLvF,KAAKwF,WAAaxF,KAAKyF,eAAezC,EAAGhD,KAAKc,GAAId,KAAK0F,mBACvD,MAAMzB,EAAK,EAAAC,MAAMC,UAAqBnB,EAAG,CAAEK,OAAQrD,KAAKc,GAAIsD,KAAM,cAElEpE,KAAK2F,kBAAkB3C,GACnBhD,KAAKe,OAAO6E,OACd5F,KAAKe,OAAO6E,MAAM3B,EAAIjE,KAAKsE,MAE7BtE,KAAKS,aAAa,YAAawD,E,CAGjC,OADAjB,EAAEe,kBACK,CACT,CAGUpC,SAASqB,G,MAOjB,GANAY,SAASzB,oBAAoB,YAAanC,KAAK0B,YAAY,GAC3DkC,SAASzB,oBAAoB,UAAWnC,KAAK2B,UAAU,GACnD,EAAAE,UACF7B,KAAKoB,OAAOe,oBAAoB,YAAa,EAAA0B,WAAW,GACxD7D,KAAKoB,OAAOe,oBAAoB,WAAY,EAAA2B,UAAU,IAEpD9D,KAAKuC,SAAU,QACVvC,KAAKuC,UAGa,QAArB,IAAAU,UAAUU,mBAAW,eAAE7C,MAAOd,KAAKc,GAAG+E,sBACjC,EAAA5C,UAAUU,YAGnB3D,KAAK0F,kBAAkBI,MAAMC,SAAW/F,KAAKgG,2BAA6B,KACtEhG,KAAKyC,SAAWzC,KAAKc,GACvBd,KAAKiG,qBAELjG,KAAKyC,OAAOT,SAEd,MAAMiC,EAAK,EAAAC,MAAMC,UAAqBnB,EAAG,CAAEK,OAAQrD,KAAKc,GAAIsD,KAAM,aAC9DpE,KAAKe,OAAOmF,MACdlG,KAAKe,OAAOmF,KAAKjC,GAEnBjE,KAAKS,aAAa,WAAYwD,GAG1B,EAAAhB,UAAUU,aACZ,EAAAV,UAAUU,YAAYwC,KAAKnD,E,QAGxBhD,KAAKyC,cACLzC,KAAKwC,sBACL,EAAAS,UAAUS,mBACV,EAAAT,UAAUU,mBACV,EAAAV,UAAUC,aACjBF,EAAEe,gBACJ,CAGUuB,cAAcnF,GACtB,IAAIsC,EAASzC,KAAKc,GAYlB,MAXkC,mBAAvBd,KAAKe,OAAO0B,OACrBA,EAASzC,KAAKe,OAAO0B,OAAOtC,GACI,UAAvBH,KAAKe,OAAO0B,SACrBA,EAAS,EAAAyB,MAAMkC,UAAUpG,KAAKc,KAE3B8C,SAASyC,KAAK/E,SAASmB,IAC1B,EAAAyB,MAAMoC,SAAS7D,EAAiC,WAAzBzC,KAAKe,OAAOuF,SAAwBtG,KAAKc,GAAGyF,WAAavG,KAAKe,OAAOuF,UAE1F7D,IAAWzC,KAAKc,KAClBd,KAAKwG,uBAAyB7F,EAAY8F,gBAAgBC,KAAIC,GAAQ3G,KAAKc,GAAGgF,MAAMa,MAE/ElE,CACT,CAGUkD,kBAAkB3C,GAC1BhD,KAAKyC,OAAOpB,UAAUY,IAAI,yBAE1B,MAAM6D,EAAQ9F,KAAKyC,OAAOqD,MAe1B,OAdAA,EAAMc,cAAgB,OAEtBd,EAAM,aAAe,EACrBA,EAAMe,MAAQ7G,KAAKwF,WAAWqB,MAAQ,KACtCf,EAAMgB,OAAS9G,KAAKwF,WAAWsB,OAAS,KACxChB,EAAMiB,WAAa,YACnBjB,EAAMC,SAAW,QACjB/F,KAAKwE,YAAYxB,GACjB8C,EAAMkB,WAAa,OACnBnC,YAAW,KACL7E,KAAKyC,SACPqD,EAAMkB,WAAa,K,GAEpB,GACIhH,IACT,CAGUiG,qB,MACRjG,KAAKyC,OAAOpB,UAAUW,OAAO,yBAC7B,IAAIiF,EAA2C,QAAnC,EAAAjH,KAAKyC,cAA8B,eAAE0C,cAEjD,GAAInF,KAAKwG,0BAA4BS,IAASA,EAAKC,kBAAmB,CACpE,IAAIzE,EAASzC,KAAKyC,OAEduE,EAAahH,KAAKwG,uBAAmC,YAAK,KAC9D/D,EAAOqD,MAAMkB,WAAahH,KAAKwG,uBAAmC,WAAI,OACtE7F,EAAY8F,gBAAgB3D,SAAQ6D,GAAQlE,EAAOqD,MAAMa,GAAQ3G,KAAKwG,uBAAuBG,IAAS,OACtG9B,YAAW,IAAMpC,EAAOqD,MAAMkB,WAAaA,GAAY,G,CAGzD,cADOhH,KAAKwG,uBACLxG,IACT,CAGUwE,YAAYxB,GAMpB,MAAM8C,EAAQ9F,KAAKyC,OAAOqD,MACpBqB,EAASnH,KAAKwF,WACpBM,EAAMsB,KAAOpE,EAAEqE,QAAUF,EAAOG,WAPF,EAOsC,KACpExB,EAAMyB,IAAMvE,EAAEwE,QAAUL,EAAOM,UARO,EAQ2B,IACnE,CAGUlC,+BAQR,OAPAvF,KAAK0F,kBAAoB1F,KAAKyC,OAAOoD,cACF,UAA/B7F,KAAKyC,OAAOqD,MAAMC,WACpB/F,KAAKgG,0BAA4BhG,KAAK0F,kBAAkBI,MAAMC,SAC1D1D,OAAOqF,iBAAiB1H,KAAK0F,mBAAmBK,SAAS4B,MAAM,YACjE3H,KAAK0F,kBAAkBI,MAAMC,SAAW,aAGrC/F,IACT,CAGUyF,eAAetF,EAAkBW,EAAiB8G,GAG1D,IAAIC,EAAe,EACfC,EAAe,EACnB,GAAIF,EAAQ,CACV,MAAMG,EAASnE,SAASoE,cAAc,OACtC,EAAA9D,MAAM+D,YAAYF,EAAQ,CACxBG,QAAS,IACTnC,SAAU,QACVwB,IAAK,MACLH,KAAM,MACNP,MAAO,MACPC,OAAQ,MACRqB,OAAQ,YAEVP,EAAOQ,YAAYL,GACnB,MAAMM,EAAiBN,EAAOO,wBAC9BV,EAAOW,YAAYR,GACnBF,EAAeQ,EAAejB,KAC9BU,EAAeO,EAAed,G,CAIhC,MAAMiB,EAAe1H,EAAGwH,wBACxB,MAAO,CACLlB,KAAMoB,EAAapB,KACnBG,IAAKiB,EAAajB,IAClBD,YAAcnH,EAAMkH,QAAUmB,EAAapB,KAAOS,EAClDJ,WAAatH,EAAMqH,QAAUgB,EAAajB,IAAMO,EAChDjB,MAAO2B,EAAa3B,MACpBC,OAAQ0B,EAAa1B,OAEzB,CAGOxC,KACL,MACMmE,EADgBzI,KAAKc,GAAG+E,cACQyC,wBAChCnB,EAASnH,KAAKyC,OAAO6F,wBAC3B,MAAO,CACLvC,SAAU,CACRwB,IAAKJ,EAAOI,IAAMkB,EAAgBlB,IAClCH,KAAMD,EAAOC,KAAOqB,EAAgBrB,MAO1C,EA7VF,gBAoBmB,EAAAX,gBAAkB,CAAC,aAAc,gBAAiB,WAAY,OAAQ,M,sFCpDzF,eACA,SACA,SAEA,SAWA,MAAaiC,UAAoB,EAAA9H,gBAM/BC,YAAYC,EAAiB6B,EAAuB,CAAC,GACnD3B,QACAhB,KAAKc,GAAKA,EACVd,KAAKe,OAAS4B,EAEd3C,KAAK2I,YAAc3I,KAAK2I,YAAYlH,KAAKzB,MACzCA,KAAK4I,YAAc5I,KAAK4I,YAAYnH,KAAKzB,MACzCA,KAAKM,SACLN,KAAK6I,cACP,CAEO3I,GAAGC,EAAwCC,GAChDY,MAAMd,GAAGC,EAAOC,EAClB,CAEOC,IAAIF,GACTa,MAAMX,IAAIF,EACZ,CAEOG,UACiB,IAAlBN,KAAKD,WACTiB,MAAMV,SACNN,KAAKc,GAAGO,UAAUY,IAAI,gBACtBjC,KAAKc,GAAGO,UAAUW,OAAO,yBACzBhC,KAAKc,GAAGc,iBAAiB,aAAc5B,KAAK2I,aAC5C3I,KAAKc,GAAGc,iBAAiB,aAAc5B,KAAK4I,aACxC,EAAA/G,UACF7B,KAAKc,GAAGc,iBAAiB,eAAgB,EAAAkH,cACzC9I,KAAKc,GAAGc,iBAAiB,eAAgB,EAAAmH,eAE7C,CAEOxI,QAAQ2B,GAAa,IACJ,IAAlBlC,KAAKD,WACTiB,MAAMT,UACNP,KAAKc,GAAGO,UAAUW,OAAO,gBACpBE,GAAYlC,KAAKc,GAAGO,UAAUY,IAAI,yBACvCjC,KAAKc,GAAGqB,oBAAoB,aAAcnC,KAAK2I,aAC/C3I,KAAKc,GAAGqB,oBAAoB,aAAcnC,KAAK4I,aAC3C,EAAA/G,UACF7B,KAAKc,GAAGqB,oBAAoB,eAAgB,EAAA2G,cAC5C9I,KAAKc,GAAGqB,oBAAoB,eAAgB,EAAA4G,eAEhD,CAEOvI,UACLR,KAAKO,SAAQ,GACbP,KAAKc,GAAGO,UAAUW,OAAO,gBACzBhC,KAAKc,GAAGO,UAAUW,OAAO,yBACzBhB,MAAMR,SACR,CAEOkC,aAAaC,GAGlB,OAFAC,OAAOC,KAAKF,GAAMG,SAAQC,GAAO/C,KAAKe,OAAOgC,GAAOJ,EAAKI,KACzD/C,KAAK6I,eACE7I,IACT,CAGU2I,YAAY3F,GAEpB,IAAK,EAAAC,UAAUS,YAAa,OAC5B,IAAK1D,KAAKgJ,SAAS,EAAA/F,UAAUS,YAAY5C,IAAK,OAC9CkC,EAAEe,iBACFf,EAAEiG,kBAGE,EAAAhG,UAAUU,aAAe,EAAAV,UAAUU,cAAgB3D,MACrD,EAAAiD,UAAUU,YAAYiF,YAAY5F,GAEpC,EAAAC,UAAUU,YAAc3D,KAExB,MAAMiE,EAAK,EAAAC,MAAMC,UAAqBnB,EAAG,CAAEK,OAAQrD,KAAKc,GAAIsD,KAAM,aAC9DpE,KAAKe,OAAOmI,MACdlJ,KAAKe,OAAOmI,KAAKjF,EAAIjE,KAAKmJ,IAAI,EAAAlG,UAAUS,cAE1C1D,KAAKS,aAAa,WAAYwD,GAC9BjE,KAAKc,GAAGO,UAAUY,IAAI,oBAExB,CAGU2G,YAAY5F,G,MAEpB,IAAK,EAAAC,UAAUS,aAAe,EAAAT,UAAUU,cAAgB3D,KAAM,OAC9DgD,EAAEe,iBACFf,EAAEiG,kBAEF,MAAMhF,EAAK,EAAAC,MAAMC,UAAqBnB,EAAG,CAAEK,OAAQrD,KAAKc,GAAIsD,KAAM,YAMlE,GALIpE,KAAKe,OAAOqI,KACdpJ,KAAKe,OAAOqI,IAAInF,EAAIjE,KAAKmJ,IAAI,EAAAlG,UAAUS,cAEzC1D,KAAKS,aAAa,UAAWwD,GAEzB,EAAAhB,UAAUU,cAAgB3D,KAAM,CAKlC,IAAIqJ,SAJG,EAAApG,UAAUU,YAKjB,IAAIiE,EAAwB5H,KAAKc,GAAG+E,cACpC,MAAQwD,GAAczB,GACpByB,EAA6B,QAAnB,EAAGzB,EAAOxC,iBAAS,eAAEC,YAC/BuC,EAASA,EAAO/B,cAEdwD,GACFA,EAAWV,YAAY3F,E,CAG7B,CAGOmD,KAAKnD,GACVA,EAAEe,iBACF,MAAME,EAAK,EAAAC,MAAMC,UAAqBnB,EAAG,CAAEK,OAAQrD,KAAKc,GAAIsD,KAAM,SAC9DpE,KAAKe,OAAOoF,MACdnG,KAAKe,OAAOoF,KAAKlC,EAAIjE,KAAKmJ,IAAI,EAAAlG,UAAUS,cAE1C1D,KAAKS,aAAa,OAAQwD,EAC5B,CAGU+E,SAASlI,GACjB,OAAOA,KAAQd,KAAKsJ,QAAUtJ,KAAKsJ,OAAOxI,GAC5C,CAGU+H,eACR,OAAK7I,KAAKe,OAAOuI,QACiB,iBAAvBtJ,KAAKe,OAAOuI,OACrBtJ,KAAKsJ,OAAUxI,GAAoBA,EAAGyI,QAAQvJ,KAAKe,OAAOuI,QAE1DtJ,KAAKsJ,OAAStJ,KAAKe,OAAOuI,OAErBtJ,MANyBA,IAOlC,CAGUmJ,IAAI9E,GACZ,OAAO,OAAP,QACEmF,UAAWnF,EAAKvD,IACbuD,EAAKC,KAEZ,EArJF,e,oFChBA,eAEA,SACA,SAMA,MAAamF,EAYX5I,YAAYC,GACVd,KAAKc,GAAKA,CACZ,CAZA4I,YAAY5I,GAEV,OADKA,EAAGsE,YAAatE,EAAGsE,UAAY,IAAIqE,EAAU3I,IAC3CA,EAAGsE,SACZ,CAWOlF,GAAGQ,EAAmBN,GAQ3B,OAPIJ,KAAK2J,aAAe,CAAC,OAAQ,YAAa,YAAYC,QAAQlJ,IAAc,EAC9EV,KAAK2J,YAAYzJ,GAAGQ,EAAgDN,GAC3DJ,KAAKqF,aAAe,CAAC,OAAQ,WAAY,WAAWuE,QAAQlJ,IAAc,EACnFV,KAAKqF,YAAYnF,GAAGQ,EAA8CN,GACzDJ,KAAK6J,aAAe,CAAC,cAAe,SAAU,cAAcD,QAAQlJ,IAAc,GAC3FV,KAAK6J,YAAY3J,GAAGQ,EAAsDN,GAErEJ,IACT,CAEOK,IAAIK,GAQT,OAPIV,KAAK2J,aAAe,CAAC,OAAQ,YAAa,YAAYC,QAAQlJ,IAAc,EAC9EV,KAAK2J,YAAYtJ,IAAIK,GACZV,KAAKqF,aAAe,CAAC,OAAQ,WAAY,WAAWuE,QAAQlJ,IAAc,EACnFV,KAAKqF,YAAYhF,IAAIK,GACZV,KAAK6J,aAAe,CAAC,cAAe,SAAU,cAAcD,QAAQlJ,IAAc,GAC3FV,KAAK6J,YAAYxJ,IAAIK,GAEhBV,IACT,CAEO8J,eAAenH,GAMpB,OALK3C,KAAK2J,YAGR3J,KAAK2J,YAAYjH,aAAaC,GAF9B3C,KAAK2J,YAAc,IAAI,EAAAhJ,YAAYX,KAAKc,GAAI6B,GAIvC3C,IACT,CAEO+J,iBAKL,OAJI/J,KAAK2J,cACP3J,KAAK2J,YAAYnJ,iBACVR,KAAK2J,aAEP3J,IACT,CAEOgK,eAAerH,GAMpB,OALK3C,KAAK6J,YAGR7J,KAAK6J,YAAYnH,aAAaC,GAF9B3C,KAAK6J,YAAc,IAAI,EAAAI,YAAYjK,KAAKc,GAAI6B,GAIvC3C,IACT,CAEOkK,iBAKL,OAJIlK,KAAK6J,cACP7J,KAAK6J,YAAYrJ,iBACVR,KAAK6J,aAEP7J,IACT,CAEOmK,eAAexH,GAMpB,OALK3C,KAAKqF,YAGRrF,KAAKqF,YAAY3C,aAAaC,GAF9B3C,KAAKqF,YAAc,IAAI,EAAAqD,YAAY1I,KAAKc,GAAI6B,GAIvC3C,IACT,CAEOoK,iBAKL,OAJIpK,KAAKqF,cACPrF,KAAKqF,YAAY7E,iBACVR,KAAKqF,aAEPrF,IACT,EAvFF,a,sFCRA,eACA,SACA,SACA,SACA,SAsBA,MAAaqK,EAGXX,aACE,OAAOY,CACT,CAEOC,UAAUzJ,EAAyB6B,EAAcI,EAAayH,GAuBnE,OAtBAxK,KAAKyK,eAAe3J,GAAIgC,SAAQ4H,IAC9B,GAAa,YAAT/H,GAA+B,WAATA,EACxB+H,EAAIb,aAAea,EAAIb,YAAYlH,UAC9B,GAAa,YAATA,EACT+H,EAAIb,aAAea,EAAIR,sBAClB,GAAa,WAATvH,EACT+H,EAAIV,eAAe,CAAE,CAACjH,GAAMyH,QACvB,CACL,MAAMtF,EAAOwF,EAAI5J,GAAGqE,cAAcD,KAClC,IAAIyF,EAAUD,EAAI5J,GAAG8J,aAAa,qBAAuBF,EAAI5J,GAAG8J,aAAa,qBAAuB1F,EAAKvC,KAAK4H,UAAUI,QACpHE,GAAY3F,EAAKvC,KAAKmI,uBAC1BJ,EAAIV,eAAe,OAAD,sCACb9E,EAAKvC,KAAK4H,WACV,CAAEI,UAASE,aACX,CACDjF,MAAOjD,EAAKiD,MACZM,KAAMvD,EAAKuD,KACX6E,OAAQpI,EAAKoI,S,KAKd/K,IACT,CAEOwJ,UAAU1I,EAAyB6B,EAAcI,EAAayH,GAqBnE,OApBAxK,KAAKyK,eAAe3J,GAAIgC,SAAQ4H,IAC9B,GAAa,YAAT/H,GAA+B,WAATA,EACxB+H,EAAIf,aAAee,EAAIf,YAAYhH,UAC9B,GAAa,YAATA,EACT+H,EAAIf,aAAee,EAAIX,sBAClB,GAAa,WAATpH,EACT+H,EAAIZ,eAAe,CAAE,CAAC/G,GAAMyH,QACvB,CACL,MAAMtF,EAAOwF,EAAI5J,GAAGqE,cAAcD,KAClCwF,EAAIZ,eAAe,OAAD,wBACb5E,EAAKvC,KAAK6G,WACV,CAED5D,MAAOjD,EAAKiD,MACZM,KAAMvD,EAAKuD,KACX7B,KAAM1B,EAAK0B,O,KAKZrE,IACT,CAEOgL,OAAOlK,EAAsB6B,GAElC,OADA3C,KAAKyK,eAAe3J,GAAIgC,SAAQ4H,GAAOA,EAAIZ,eAAenH,KACnD3C,IACT,CAEOiL,UAAUnK,EAAyB6B,EAA0BI,EAAayH,GAkB/E,MAjB2B,mBAAhB7H,EAAK2G,QAA0B3G,EAAKuI,UAC7CvI,EAAKuI,QAAUvI,EAAK2G,OACpB3G,EAAK2G,OAAUxI,GAAO6B,EAAKuI,QAAQpK,IAErCd,KAAKyK,eAAe3J,GAAIgC,SAAQ4H,IACjB,YAAT/H,GAA+B,WAATA,EACxB+H,EAAIrF,aAAeqF,EAAIrF,YAAY1C,KACjB,YAATA,EACL+H,EAAIrF,aACNqF,EAAIN,iBAEY,WAATzH,EACT+H,EAAIP,eAAe,CAAE,CAACpH,GAAMyH,IAE5BE,EAAIP,eAAexH,E,IAGhB3C,IACT,CAGOmL,YAAYrK,GACjB,UAAUA,GAAMA,EAAGsE,WAAatE,EAAGsE,UAAUC,cAAgBvE,EAAGsE,UAAUC,YAAYtF,SACxF,CAGOqL,YAAYtK,GACjB,UAAUA,GAAMA,EAAGsE,WAAatE,EAAGsE,UAAUuE,cAAgB7I,EAAGsE,UAAUuE,YAAY5J,SACxF,CAGOsL,YAAYvK,GACjB,UAAUA,GAAMA,EAAGsE,WAAatE,EAAGsE,UAAUyE,cAAgB/I,EAAGsE,UAAUyE,YAAY9J,SACxF,CAEOG,GAAGY,EAAyBsC,EAAchD,GAS/C,OARAJ,KAAKyK,eAAe3J,GAAIgC,SAAQ4H,GAC9BA,EAAIxK,GAAGkD,GAAOjD,IACZC,EACED,EACA,EAAA8C,UAAUS,YAAc,EAAAT,UAAUS,YAAY5C,GAAKX,EAAMkD,OACzD,EAAAJ,UAAUS,YAAc,EAAAT,UAAUS,YAAYjB,OAAS,KAAK,MAG3DzC,IACT,CAEOK,IAAIS,EAAyBsC,GAElC,OADApD,KAAKyK,eAAe3J,GAAIgC,SAAQ4H,GAAOA,EAAIrK,IAAI+C,KACxCpD,IACT,CAGUyK,eAAea,EAAuBC,GAAS,GACvD,IAAIC,EAAQ,EAAAtH,MAAMuH,YAAYH,GAC9B,IAAKE,EAAME,OAAQ,MAAO,GAC1B,IAAIC,EAAOH,EAAM9E,KAAI1D,GAAKA,EAAEoC,YAAcmG,EAAS,EAAA9B,UAAUmC,KAAK5I,GAAK,QAEvE,OADKuI,GAAUI,EAAKE,QAAOC,GAAKA,IACzBH,CACT,EA1HF,gBA8HA,MAAMrB,EAAK,IAAID,EAuPf,SAAS0B,EAAcjL,EAAyBkB,GAC9C,IAAIiF,EAAOnG,EAAKA,EAAGqE,mBAAgB6G,EAC9B/E,GAASA,EAAK/B,OACnBlD,EAASiF,EAAKC,kBAAmB,SAAcD,EAAKC,iBACpDlF,EAASlB,EAAGO,UAAUY,IAAI,4BAA8BnB,EAAGO,UAAUW,OAAO,4BAC9E,CAlPA,EAAAiK,UAAUC,UAAUC,mBAAqB,WAGvC,GAAInM,KAAK2C,KAAKyJ,aAAgBpM,KAAK2C,KAAK0J,gBAAkBrM,KAAK2C,KAAK2J,UAElE,OADAhC,EAAGW,UAAUjL,KAAKc,GAAI,WACfd,KAIT,IAAIuM,EAAoBC,EAEpBC,EAAS,CAACtM,EAAkBW,EAAyB2B,KACvD,IAAIwE,EAAOnG,EAAGqE,cACd,IAAK8B,EAAM,OAEXxE,EAASA,GAAU3B,EACnB,IAAI8G,EAAS5H,KAAKc,GAAGwH,yBACjB,IAACf,EAAG,KAAEH,GAAQ3E,EAAO6F,wBACzBlB,GAAQQ,EAAOR,KACfG,GAAOK,EAAOL,IACd,IAAIjD,EAAe,CAACyB,SAAU,CAACwB,MAAKH,SAEpC,GAAIH,EAAKyF,kBAAmB,CAO1B,GANAzF,EAAKjC,EAAIF,KAAK6H,IAAI,EAAG7H,KAAK8H,MAAMxF,EAAOoF,IACvCvF,EAAKhC,EAAIH,KAAK6H,IAAI,EAAG7H,KAAK8H,MAAMrF,EAAMgF,WAC/BtF,EAAK4F,aACZ7M,KAAK8M,OAAOC,aAAa9F,IAGpBjH,KAAK8M,OAAOE,UAAU/F,GAAO,CAEhC,GADAA,EAAK4F,cAAe,GACf7M,KAAK8M,OAAOE,UAAU/F,GAEzB,YADAqD,EAAGjK,IAAIS,EAAI,QAGTmG,EAAKgG,cAEP,EAAA/I,MAAMgJ,QAAQjG,EAAMA,EAAKgG,oBAClBhG,EAAKgG,Y,CAKhBjN,KAAKmN,eAAe1K,EAAQtC,EAAOmE,EAAI2C,EAAMuF,EAAWD,E,MAGxDvM,KAAKoN,cAAc3K,EAAQtC,EAAOmE,EAAI2C,EAAMuF,EAAWD,E,EA2L3D,OAvLAjC,EAAGW,UAAUjL,KAAKc,GAAI,CACpBwI,OAASxI,IACP,IAAImG,EAAsBnG,EAAGqE,cAE7B,IAAI8B,aAAI,EAAJA,EAAM/B,QAASlF,KAAM,OAAO,EAChC,IAAKA,KAAK2C,KAAK0J,cAAe,OAAO,EAErC,IAAIgB,GAAY,EAChB,GAAuC,mBAA5BrN,KAAK2C,KAAK0J,cACnBgB,EAAYrN,KAAK2C,KAAK0J,cAAcvL,OAC/B,CACL,IAAIwM,GAAwC,IAA5BtN,KAAK2C,KAAK0J,cAAyB,mBAAqBrM,KAAK2C,KAAK0J,cAClFgB,EAAYvM,EAAGyI,QAAQ+D,E,CAGzB,GAAID,GAAapG,GAAQjH,KAAK2C,KAAK4K,OAAQ,CACzC,IAAIC,EAAI,CAACC,EAAGxG,EAAKwG,EAAGC,EAAGzG,EAAKyG,EAAGC,KAAM1G,EAAK0G,KAAMC,KAAM3G,EAAK2G,MAC3DP,EAAYrN,KAAK8M,OAAOE,UAAUQ,E,CAEpC,OAAOH,CAAS,IAMjBnN,GAAGF,KAAKc,GAAI,YAAY,CAACX,EAAcW,EAAyB2B,KAE/D,IAAIwE,EAAOnG,EAAGqE,cAEd,IAAI8B,aAAI,EAAJA,EAAM/B,QAASlF,OAASiH,EAAKyF,kBAE/B,OAAO,GAILzF,aAAI,EAAJA,EAAM/B,OAAQ+B,EAAK/B,OAASlF,OAASiH,EAAKyF,mBAE5BzF,EAAK/B,KACX2I,OAAO/M,EAAI2B,GAIvB+J,EAAYxM,KAAKwM,YACjBD,EAAavM,KAAK8N,eAAc,GAG3B7G,IACHA,EAAOjH,KAAK+N,UAAUjN,IAEnBmG,EAAK/B,OACR+B,EAAK+G,aAAc,EACnBlN,EAAGqE,cAAgB8B,GAIrBxE,EAASA,GAAU3B,EACnB,IAAI2M,EAAIxG,EAAKwG,GAAK3I,KAAK8H,MAAMnK,EAAOwL,YAAczB,IAAc,EAC5DkB,EAAIzG,EAAKyG,GAAK5I,KAAK8H,MAAMnK,EAAOyL,aAAe3B,IAAe,EAyBlE,OAtBItF,EAAK/B,MAAQ+B,EAAK/B,OAASlF,MAGxBc,EAAGqN,qBAAoBrN,EAAGqN,mBAAqBlH,GACpDnG,EAAGqE,cAAgB8B,EAAO,OAAH,wBAAOA,GAAI,CAAEwG,IAAGC,IAAGxI,KAAMlF,OAChDA,KAAK8M,OAAOsB,YAAYnH,GACrB8F,aAAa9F,GAEhBA,EAAKoH,QACPpH,EAAK+G,YACL/G,EAAKyF,mBAAoB,IAEvBzF,EAAKwG,EAAIA,EAAGxG,EAAKyG,EAAIA,EACrBzG,EAAKyF,mBAAoB,GAI3BX,EAAc9E,EAAKnG,IAAI,GAEvBwJ,EAAGpK,GAAGY,EAAI,OAAQ2L,GAElBA,EAAOtM,EAAoBW,EAAI2B,IACxB,CAAK,IAKbvC,GAAGF,KAAKc,GAAI,WAAW,CAACX,EAAOW,EAAyB2B,KAEvD,IAAIwE,EAAOnG,EAAGqE,cACd,QAAK8B,IAGAA,EAAK/B,MAAQ+B,EAAK/B,OAASlF,OAC9BA,KAAK6N,OAAO/M,EAAI2B,GAEZzC,KAAKsO,SACPtO,KAAKuO,gBAAgBtH,KAGlB,EAAK,IAKb/G,GAAGF,KAAKc,GAAI,QAAQ,CAACX,EAAOW,EAAyB2B,K,QACpD,IAAIwE,EAAOnG,EAAGqE,cAEd,IAAI8B,aAAI,EAAJA,EAAM/B,QAASlF,OAASiH,EAAK+G,YAAa,OAAO,EAErD,IAAIQ,IAAaxO,KAAKyO,YAAY5I,cAClC7F,KAAKyO,YAAYzM,SAIjB,IAAI0M,EAAW5N,EAAGqN,mBAElB,UADOrN,EAAGqN,mBACNK,IAAYE,aAAQ,EAARA,EAAUxJ,OAAQwJ,EAASxJ,OAASlF,KAAM,CACxD,IAAI2O,EAAQD,EAASxJ,KACrByJ,EAAM7B,OAAO8B,aAAaC,KAAKH,GAC/BC,EAAMG,sBAEFH,EAAMI,iBAAmBJ,EAAM7B,OAAOkC,MAAMtD,QAAUiD,EAAMhM,KAAKsM,gBACnEN,EAAMJ,iB,CAIV,IAAKtH,EAAM,OAAO,EAoBlB,GAjBIuH,IACFxO,KAAK8M,OAAOsB,YAAYnH,GACxBA,EAAK/B,KAAOlF,MAEdsK,EAAGjK,IAAIS,EAAI,QAGP2B,IAAW3B,GACb2B,EAAOT,SACPlB,EAAGqE,cAAgBuJ,EACfF,IACF1N,EAAKA,EAAGsF,WAAU,MAGpBtF,EAAGkB,SACHhC,KAAKkP,UAAUpO,KAEZ0N,EAAU,OAAO,EACtB1N,EAAGqE,cAAgB8B,EACnBA,EAAKnG,GAAKA,EACV,IAAIqO,EAAyC,QAA9B,EAA0B,QAA9B,EAAIlI,EAAKkI,eAAqB,eAAErO,UAAE,eAAEsO,UA+B/C,OA7BA,EAAAlL,MAAMgJ,QAAQjG,EAAMjH,KAAK+N,UAAU/N,KAAKyO,cACxC,EAAAvK,MAAMmL,wBAAwBvO,GAC9Bd,KAAKsP,WAAWxO,EAAImG,GACpBjH,KAAKc,GAAGsH,YAAYtH,GAChBqO,IACFA,EAAQJ,eAAiB9H,EACpBkI,EAAQxM,KAAK4M,aAAaJ,EAAQK,eAAc,IAEvDxP,KAAKyP,yBACLzP,KAAK8M,OAAO4C,WAAWb,KAAK5H,GAC5BjH,KAAK2P,mBACL3P,KAAK4P,sBAEL5P,KAAK8M,OAAO+C,YACR7P,KAAK8P,gBAAyB,SAChC9P,KAAK8P,gBAAyB,QAAE,OAAD,wBAAK3P,GAAK,CAAEiE,KAAM,YAAYsK,GAAYA,EAASxJ,KAAOwJ,OAAW1C,EAAW/E,GAIjH5E,OAAOwC,YAAW,KAEZoC,EAAKnG,IAAMmG,EAAKnG,GAAG+E,cACrB7F,KAAK+P,uBAAuB9I,GAE5BjH,KAAK8M,OAAOkD,WAAW/I,UAElBA,EAAK/B,KAAKoJ,OAAO,KAGnB,CAAK,IAETtO,IACT,EAWA,EAAAiM,UAAUC,UAAU+D,iBAAmB,WACrC,IAAKjQ,KAAK2C,KAAKyJ,YAA6C,iBAAxBpM,KAAK2C,KAAK2J,UAAwB,CACpE,IAAI4D,EAAUtM,SAASrC,cAAcvB,KAAK2C,KAAK2J,WAC/C,IAAK4D,EAAS,OAAOlQ,KAIhBsK,EAAGa,YAAY+E,IAClB5F,EAAGW,UAAUiF,EAASlQ,KAAK2C,KAAKwN,kBAC7BjQ,GAAGgQ,EAAS,YAAY,CAAC/P,EAAOW,IAAOiL,EAAcjL,GAAI,KACzDZ,GAAGgQ,EAAS,WAAY,CAAC/P,EAAOW,IAAOiL,EAAcjL,GAAI,I,CAGhE,OAAOd,IACT,EAOA,EAAAiM,UAAUmE,YAAc,SAA0BpF,EAAiBqF,QACpCrE,KAAzBqE,aAAa,EAAbA,EAAe3L,SACjB,EAAAzB,UAAUwB,UAAY4L,EAAc3L,OAGhB,iBAAXsG,IACTqF,EAAgB,OAAH,wBAAO,EAAAC,sBAA0BD,GAAiB,CAAC,GAChE,EAAAnM,MAAMuH,YAAYT,GAAQlI,SAAQhC,IAC3BwJ,EAAGc,YAAYtK,IAAKwJ,EAAGU,OAAOlK,EAAIuP,EAAc,IAG3D,EAGA,EAAApE,UAAUC,UAAU6D,uBAAyB,SAA0B9I,GACrE,IAAInG,EAAKmG,EAAKnG,GACd,MAAMyP,EAAStJ,EAAKsJ,QAAUvQ,KAAK2C,KAAK6N,YAClCC,EAAWxJ,EAAKwJ,UAAYzQ,KAAK2C,KAAK+N,cAG5C,GAAI1Q,KAAK2C,KAAKyJ,YAAemE,GAAUE,EAMrC,OALIxJ,EAAKoH,UACPrO,KAAKkP,UAAUpO,UACRmG,EAAKoH,SAEdvN,EAAGO,UAAUY,IAAI,wBAAyB,yBACnCjC,KAGT,IAAKiH,EAAKoH,QAAS,CAEjB,IAAI7B,EACAD,EAGAoE,EAAgB,CAACxQ,EAAcmE,KAE7BtE,KAAK8P,gBAAgB3P,EAAMiE,OAC7BpE,KAAK8P,gBAAgB3P,EAAMiE,MAAMjE,EAAOA,EAAMkD,QAEhDmJ,EAAYxM,KAAKwM,YACjBD,EAAavM,KAAK8N,eAAc,GAEhC9N,KAAKmN,eAAerM,EAAIX,EAAOmE,EAAI2C,EAAMuF,EAAWD,EAAW,EAI7DqE,EAAe,CAACzQ,EAAcmE,KAChCtE,KAAKoN,cAActM,EAAIX,EAAOmE,EAAI2C,EAAMuF,EAAWD,EAAW,EAI5DsE,EAAe1Q,IACjBH,KAAKyO,YAAYzM,gBACViF,EAAK6J,eACL7J,EAAK8J,cACL9J,EAAK+J,WAGZ,IAAI3N,EAA8BlD,EAAMkD,OACxC,GAAKA,EAAO8B,eAAiB9B,EAAO8B,cAAcD,OAASlF,KAA3D,CAIA,GAFAiH,EAAKnG,GAAKuC,EAEN4D,EAAKC,iBAAkB,CACzB,IAAI+J,EAAenQ,EAAGqE,cAAcD,KAChC+L,EAAanB,gBAAgB3P,EAAMiE,OACrC6M,EAAanB,gBAAgB3P,EAAMiE,MAAMjE,EAAOkD,GAElDrD,KAAKkP,UAAUpO,GACfmQ,EAAanE,OAAO8B,aAAaC,KAAK5H,GACtCgK,EAAanC,6BAENhO,EAAGqE,qBACH8B,EAAKnG,GACZA,EAAGkB,Q,MAEH,EAAAkC,MAAMmL,wBAAwBhM,GAC1B4D,EAAKyF,mBAEP,EAAAxI,MAAMgJ,QAAQjG,EAAMA,EAAKiK,OACzBlR,KAAKmR,cAAc9N,EAAQ4D,GAC3BjH,KAAK8M,OAAOsE,QAAQnK,IAGpBjH,KAAKmR,cAAc9N,EAAQ4D,GAEzBjH,KAAK8P,gBAAgB3P,EAAMiE,OAC7BpE,KAAK8P,gBAAgB3P,EAAMiE,MAAMjE,EAAOkD,GAI5CrD,KAAKqR,cAAgB,EACrBrR,KAAKyP,yBACLzP,KAAK4P,sBAEL5P,KAAK8M,OAAO+C,WApC2D,CAoChD,EAGzBvF,EAAGd,UAAU1I,EAAI,CACf8E,MAAO+K,EACPzK,KAAM2K,EACNxM,KAAMuM,IACLrG,UAAUzJ,EAAI,CACf8E,MAAO+K,EACPzK,KAAM2K,EACN9F,OAAQ6F,IAEV3J,EAAKoH,SAAU,C,CAOjB,OAHA/D,EAAGd,UAAU1I,EAAIyP,EAAS,UAAY,UACnChG,UAAUzJ,EAAI2P,EAAW,UAAY,UAEjCzQ,IACT,EAGA,EAAAiM,UAAUC,UAAUiB,eAAiB,SAA0BrM,EAAyBX,EAAcmE,EAAc2C,EAAqBuF,EAAmBD,GAC1JvM,KAAK8M,OAAOwE,aACTC,YAAYtK,GAEfjH,KAAKmR,cAAcnR,KAAKyO,YAAaxH,GACrCjH,KAAKc,GAAGsH,YAAYpI,KAAKyO,aAGzBxH,EAAKnG,GAAKd,KAAKyO,YACfxH,EAAKuK,gBAAkBlN,EAAGyB,SAC1BkB,EAAKwK,UAAYnN,EAAGyB,SAASwB,IAC7BN,EAAK6J,QAA0B,cAAf3Q,EAAMiE,YACf6C,EAAK+J,WAEO,aAAf7Q,EAAMiE,MAAuB6C,EAAKyF,oBAEpC1M,KAAK8M,OAAOsE,QAAQnK,GACpBA,EAAK6J,SAAU,GAIjB9Q,KAAK8M,OAAO4E,WAAWlF,EAAWD,EAAYvM,KAAK2C,KAAKgP,UAAqB3R,KAAK2C,KAAKiP,YAAuB5R,KAAK2C,KAAKkP,aAAwB7R,KAAK2C,KAAKmP,YACvI,gBAAf3R,EAAMiE,OACRkG,EAAGC,UAAUzJ,EAAI,SAAU,WAAY0L,GAAavF,EAAK0G,MAAQ,IAC9DpD,UAAUzJ,EAAI,SAAU,YAAayL,GAActF,EAAK2G,MAAQ,IAC/D3G,EAAK8K,MAAQzH,EAAGC,UAAUzJ,EAAI,SAAU,WAAY0L,EAAYvF,EAAK8K,MACrE9K,EAAK+K,MAAQ1H,EAAGC,UAAUzJ,EAAI,SAAU,YAAayL,EAAatF,EAAK+K,MAE/E,EAMA,EAAA/F,UAAUC,UAAU2B,OAAS,SAA0B/M,EAAyB2B,GAC9E,IAAIwE,EAAOnG,EAAGqE,cACT8B,IAELqD,EAAGjK,IAAIS,EAAI,QAGPmG,EAAKyF,oBACTzF,EAAKyF,mBAAoB,EAEzB1M,KAAK8M,OAAOkD,WAAW/I,GACvBA,EAAKnG,GAAKmG,EAAK+G,aAAevL,EAASA,EAAS3B,GAEpB,IAAxBd,KAAK2C,KAAK2J,WAEZP,EAAcjL,GAAI,GAIhBA,EAAGqN,oBAELrN,EAAGqE,cAAgBrE,EAAGqN,0BACfrN,EAAGqN,oBACDlH,EAAK+G,qBAEP/G,EAAKnG,UACLA,EAAGqE,cAEVnF,KAAK8M,OAAOmF,mBAEhB,EAGA,EAAAhG,UAAUC,UAAUkB,cAAgB,SAA0BtM,EAAyBX,EAAmBmE,EACxG2C,EAAqBuF,EAAmBD,GACxC,IACI2F,EADAC,EAAI,OAAH,UAAOlL,EAAKiK,OAEbkB,EAAQpS,KAAK2C,KAAKmP,WACpBO,EAASrS,KAAK2C,KAAKiP,YACnBU,EAAOtS,KAAK2C,KAAKgP,UACjBY,EAAUvS,KAAK2C,KAAKkP,aAGlBW,EAAU1N,KAAK8H,MAAmB,GAAbL,GACvBkG,EAAS3N,KAAK8H,MAAkB,GAAZJ,GAMtB,GALA4F,EAAQtN,KAAK4N,IAAIN,EAAOK,GACxBJ,EAASvN,KAAK4N,IAAIL,EAAQI,GAC1BH,EAAOxN,KAAK4N,IAAIJ,EAAME,GACtBD,EAAUzN,KAAK4N,IAAIH,EAASC,GAET,SAAfrS,EAAMiE,KAAiB,CACzB,GAAI6C,EAAKyF,kBAAmB,OAC5B,IAAIiG,EAAWrO,EAAGyB,SAASwB,IAAMN,EAAKwK,UACtCxK,EAAKwK,UAAYnN,EAAGyB,SAASwB,IAC7B,EAAArD,MAAM0O,qBAAqB9R,EAAIwD,EAAGyB,SAAU4M,GAG5C,IAAIvL,EAAO9C,EAAGyB,SAASqB,MAAQ9C,EAAGyB,SAASqB,KAAOH,EAAKuK,gBAAgBpK,MAASiL,EAASD,GACrF7K,EAAMjD,EAAGyB,SAASwB,KAAOjD,EAAGyB,SAASwB,IAAMN,EAAKuK,gBAAgBjK,KAAQgL,EAAUD,GACtFH,EAAEnN,EAAIF,KAAK8H,MAAMxF,EAAOoF,GACxB2F,EAAElN,EAAIH,KAAK8H,MAAMrF,EAAMgF,GAGvB,IAAIsG,EAAO7S,KAAKqR,cAChB,GAAIrR,KAAK8M,OAAOgG,QAAQ7L,EAAMkL,GAAI,CAChC,IAAIY,EAAM/S,KAAKgT,SACXC,EAAQnO,KAAK6H,IAAI,EAAIwF,EAAElN,EAAIgC,EAAKyG,EAAKqF,GACrC/S,KAAK2C,KAAK4K,QAAUwF,EAAME,EAAQjT,KAAK2C,KAAK4K,SAC9C0F,EAAQnO,KAAK6H,IAAI,EAAG3M,KAAK2C,KAAK4K,OAASwF,IAEzC/S,KAAKqR,cAAgB4B,C,MAChBjT,KAAKqR,cAAgB,EAG5B,GAFIrR,KAAKqR,gBAAkBwB,GAAM7S,KAAKyP,yBAElCxI,EAAKjC,IAAMmN,EAAEnN,GAAKiC,EAAKhC,IAAMkN,EAAElN,EAAG,M,MAGjC,GAAmB,WAAf9E,EAAMiE,KAAoB,CACnC,GAAI+N,EAAEnN,EAAI,EAAG,OAOb,GALA,EAAAd,MAAMgP,mBAAmB/S,EAAOW,EAAIyL,GAGpC4F,EAAE1E,EAAI3I,KAAK8H,OAAOtI,EAAG6O,KAAKtM,MAAQuL,GAAS5F,GAC3C2F,EAAEzE,EAAI5I,KAAK8H,OAAOtI,EAAG6O,KAAKrM,OAASwL,GAAQ/F,GACvCtF,EAAKwG,IAAM0E,EAAE1E,GAAKxG,EAAKyG,IAAMyE,EAAEzE,EAAG,OACtC,GAAIzG,EAAK+J,YAAc/J,EAAK+J,WAAWvD,IAAM0E,EAAE1E,GAAKxG,EAAK+J,WAAWtD,IAAMyE,EAAEzE,EAAG,OAG/E,IAAItG,EAAO9C,EAAGyB,SAASqB,KAAOgL,EAC1B7K,EAAMjD,EAAGyB,SAASwB,IAAM+K,EAC5BH,EAAEnN,EAAIF,KAAK8H,MAAMxF,EAAOoF,GACxB2F,EAAElN,EAAIH,KAAK8H,MAAMrF,EAAMgF,GAEvB2F,GAAW,C,CAGbjL,EAAK8J,OAAS5Q,EACd8G,EAAK+J,WAAamB,EAClB,IAAIiB,EAA0B,CAC5BpO,EAAGV,EAAGyB,SAASqB,KAAOgL,EACtBnN,EAAGX,EAAGyB,SAASwB,IAAM+K,EACrB7E,GAAInJ,EAAG6O,KAAO7O,EAAG6O,KAAKtM,MAAQI,EAAKwG,EAAIjB,GAAa4F,EAAQC,EAC5D3E,GAAIpJ,EAAG6O,KAAO7O,EAAG6O,KAAKrM,OAASG,EAAKyG,EAAInB,GAAc+F,EAAOC,GAE/D,GAAIvS,KAAK8M,OAAOuG,cAAcpM,EAAM,OAAF,wBAAMkL,GAAC,CAAE3F,YAAWD,aAAY6G,OAAMlB,cAAY,CAClFjL,EAAKuK,gBAAkBlN,EAAGyB,SAC1B/F,KAAK8M,OAAO4E,WAAWlF,EAAWD,EAAY+F,EAAMD,EAAQE,EAASH,UAC9DnL,EAAKqM,UACRpB,GAAYjL,EAAKkI,SAAYlI,EAAKkI,QAAsBoE,iBAC5DvT,KAAKqR,cAAgB,EACrBrR,KAAKyP,yBAEL,IAAIpM,EAASlD,EAAMkD,OACnBrD,KAAKmR,cAAc9N,EAAQ4D,GACvBjH,KAAK8P,gBAAgB3P,EAAMiE,OAC7BpE,KAAK8P,gBAAgB3P,EAAMiE,MAAMjE,EAAOkD,E,CAG9C,EAOA,EAAA4I,UAAUC,UAAUsH,QAAU,SAA0BlI,EAAuBmI,GAC7E,OAAIzT,KAAK2C,KAAKyJ,YACd,EAAAH,UAAUR,YAAYH,GAAKxI,SAAQhC,IACjC,IAAImG,EAAOnG,EAAGqE,cACT8B,IACDwM,SAAYxM,EAAKsJ,OAAatJ,EAAKsJ,QAAS,EAChDvQ,KAAK+P,uBAAuB9I,GAAK,IALFjH,IAQnC,EAOA,EAAAiM,UAAUC,UAAU3B,UAAY,SAA0Be,EAAuBmI,GAC/E,OAAIzT,KAAK2C,KAAKyJ,YACd,EAAAH,UAAUR,YAAYH,GAAKxI,SAAQhC,IACjC,IAAImG,EAAOnG,EAAGqE,cACT8B,IACDwM,SAAYxM,EAAKwJ,SAAexJ,EAAKwJ,UAAW,EACpDzQ,KAAK+P,uBAAuB9I,GAAK,IALFjH,IAQnC,EAWA,EAAAiM,UAAUC,UAAU3L,QAAU,WAC5B,IAAIP,KAAK2C,KAAKyJ,WAId,OAHApM,KAAK0T,YAAW,GAChB1T,KAAK2T,cAAa,GAClB3T,KAAK4T,cAAc,WACZ5T,IACT,EAUA,EAAAiM,UAAUC,UAAU5L,OAAS,WAC3B,IAAIN,KAAK2C,KAAKyJ,WAId,OAHApM,KAAK0T,YAAW,GAChB1T,KAAK2T,cAAa,GAClB3T,KAAK4T,cAAc,UACZ5T,IACT,EAGA,EAAAiM,UAAUC,UAAUwH,WAAa,SAA0BG,GACzD,OAAI7T,KAAK2C,KAAKyJ,aACdpM,KAAK2C,KAAK6N,aAAeqD,EACzB7T,KAAK8M,OAAOkC,MAAMlM,SAAQ0K,GAAKxN,KAAKwT,QAAQhG,EAAE1M,GAAI+S,MAFjB7T,IAInC,EAGA,EAAAiM,UAAUC,UAAUyH,aAAe,SAA0BE,GAC3D,OAAI7T,KAAK2C,KAAKyJ,aACdpM,KAAK2C,KAAK+N,eAAiBmD,EAC3B7T,KAAK8M,OAAOkC,MAAMlM,SAAQ0K,GAAKxN,KAAKuK,UAAUiD,EAAE1M,GAAI+S,MAFnB7T,IAInC,EAGA,EAAAiM,UAAUC,UAAUgD,UAAY,SAA0BpO,GAMxD,OALAwJ,EAAGd,UAAU1I,EAAI,WAAWyJ,UAAUzJ,EAAI,WACtCA,EAAGqE,sBACErE,EAAGqE,cAAckJ,eAEnBvN,EAAGsE,UACHpF,IACT,C,kFCjxBA,mB,2FCPA,eAQA,MAAa8T,EAgBXjT,YAAYkT,EAAmBC,EAAmBjT,GANxC,KAAAkT,QAAS,EAOjBjU,KAAK+T,KAAOA,EACZ/T,KAAKkU,IAAMF,EACXhU,KAAKe,OAASA,EAEdf,KAAKwB,WAAaxB,KAAKwB,WAAWC,KAAKzB,MACvCA,KAAK0B,WAAa1B,KAAK0B,WAAWD,KAAKzB,MACvCA,KAAK2B,SAAW3B,KAAK2B,SAASF,KAAKzB,MAEnCA,KAAKmU,OACP,CAGUA,QACR,MAAMrT,EAAK8C,SAASoE,cAAc,OAalC,OAZAlH,EAAGO,UAAUY,IAAI,uBACjBnB,EAAGO,UAAUY,IAAI,GAAG6R,EAAkBM,SAASpU,KAAKkU,OACpDpT,EAAGgF,MAAMqC,OAAS,MAClBrH,EAAGgF,MAAMuO,WAAa,OACtBrU,KAAKc,GAAKA,EACVd,KAAK+T,KAAK3L,YAAYpI,KAAKc,IAC3Bd,KAAKc,GAAGc,iBAAiB,YAAa5B,KAAKwB,YACvC,EAAAK,UACF7B,KAAKc,GAAGc,iBAAiB,aAAc,EAAAE,YACvC9B,KAAKc,GAAGc,iBAAiB,cAAe,EAAAG,cAGnC/B,IACT,CAGOQ,UAUL,OATIR,KAAKiU,QAAQjU,KAAK2B,SAAS3B,KAAKwC,gBACpCxC,KAAKc,GAAGqB,oBAAoB,YAAanC,KAAKwB,YAC1C,EAAAK,UACF7B,KAAKc,GAAGqB,oBAAoB,aAAc,EAAAL,YAC1C9B,KAAKc,GAAGqB,oBAAoB,cAAe,EAAAJ,cAE7C/B,KAAK+T,KAAKxL,YAAYvI,KAAKc,WACpBd,KAAKc,UACLd,KAAK+T,KACL/T,IACT,CAGUwB,WAAWwB,GACnBhD,KAAKwC,eAAiBQ,EACtBY,SAAShC,iBAAiB,YAAa5B,KAAK0B,YAAY,GACxDkC,SAAShC,iBAAiB,UAAW5B,KAAK2B,UAAU,GAChD,EAAAE,UACF7B,KAAKc,GAAGc,iBAAiB,YAAa,EAAAiC,WACtC7D,KAAKc,GAAGc,iBAAiB,WAAY,EAAAkC,WAEvCd,EAAEiG,kBACFjG,EAAEe,gBACJ,CAGUrC,WAAWsB,GACnB,IAAIuB,EAAIvE,KAAKwC,eACTxC,KAAKiU,OACPjU,KAAK4T,cAAc,OAAQ5Q,GAClB8B,KAAKC,IAAI/B,EAAEgC,EAAIT,EAAES,GAAKF,KAAKC,IAAI/B,EAAEiC,EAAIV,EAAEU,GAAK,IAErDjF,KAAKiU,QAAS,EACdjU,KAAK4T,cAAc,QAAS5T,KAAKwC,gBACjCxC,KAAK4T,cAAc,OAAQ5Q,IAE7BA,EAAEiG,kBACFjG,EAAEe,gBACJ,CAGUpC,SAASqB,GACbhD,KAAKiU,QACPjU,KAAK4T,cAAc,OAAQ5Q,GAE7BY,SAASzB,oBAAoB,YAAanC,KAAK0B,YAAY,GAC3DkC,SAASzB,oBAAoB,UAAWnC,KAAK2B,UAAU,GACnD,EAAAE,UACF7B,KAAKc,GAAGqB,oBAAoB,YAAa,EAAA0B,WACzC7D,KAAKc,GAAGqB,oBAAoB,WAAY,EAAA2B,kBAEnC9D,KAAKiU,cACLjU,KAAKwC,eACZQ,EAAEiG,kBACFjG,EAAEe,gBACJ,CAGU6P,cAAcxQ,EAAcjD,GAEpC,OADIH,KAAKe,OAAOqC,IAAOpD,KAAKe,OAAOqC,GAAMjD,GAClCH,IACT,EA7GF,sBAcmB,EAAAoU,OAAS,e,sFCtB5B,cACA,SACA,SAEA,SAiBA,MAAanK,UAAoB,EAAArJ,gBA2B/BC,YAAYC,EAAiB6B,EAAuB,CAAC,GACnD3B,QAmQQ,KAAAmI,IAAM,KACd,MACMV,EADgBzI,KAAKc,GAAG+E,cACQyC,wBAChCgM,EAAU,CACdzN,MAAO7G,KAAKuU,aAAa1N,MACzBC,OAAQ9G,KAAKuU,aAAazN,OAAS9G,KAAKwU,SACxCpN,KAAMpH,KAAKuU,aAAanN,KACxBG,IAAKvH,KAAKuU,aAAahN,IAAMvH,KAAKwU,UAE9BpB,EAAOpT,KAAKyU,cAAgBH,EAClC,MAAO,CACLvO,SAAU,CACRqB,KAAMgM,EAAKhM,KAAOqB,EAAgBrB,KAClCG,IAAK6L,EAAK7L,IAAMkB,EAAgBlB,KAElC4L,KAAM,CACJtM,MAAOuM,EAAKvM,MACZC,OAAQsM,EAAKtM,QAehB,EAlSD9G,KAAKc,GAAKA,EACVd,KAAKe,OAAS4B,EAEd3C,KAAK0U,WAAa1U,KAAK0U,WAAWjT,KAAKzB,MACvCA,KAAK2U,UAAY3U,KAAK2U,UAAUlT,KAAKzB,MACrCA,KAAKM,SACLN,KAAK4U,eAAe5U,KAAKe,OAAO8J,UAChC7K,KAAK6U,gBACP,CAEO3U,GAAGC,EAAgDC,GACxDY,MAAMd,GAAGC,EAAOC,EAClB,CAEOC,IAAIF,GACTa,MAAMX,IAAIF,EACZ,CAEOG,SACLU,MAAMV,SACNN,KAAKc,GAAGO,UAAUY,IAAI,gBACtBjC,KAAKc,GAAGO,UAAUW,OAAO,yBACzBhC,KAAK4U,eAAe5U,KAAKe,OAAO8J,SAClC,CAEOtK,UACLS,MAAMT,UACNP,KAAKc,GAAGO,UAAUY,IAAI,yBACtBjC,KAAKc,GAAGO,UAAUW,OAAO,gBACzBhC,KAAK4U,gBAAe,EACtB,CAEOpU,UACLR,KAAK8U,kBACL9U,KAAK4U,gBAAe,GACpB5U,KAAKc,GAAGO,UAAUW,OAAO,uBAClBhC,KAAKc,GACZE,MAAMR,SACR,CAEOkC,aAAaC,GAClB,IAAIoS,EAAiBpS,EAAKgI,SAAWhI,EAAKgI,UAAY3K,KAAKe,OAAO4J,QAC9DqK,EAAkBrS,EAAKkI,UAAYlI,EAAKkI,WAAa7K,KAAKe,OAAO8J,SASrE,OARAjI,OAAOC,KAAKF,GAAMG,SAAQC,GAAO/C,KAAKe,OAAOgC,GAAOJ,EAAKI,KACrDgS,IACF/U,KAAK8U,kBACL9U,KAAK6U,kBAEHG,GACFhV,KAAK4U,eAAe5U,KAAKe,OAAO8J,UAE3B7K,IACT,CAGU4U,eAAeK,GAcvB,OAbIA,GACFjV,KAAKc,GAAGO,UAAUY,IAAI,yBAEtBjC,KAAKc,GAAGc,iBAAiB,YAAa5B,KAAK0U,YAC3C1U,KAAKc,GAAGc,iBAAiB,WAAY5B,KAAK2U,aAE1C3U,KAAKc,GAAGO,UAAUW,OAAO,yBACzBhC,KAAKc,GAAGqB,oBAAoB,YAAanC,KAAK0U,YAC9C1U,KAAKc,GAAGqB,oBAAoB,WAAYnC,KAAK2U,WACzC,EAAA1R,UAAUiS,oBAAsBlV,aAC3B,EAAAiD,UAAUiS,mBAGdlV,IACT,CAGU0U,WAAW1R,GAGf,EAAAC,UAAUiS,mBAAqB,EAAAjS,UAAUS,cAC7C,EAAAT,UAAUiS,kBAAoBlV,KAE9BA,KAAKc,GAAGO,UAAUW,OAAO,yBAC3B,CAGU2S,UAAU3R,GAEd,EAAAC,UAAUiS,oBAAsBlV,cAC7B,EAAAiD,UAAUiS,kBAEjBlV,KAAKc,GAAGO,UAAUY,IAAI,yBACxB,CAGU4S,iBACR,IAAIM,EAAmBnV,KAAKe,OAAO4J,SAAW,SAiB9C,MAhByB,QAArBwK,IACFA,EAAmB,uBAErBnV,KAAKoV,SAAWD,EAAiBE,MAAM,KACpC3O,KAAIwN,GAAOA,EAAIoB,SACf5O,KAAIwN,GAAO,IAAI,EAAAJ,kBAAkB9T,KAAKc,GAAIoT,EAAK,CAC9CtO,MAAQzF,IACNH,KAAKuV,aAAapV,EAAM,EAE1B+F,KAAO/F,IACLH,KAAKwV,YAAYrV,EAAM,EAEzBsV,KAAOtV,IACLH,KAAK0V,UAAUvV,EAAO+T,EAAI,MAGzBlU,IACT,CAGUuV,aAAapV,GACrBH,KAAKuU,aAAevU,KAAKc,GAAGwH,wBAC5BtI,KAAK2V,SAAW,EAAAzR,MAAM0R,iBAAiB5V,KAAKc,IAC5Cd,KAAK6V,QAAU7V,KAAK2V,SAASG,UAC7B9V,KAAKwU,SAAW,EAChBxU,KAAK+V,WAAa5V,EAClBH,KAAKgW,eACLhW,KAAKiW,eACL,MAAMhS,EAAK,EAAAC,MAAMC,UAAsBhE,EAAO,CAAEiE,KAAM,cAAef,OAAQrD,KAAKc,KAMlF,OALId,KAAKe,OAAO6E,OACd5F,KAAKe,OAAO6E,MAAM3B,EAAIjE,KAAKmJ,OAE7BnJ,KAAKc,GAAGO,UAAUY,IAAI,yBACtBjC,KAAKS,aAAa,cAAewD,GAC1BjE,IACT,CAGU0V,UAAUvV,EAAmB+T,GACrClU,KAAKwU,SAAWxU,KAAK2V,SAASG,UAAY9V,KAAK6V,QAC/C7V,KAAKyU,aAAezU,KAAKkW,WAAW/V,EAAO+T,GAC3ClU,KAAKiW,eACL,MAAMhS,EAAK,EAAAC,MAAMC,UAAsBhE,EAAO,CAAEiE,KAAM,SAAUf,OAAQrD,KAAKc,KAK7E,OAJId,KAAKe,OAAOgK,QACd/K,KAAKe,OAAOgK,OAAO9G,EAAIjE,KAAKmJ,OAE9BnJ,KAAKS,aAAa,SAAUwD,GACrBjE,IACT,CAGUwV,YAAYrV,GACpB,MAAM8D,EAAK,EAAAC,MAAMC,UAAsBhE,EAAO,CAAEiE,KAAM,aAAcf,OAAQrD,KAAKc,KAYjF,OAXId,KAAKe,OAAOmF,MACdlG,KAAKe,OAAOmF,KAAKjC,GAEnBjE,KAAKc,GAAGO,UAAUW,OAAO,yBACzBhC,KAAKS,aAAa,aAAcwD,GAChCjE,KAAKmW,sBACEnW,KAAK+V,kBACL/V,KAAKuU,oBACLvU,KAAKyU,oBACLzU,KAAK6V,eACL7V,KAAKwU,SACLxU,IACT,CAGUgW,eAQR,OAPAhW,KAAKoW,iBAAmBnM,EAAYoM,iBAAiB3P,KAAIC,GAAQ3G,KAAKc,GAAGgF,MAAMa,KAC/E3G,KAAKgG,0BAA4BhG,KAAKc,GAAG+E,cAAcC,MAAMC,SACzD1D,OAAOqF,iBAAiB1H,KAAKc,GAAG+E,eAAeE,SAAS4B,MAAM,YAChE3H,KAAKc,GAAG+E,cAAcC,MAAMC,SAAW,YAEzC/F,KAAKc,GAAGgF,MAAMC,SAAW,WACzB/F,KAAKc,GAAGgF,MAAMoC,QAAU,MACjBlI,IACT,CAGUmW,eAKR,OAJAlM,EAAYoM,iBAAiBvT,SAAQ,CAAC6D,EAAM2P,KAC1CtW,KAAKc,GAAGgF,MAAMa,GAAQ3G,KAAKoW,iBAAiBE,IAAM,IAAI,IAExDtW,KAAKc,GAAG+E,cAAcC,MAAMC,SAAW/F,KAAKgG,2BAA6B,KAClEhG,IACT,CAGUkW,WAAW/V,EAAmB+T,GACtC,MAAMqC,EAASvW,KAAK+V,WACdzB,EAAU,CACdzN,MAAO7G,KAAKuU,aAAa1N,MACzBC,OAAQ9G,KAAKuU,aAAazN,OAAS9G,KAAKwU,SACxCpN,KAAMpH,KAAKuU,aAAanN,KACxBG,IAAKvH,KAAKuU,aAAahN,IAAMvH,KAAKwU,UAG9BgC,EAAUrW,EAAMkH,QAAUkP,EAAOlP,QACjCoP,EAAUtW,EAAMqH,QAAU+O,EAAO/O,QAEnC0M,EAAItK,QAAQ,MAAQ,EACtB0K,EAAQzN,OAAS2P,EACRtC,EAAItK,QAAQ,MAAQ,IAC7B0K,EAAQzN,OAAS2P,EACjBlC,EAAQlN,MAAQoP,GAEdtC,EAAItK,QAAQ,MAAQ,EACtB0K,EAAQxN,QAAU2P,EACTvC,EAAItK,QAAQ,MAAQ,IAC7B0K,EAAQxN,QAAU2P,EAClBnC,EAAQ/M,KAAOkP,GAEjB,MAAMC,EAAY1W,KAAK2W,eAAerC,EAAQzN,MAAOyN,EAAQxN,QAa7D,OAZIhC,KAAK8H,MAAM0H,EAAQzN,SAAW/B,KAAK8H,MAAM8J,EAAU7P,SACjDqN,EAAItK,QAAQ,MAAQ,IACtB0K,EAAQlN,MAAQkN,EAAQzN,MAAQ6P,EAAU7P,OAE5CyN,EAAQzN,MAAQ6P,EAAU7P,OAExB/B,KAAK8H,MAAM0H,EAAQxN,UAAYhC,KAAK8H,MAAM8J,EAAU5P,UAClDoN,EAAItK,QAAQ,MAAQ,IACtB0K,EAAQ/M,KAAO+M,EAAQxN,OAAS4P,EAAU5P,QAE5CwN,EAAQxN,OAAS4P,EAAU5P,QAEtBwN,CACT,CAGUqC,eAAeC,EAAgBC,GACvC,MAAMC,EAAW9W,KAAKe,OAAO+V,UAAYnS,OAAOoS,iBAC1CC,EAAWhX,KAAKe,OAAOiW,UAAYJ,EACnCK,EAAYjX,KAAKe,OAAOkW,WAAatS,OAAOoS,iBAC5CG,EAAYlX,KAAKe,OAAOmW,WAAaL,EAG3C,MAAO,CAAEhQ,MAFK/B,KAAK4N,IAAIoE,EAAUhS,KAAK6H,IAAIqK,EAAUJ,IAEpC9P,OADDhC,KAAK4N,IAAIuE,EAAWnS,KAAK6H,IAAIuK,EAAWL,IAEzD,CAGUZ,eACR,IAAIxN,EAAkB,CAAErB,KAAM,EAAGG,IAAK,EAAGV,MAAO,EAAGC,OAAQ,GAC3D,GAA+B,aAA3B9G,KAAKc,GAAGgF,MAAMC,SAAyB,CACzC,MAAMoR,EAAgBnX,KAAKc,GAAG+E,eACxB,KAAEuB,EAAI,IAAEG,GAAQ4P,EAAc7O,wBACpCG,EAAkB,CAAErB,OAAMG,MAAKV,MAAO,EAAGC,OAAQ,E,CAEnD,OAAK9G,KAAKyU,cACV7R,OAAOC,KAAK7C,KAAKyU,cAAc3R,SAAQC,IACrC,MAAMyH,EAAQxK,KAAKyU,aAAa1R,GAChC/C,KAAKc,GAAGgF,MAAM/C,GAAOyH,EAAQ/B,EAAgB1F,GAAO,IAAI,IAEnD/C,MALwBA,IAMjC,CAGU8U,kBAGR,OAFA9U,KAAKoV,SAAStS,SAAQ5B,GAAUA,EAAOV,mBAChCR,KAAKoV,SACLpV,IACT,EA5RF,gBAyBmB,EAAAqW,iBAAmB,CAAC,QAAS,SAAU,WAAY,OAAQ,MAAO,UAAW,S,kKC9ChG,eAOa,EAAAxU,QAAqC,oBAAXQ,QAA8C,oBAAbuB,WACtE,iBAAkBA,UACf,iBAAkBvB,QAEhBA,OAAe+U,eAAiBxT,oBAAqBvB,OAAe+U,eACtEC,UAAUC,eAAiB,GAC1BD,UAAkBE,iBAAmB,GAK3C,MAAMC,GAoBN,SAASC,EAAmBzU,EAAe0U,GAGzC,GAAI1U,EAAE2U,QAAQjM,OAAS,EAAG,OAGtB1I,EAAE4U,YAAY5U,EAAEe,iBAEpB,MAAM8T,EAAQ7U,EAAE8U,eAAe,GAAIC,EAAiBnU,SAASoU,YAAY,eAGzED,EAAeE,eACbP,GACA,GACA,EACArV,OACA,EACAwV,EAAMK,QACNL,EAAMM,QACNN,EAAMxQ,QACNwQ,EAAMrQ,SACN,GACA,GACA,GACA,EACA,EACA,MAIFxE,EAAEK,OAAO+U,cAAcL,EACzB,CAOA,SAASM,EAA0BrV,EAAiB0U,GAG9C1U,EAAE4U,YAAY5U,EAAEe,iBAEpB,MAAMgU,EAAiBnU,SAASoU,YAAY,eAG5CD,EAAeE,eACbP,GACA,GACA,EACArV,OACA,EACAW,EAAEkV,QACFlV,EAAEmV,QACFnV,EAAEqE,QACFrE,EAAEwE,SACF,GACA,GACA,GACA,EACA,EACA,MAIFxE,EAAEK,OAAO+U,cAAcL,EACzB,CAOA,sBAA2B/U,GAErBwU,EAAQc,eAAuBd,EAAQc,cAAe,EAK1Db,EAAmBzU,EAAG,aACxB,EAMA,qBAA0BA,GAEnBwU,EAAQc,cAEbb,EAAmBzU,EAAG,YACxB,EAMA,oBAAyBA,GAGvB,IAAKwU,EAAQc,aAAc,OAGvBd,EAAQe,sBACVlW,OAAOC,aAAakV,EAAQe,4BACrBf,EAAQe,qBAGjB,MAAMC,IAAgB,EAAAvV,UAAUS,YAGhC+T,EAAmBzU,EAAG,WAIjBwV,GACHf,EAAmBzU,EAAG,SAIxBwU,EAAQc,cAAe,CACzB,EAOA,uBAA4BtV,GACzBA,EAAEK,OAAuBoV,sBAAsBzV,EAAE0V,UACpD,EAEA,wBAA6B1V,GAEtB,EAAAC,UAAUS,aAKf2U,EAA0BrV,EAAG,aAC/B,EAEA,wBAA6BA,GAGtB,EAAAC,UAAUS,cAIf8T,EAAQe,oBAAsBlW,OAAOwC,YAAW,YACvC2S,EAAQe,oBAEfF,EAA0BrV,EAAG,aAAa,GACzC,IACL,C,yFCjMA,eAqBA,MAAa2V,EAsBX,YAAmBhW,EAA+B,CAAC,GAlB5C,KAAA+M,WAA8B,GAC9B,KAAAd,aAAgC,GAkBrC5O,KAAK4Y,OAASjW,EAAKiW,QAAU,GAC7B5Y,KAAKuN,OAAS5K,EAAK4K,OACnBvN,KAAK6Y,OAASlW,EAAKmW,MACnB9Y,KAAKgP,MAAQrM,EAAKqM,OAAS,GAC3BhP,KAAK+Y,SAAWpW,EAAKoW,QACvB,CAEOC,YAAYC,GAAO,GACxB,QAAMjZ,KAAKkZ,YAAcD,IACzBjZ,KAAKkZ,UAAYD,EACbA,GACFjZ,KAAKmZ,WAAanZ,KAAK6Y,OACvB7Y,KAAK6Y,QAAS,EACd7Y,KAAKoZ,gBAELpZ,KAAK6Y,OAAS7Y,KAAKmZ,kBACZnZ,KAAKmZ,WACZnZ,KAAKqZ,aAAaC,YATkBtZ,IAYxC,CAGUuZ,kBAAkBtS,EAAqBuS,GAC/C,OAAQxZ,KAAK8Y,QAAU9Y,KAAKyZ,cAAgBxS,EAAK6J,SAAW7J,EAAKqM,WAAakG,EAAGvU,GAAKgC,EAAKhC,EAC7F,CAIUyU,eAAezS,EAAqBuS,EAAKvS,EAAM6L,EAAyB6G,EAAyB,CAAC,GAI1G,GAHA3Z,KAAK4Z,WAAW,KAEhB9G,EAAUA,GAAW9S,KAAK8S,QAAQ7L,EAAMuS,IAC1B,OAAO,EAGrB,GAAIvS,EAAK6J,UAAY6I,EAAIE,SAAW7Z,KAAK8Y,OACnC9Y,KAAK8Z,KAAK7S,EAAM6L,GAAU,OAAO,EAIvC,IAAIiH,EAAOP,EACPxZ,KAAKuZ,kBAAkBtS,EAAMuS,KAC/BO,EAAO,CAAC/U,EAAG,EAAGyI,EAAGzN,KAAK4Y,OAAQ3T,EAAGuU,EAAGvU,EAAGyI,EAAG8L,EAAG9L,GAC7CoF,EAAU9S,KAAK8S,QAAQ7L,EAAM8S,EAAMJ,EAAIlW,OAGzC,IAAIuW,GAAU,EACVC,EAA4B,CAACJ,QAAQ,EAAMK,MAAM,GACrD,KAAOpH,EAAUA,GAAW9S,KAAK8S,QAAQ7L,EAAM8S,EAAMJ,EAAIlW,OAAO,CAC9D,IAAI0W,EAqBJ,GAlBIrH,EAAQsH,QAAUnT,EAAK6J,UAAY7J,EAAKqM,WAAakG,EAAGvU,EAAIgC,EAAKhC,IAAMjF,KAAK8Y,SAE5E9Y,KAAK8S,QAAQA,EAAS,OAAF,wBAAMA,GAAO,CAAE7N,EAAGgC,EAAKhC,IAAIgC,KAAUjH,KAAK8S,QAAQA,EAAS,OAAF,wBAAMA,GAAO,CAAE7N,EAAGuU,EAAGvU,EAAI6N,EAAQpF,IAAIzG,KACpHA,EAAKqM,UAAarM,EAAKqM,WAAakG,EAAGvU,EAAIgC,EAAKhC,EAChDkV,EAAQna,KAAKqa,SAASpT,EAAM,OAAF,sCAAMuS,GAAE,CAAEvU,EAAG6N,EAAQ7N,EAAI6N,EAAQpF,IAAMuM,IAC7DnH,EAAQsH,QAAUD,EACpB,EAAAjW,MAAMgJ,QAAQsM,EAAIvS,IACR6L,EAAQsH,QAAUD,GAASR,EAAIO,OAEzCla,KAAKqZ,aACLG,EAAGvU,EAAI6N,EAAQ7N,EAAI6N,EAAQpF,EAC3B,EAAAxJ,MAAMgJ,QAAQjG,EAAMuS,IAEtBQ,EAAUA,GAAWG,GAGrBA,EAAQna,KAAKqa,SAASvH,EAAS,OAAF,sCAAMA,GAAO,CAAE7N,EAAGuU,EAAGvU,EAAIuU,EAAG9L,EAAGjK,KAAMwD,IAASgT,KAExEE,EAAS,OAAOH,EACrBlH,OAAU9G,C,CAEZ,OAAOgO,CACT,CAGOlH,QAAQrP,EAAqBsW,EAAOtW,EAAM6W,GAC/C,OAAOta,KAAKgP,MAAMxL,MAAKgK,GAAKA,IAAM/J,GAAQ+J,IAAM8M,GAAS,EAAApW,MAAMqW,cAAc/M,EAAGuM,IAClF,CACOS,WAAW/W,EAAqBsW,EAAOtW,EAAM6W,GAClD,OAAOta,KAAKgP,MAAMnD,QAAO2B,GAAKA,IAAM/J,GAAQ+J,IAAM8M,GAAS,EAAApW,MAAMqW,cAAc/M,EAAGuM,IACpF,CAGUU,yBAAyBxT,EAAqByT,EAAsBC,GAC5E,IAAKD,EAAEtH,OAASnM,EAAK2T,MAAO,OAC5B,IAiBI9H,EAjBA+H,EAAK5T,EAAK2T,MACVE,EAAI,OAAH,UAAOJ,EAAEtH,MAwCd,OArCI0H,EAAE7V,EAAI4V,EAAG5V,GACX6V,EAAEpN,GAAKoN,EAAE7V,EAAI4V,EAAG5V,EAChB6V,EAAE7V,EAAI4V,EAAG5V,GAET6V,EAAEpN,GAAKmN,EAAG5V,EAAI6V,EAAE7V,EAEd6V,EAAE9V,EAAI6V,EAAG7V,GACX8V,EAAErN,GAAKqN,EAAE9V,EAAI6V,EAAG7V,EAChB8V,EAAE9V,EAAI6V,EAAG7V,GAET8V,EAAErN,GAAKoN,EAAG7V,EAAI8V,EAAE9V,EAIlB2V,EAAS7X,SAAQ0K,IACf,GAAIA,EAAE4M,SAAW5M,EAAEoN,MAAO,OAC1B,IAAIG,EAAKvN,EAAEoN,MACPI,EAAQrW,OAAOsW,UAAWC,EAAQvW,OAAOsW,UAAWE,EAAU,GAG9DN,EAAG5V,EAAI8V,EAAG9V,EACZ+V,GAAUF,EAAE7V,EAAI6V,EAAEpN,EAAKqN,EAAG9V,GAAK8V,EAAGrN,EACzBmN,EAAG5V,EAAE4V,EAAGnN,EAAIqN,EAAG9V,EAAE8V,EAAGrN,IAC7BsN,GAAUD,EAAG9V,EAAI8V,EAAGrN,EAAKoN,EAAE7V,GAAK8V,EAAGrN,GAEjCmN,EAAG7V,EAAI+V,EAAG/V,EACZkW,GAAUJ,EAAE9V,EAAI8V,EAAErN,EAAKsN,EAAG/V,GAAK+V,EAAGtN,EACzBoN,EAAG7V,EAAE6V,EAAGpN,EAAIsN,EAAG/V,EAAE+V,EAAGtN,IAC7ByN,GAAUH,EAAG/V,EAAI+V,EAAGtN,EAAKqN,EAAE9V,GAAK+V,EAAGtN,GAErC,IAAIvE,EAAOpE,KAAK4N,IAAIwI,EAAOF,GACvB9R,EAAOiS,IACTA,EAAUjS,EACV4J,EAAUtF,E,IAGdkN,EAAE5H,QAAUA,EACLA,CACT,CAoBOpB,WAAWjE,EAAWC,EAAWnG,EAAa6T,EAAeC,EAAgBjU,GAUlF,OARApH,KAAKgP,MAAMlM,SAAQ0K,GACjBA,EAAEoN,MAAQ,CACR3V,EAAGuI,EAAEvI,EAAIyI,EAAInG,EACbvC,EAAGwI,EAAExI,EAAIyI,EAAIrG,EACbqG,EAAGD,EAAEC,EAAIA,EAAIrG,EAAOgU,EACpB1N,EAAGF,EAAEE,EAAIA,EAAInG,EAAM8T,KAGhBrb,IACT,CAGO8Z,KAAKwB,EAAkBC,GAC5B,IAAKA,GAAKA,EAAEnB,SAAWkB,GAAKA,EAAElB,OAAQ,OAAO,EAE7C,SAASoB,IACP,IAAIxW,EAAIuW,EAAEvW,EAAGC,EAAIsW,EAAEtW,EAUnB,OATAsW,EAAEvW,EAAIsW,EAAEtW,EAAGuW,EAAEtW,EAAIqW,EAAErW,EACfqW,EAAE5N,GAAK6N,EAAE7N,GACX4N,EAAEtW,EAAIA,EAAGsW,EAAErW,EAAIsW,EAAEtW,EAAIsW,EAAE7N,GACd4N,EAAE7N,GAAK8N,EAAE9N,GAClB6N,EAAEtW,EAAIuW,EAAEvW,EAAIuW,EAAE9N,EAAG6N,EAAErW,EAAIA,IAEvBqW,EAAEtW,EAAIA,EAAGsW,EAAErW,EAAIA,GAEjBqW,EAAEG,OAASF,EAAEE,QAAS,GACf,CACT,CACA,IAAIC,EAGJ,GAAIJ,EAAE7N,IAAM8N,EAAE9N,GAAK6N,EAAE5N,IAAM6N,EAAE7N,IAAM4N,EAAEtW,IAAMuW,EAAEvW,GAAKsW,EAAErW,IAAMsW,EAAEtW,KAAOyW,EAAW,EAAAxX,MAAMyX,WAAWL,EAAGC,IAChG,OAAOC,IACT,IAAiB,IAAbE,EAAJ,CAGA,GAAIJ,EAAE7N,IAAM8N,EAAE9N,GAAK6N,EAAEtW,IAAMuW,EAAEvW,IAAM0W,IAAaA,EAAW,EAAAxX,MAAMyX,WAAWL,EAAGC,KAAM,CACnF,GAAIA,EAAEtW,EAAIqW,EAAErW,EAAG,CAAE,IAAI2W,EAAIN,EAAGA,EAAIC,EAAGA,EAAIK,C,CACvC,OAAOJ,G,CAET,IAAiB,IAAbE,EAAJ,CAGA,GAAIJ,EAAE5N,IAAM6N,EAAE7N,GAAK4N,EAAErW,IAAMsW,EAAEtW,IAAMyW,IAAaA,EAAW,EAAAxX,MAAMyX,WAAWL,EAAGC,KAAM,CACnF,GAAIA,EAAEvW,EAAIsW,EAAEtW,EAAG,CAAE,IAAI4W,EAAIN,EAAGA,EAAIC,EAAGA,EAAIK,C,CACvC,OAAOJ,G,CAET,OAAO,CAPuB,CAPA,CAehC,CAEOK,YAAY7W,EAAWC,EAAWwI,EAAWC,GAClD,IAAI8L,EAAoB,CAACxU,EAAGA,GAAK,EAAGC,EAAGA,GAAK,EAAGwI,EAAGA,GAAK,EAAGC,EAAGA,GAAK,GAClE,OAAQ1N,KAAK8S,QAAQ0G,EACvB,CAGOsC,UACL,GAA0B,IAAtB9b,KAAKgP,MAAMtD,OAAc,OAAO1L,KACpCA,KAAKgZ,cACFY,YACH,IAAImC,EAAY/b,KAAKgP,MASrB,OARAhP,KAAKgP,MAAQ,GACb+M,EAAUjZ,SAAQmE,IACXA,EAAKmT,SACRnT,EAAK4F,cAAe,GAEtB7M,KAAKoR,QAAQnK,GAAM,GACnBA,EAAKwU,QAAS,CAAI,IAEbzb,KAAKgZ,aAAY,EAC1B,CAGWF,UAAMrF,GACXzT,KAAK6Y,SAAWpF,IACpBzT,KAAK6Y,OAASpF,IAAO,EAChBA,GACHzT,KAAKqZ,aAAaC,UAEtB,CAGWR,YAAmB,OAAO9Y,KAAK6Y,SAAU,CAAO,CAGpDe,UAAU1F,GAEf,OADAlU,KAAKgP,MAAQ,EAAA9K,MAAM8X,KAAKhc,KAAKgP,MAAOkF,EAAKlU,KAAK4Y,QACvC5Y,IACT,CAGUqZ,aACR,OAAIrZ,KAAKkZ,YACTlZ,KAAK4Z,YAED5Z,KAAK8Y,MAEP9Y,KAAKgP,MAAMlM,SAAQ0K,IACjB,GAAIA,EAAEyO,gBAAyBjQ,IAAZwB,EAAE0D,OAAuB1D,EAAEvI,IAAMuI,EAAE0D,MAAMjM,EAAG,OAC/D,IAAIiX,EAAO1O,EAAEvI,EACb,KAAOiX,EAAO1O,EAAE0D,MAAMjM,KAClBiX,EACYlc,KAAK8S,QAAQtF,EAAG,CAACxI,EAAGwI,EAAExI,EAAGC,EAAGiX,EAAMzO,EAAGD,EAAEC,EAAGC,EAAGF,EAAEE,MAE3DF,EAAEiO,QAAS,EACXjO,EAAEvI,EAAIiX,E,IAMZlc,KAAKgP,MAAMlM,SAAQ,CAAC0K,EAAG8I,KACrB,IAAI9I,EAAE4M,OACN,KAAO5M,EAAEvI,EAAI,GAAG,CACd,IAAIiX,EAAa,IAAN5F,EAAU,EAAI9I,EAAEvI,EAAI,EAE/B,GADuB,IAANqR,GAAYtW,KAAK8S,QAAQtF,EAAG,CAACxI,EAAGwI,EAAExI,EAAGC,EAAGiX,EAAMzO,EAAGD,EAAEC,EAAGC,EAAGF,EAAEE,IAC3D,MAIjBF,EAAEiO,OAAUjO,EAAEvI,IAAMiX,EACpB1O,EAAEvI,EAAIiX,C,MA7BiBlc,IAkC/B,CAOOmc,YAAYlV,EAAqBiL,IACtCjL,EAAOA,GAAQ,CAAC,GACXmV,IAAMnV,EAAKmV,KAAOzD,EAAgB0D,cAGxBrQ,IAAX/E,EAAKjC,QAA8BgH,IAAX/E,EAAKhC,GAA8B,OAAXgC,EAAKjC,GAAyB,OAAXiC,EAAKhC,IAC1EgC,EAAK4F,cAAe,GAItB,IAAIyP,EAA0B,CAAEtX,EAAG,EAAGC,EAAG,EAAGwI,EAAG,EAAGC,EAAG,GAiBrD,OAhBA,EAAAxJ,MAAMoY,SAASrV,EAAMqV,GAEhBrV,EAAK4F,qBAAuB5F,EAAK4F,aACjC5F,EAAKwJ,iBAAmBxJ,EAAKwJ,SAC7BxJ,EAAKsJ,eAAiBtJ,EAAKsJ,OAGX,iBAAVtJ,EAAKjC,IAAsBiC,EAAKjC,EAAIL,OAAOsC,EAAKjC,IACtC,iBAAViC,EAAKhC,IAAsBgC,EAAKhC,EAAIN,OAAOsC,EAAKhC,IACtC,iBAAVgC,EAAKwG,IAAkBxG,EAAKwG,EAAI9I,OAAOsC,EAAKwG,IAClC,iBAAVxG,EAAKyG,IAAiBzG,EAAKyG,EAAI/I,OAAOsC,EAAKyG,IAClD6O,MAAMtV,EAAKjC,KAAWiC,EAAKjC,EAAIsX,EAAStX,EAAGiC,EAAK4F,cAAe,GAC/D0P,MAAMtV,EAAKhC,KAAWgC,EAAKhC,EAAIqX,EAASrX,EAAGgC,EAAK4F,cAAe,GAC/D0P,MAAMtV,EAAKwG,KAAOxG,EAAKwG,EAAI6O,EAAS7O,GACpC8O,MAAMtV,EAAKyG,KAAMzG,EAAKyG,EAAI4O,EAAS5O,GAEhC1N,KAAK+M,aAAa9F,EAAMiL,EACjC,CAGOnF,aAAa9F,EAAqBiL,GAEvC,IAAIsK,EAASvV,EAAKiK,OAAS,EAAAhN,MAAMgJ,QAAQ,CAAC,EAAGjG,GAW7C,GATIA,EAAK8K,OAAQ9K,EAAKwG,EAAI3I,KAAK4N,IAAIzL,EAAKwG,EAAGxG,EAAK8K,OAC5C9K,EAAK+K,OAAQ/K,EAAKyG,EAAI5I,KAAK4N,IAAIzL,EAAKyG,EAAGzG,EAAK+K,OAC5C/K,EAAK0G,MAAQ1G,EAAK0G,MAAQ3N,KAAK4Y,SAAU3R,EAAKwG,EAAI3I,KAAK6H,IAAI1F,EAAKwG,EAAGxG,EAAK0G,OACxE1G,EAAK2G,OAAQ3G,EAAKyG,EAAI5I,KAAK6H,IAAI1F,EAAKyG,EAAGzG,EAAK2G,QAKf,IAAhB5N,KAAK4Y,QAAgB3R,EAAKjC,EAAIiC,EAAKwG,EAAIzN,KAAK4Y,SAC7C5Y,KAAK4Y,OAAS,KAAO5Y,KAAKyc,kBAAoBxV,EAAK4F,cAAgB5F,EAAKmV,MAA2C,IAApCpc,KAAK0c,gBAAgBzV,EAAM,IAAY,CACpI,IAAI0V,EAAO,OAAH,UAAO1V,GACf0V,EAAK3X,EAAIF,KAAK4N,IAAI,GAAIiK,EAAK3X,GAC3B2X,EAAKlP,EAAI3I,KAAK4N,IAAI,GAAIiK,EAAKlP,GAC3BzN,KAAK4c,eAAeD,EAAM,G,CAyC5B,OAtCI1V,EAAKwG,EAAIzN,KAAK4Y,OAChB3R,EAAKwG,EAAIzN,KAAK4Y,OACL3R,EAAKwG,EAAI,IAClBxG,EAAKwG,EAAI,GAGPzN,KAAKuN,QAAUtG,EAAKyG,EAAI1N,KAAKuN,OAC/BtG,EAAKyG,EAAI1N,KAAKuN,OACLtG,EAAKyG,EAAI,IAClBzG,EAAKyG,EAAI,GAGPzG,EAAKjC,EAAI,IACXiC,EAAKjC,EAAI,GAEPiC,EAAKhC,EAAI,IACXgC,EAAKhC,EAAI,GAGPgC,EAAKjC,EAAIiC,EAAKwG,EAAIzN,KAAK4Y,SACrB1G,EACFjL,EAAKwG,EAAIzN,KAAK4Y,OAAS3R,EAAKjC,EAE5BiC,EAAKjC,EAAIhF,KAAK4Y,OAAS3R,EAAKwG,GAG5BzN,KAAKuN,QAAUtG,EAAKhC,EAAIgC,EAAKyG,EAAI1N,KAAKuN,SACpC2E,EACFjL,EAAKyG,EAAI1N,KAAKuN,OAAStG,EAAKhC,EAE5BgC,EAAKhC,EAAIjF,KAAKuN,OAAStG,EAAKyG,GAI3B,EAAAxJ,MAAM2Y,QAAQ5V,EAAMuV,KACvBvV,EAAKwU,QAAS,GAGTxU,CACT,CAGO6V,cAAcC,GAEnB,OAAIA,EACK/c,KAAKgP,MAAMnD,QAAO2B,GAAKA,EAAEiO,SAAW,EAAAvX,MAAM2Y,QAAQrP,EAAGA,EAAE0D,SAEzDlR,KAAKgP,MAAMnD,QAAO2B,GAAKA,EAAEiO,QAClC,CAGUnC,QAAQ1K,GAChB,GAAI5O,KAAKkZ,YAAclZ,KAAK+Y,SAAU,OAAO/Y,KAC7C,IAAIgd,GAAcpO,GAAgB,IAAIqO,OAAOjd,KAAK8c,iBAElD,OADA9c,KAAK+Y,SAASiE,GACPhd,IACT,CAGOsR,aACL,OAAItR,KAAKkZ,WACTlZ,KAAKgP,MAAMlM,SAAQ0K,WACVA,EAAEiO,cACFjO,EAAEwD,UAAU,IAHMhR,IAM7B,CAKOoZ,cAML,OALApZ,KAAKgP,MAAMlM,SAAQ0K,IACjBA,EAAE0D,MAAQ,EAAAhN,MAAMgJ,QAAQ,CAAC,EAAGM,UACrBA,EAAEiO,MAAM,IAEjBzb,KAAKyZ,WAAazZ,KAAKgP,MAAMkO,MAAK1P,GAAKA,EAAE4M,SAClCpa,IACT,CAGOiS,iBAOL,OANAjS,KAAKgP,MAAMlM,SAAQ0K,IACb,EAAAtJ,MAAM2Y,QAAQrP,EAAGA,EAAE0D,SACvB,EAAAhN,MAAMgJ,QAAQM,EAAGA,EAAE0D,OACnB1D,EAAEiO,QAAS,EAAI,IAEjBzb,KAAKsZ,UACEtZ,IACT,CAGOmd,kBAAkBlW,GACvBjH,KAAK4Z,YACL,IAAIwD,GAAQ,EACZ,IAAK,IAAI9G,EAAI,GAAI8G,IAAS9G,EAAG,CAC3B,IAAItR,EAAIsR,EAAItW,KAAK4Y,OACb3T,EAAIH,KAAKuY,MAAM/G,EAAItW,KAAK4Y,QAC5B,GAAI5T,EAAIiC,EAAKwG,EAAIzN,KAAK4Y,OACpB,SAEF,IAAI0E,EAAM,CAACtY,IAAGC,IAAGwI,EAAGxG,EAAKwG,EAAGC,EAAGzG,EAAKyG,GAC/B1N,KAAKgP,MAAMxL,MAAKgK,GAAK,EAAAtJ,MAAMqW,cAAc+C,EAAK9P,OACjDvG,EAAKjC,EAAIA,EACTiC,EAAKhC,EAAIA,EACTmY,GAAQ,E,CAGZ,OAAOA,CACT,CAGOhM,QAAQnK,EAAqBsW,GAAkB,GAEpD,OADUvd,KAAKgP,MAAMxL,MAAKgK,GAAKA,EAAE4O,MAAQnV,EAAKmV,eAI9CnV,EAAOjH,KAAKyc,gBAAkBzc,KAAK+M,aAAa9F,GAAQjH,KAAKmc,YAAYlV,IAC7DyF,yBACLzF,EAAKuW,WAERvW,EAAK4F,cAAgB7M,KAAKmd,kBAAkBlW,WACvCA,EAAK4F,aAGd7M,KAAKgP,MAAMH,KAAK5H,GACZsW,GAAmBvd,KAAK0P,WAAWb,KAAK5H,GAE5CjH,KAAK0Z,eAAezS,GACfjH,KAAKkZ,WAAalZ,KAAKqZ,aAAaC,UAClCrS,EACT,CAEO+I,WAAW/I,EAAqBwW,GAAY,EAAMhd,GAAe,GACtE,OAAKT,KAAKgP,MAAMxL,MAAKgK,GAAKA,IAAMvG,KAI5BxG,GACFT,KAAK4O,aAAaC,KAAK5H,GAErBwW,IAAWxW,EAAKuW,YAAa,GAEjCxd,KAAKgP,MAAQhP,KAAKgP,MAAMnD,QAAO2B,GAAKA,IAAMvG,IACnCjH,KAAKqZ,aACTC,QAAQ,CAACrS,KATHjH,IAUX,CAEO0d,UAAUD,GAAY,GAE3B,cADOzd,KAAK2d,SACc,IAAtB3d,KAAKgP,MAAMtD,OAAqB1L,MACpCyd,GAAazd,KAAKgP,MAAMlM,SAAQ0K,GAAKA,EAAEgQ,YAAa,IACpDxd,KAAK4O,aAAe5O,KAAKgP,MACzBhP,KAAKgP,MAAQ,GACNhP,KAAKsZ,QAAQtZ,KAAK4O,cAC3B,CAKOyE,cAAcpM,EAAqByT,GAExC,IAAK1a,KAAK4d,oBAAoB3W,EAAMyT,GAAI,OAAO,EAI/C,GAHAA,EAAER,MAAO,GAGJla,KAAKuN,OACR,OAAOvN,KAAKqa,SAASpT,EAAMyT,GAI7B,IAAImD,EACAC,EAAQ,IAAInF,EAAgB,CAC9BC,OAAQ5Y,KAAK4Y,OACbE,MAAO9Y,KAAK8Y,MACZ9J,MAAOhP,KAAKgP,MAAMtI,KAAI8G,GAChBA,IAAMvG,GACR4W,EAAa,OAAH,UAAOrQ,GACVqQ,GAEF,OAAP,UAAWrQ,OAGf,IAAKqQ,EAAY,OAAO,EAGxB,IAAIE,EAAUD,EAAMzD,SAASwD,EAAYnD,IAAMoD,EAAM9K,UAAYhT,KAAKuN,OAEtE,IAAKwQ,IAAYrD,EAAExI,UAAYwI,EAAE5H,QAAS,CACxC,IAAIA,EAAU4H,EAAE5H,QAAQhS,GAAGqE,cAC3B,GAAInF,KAAK8Z,KAAK7S,EAAM6L,GAElB,OADA9S,KAAKsZ,WACE,C,CAGX,QAAKyE,IAILD,EAAM9O,MAAMnD,QAAO2B,GAAKA,EAAEiO,SAAQ3Y,SAAQkb,IACxC,IAAIxQ,EAAIxN,KAAKgP,MAAMxL,MAAK8X,GAAKA,EAAEc,MAAQ4B,EAAE5B,MACpC5O,IACL,EAAAtJ,MAAMgJ,QAAQM,EAAGwQ,GACjBxQ,EAAEiO,QAAS,EAAI,IAEjBzb,KAAKsZ,WACE,EACT,CAGOtM,UAAU/F,GAEf,UADOA,EAAKgG,aACPjN,KAAKuN,OAAQ,OAAO,EAEzB,IAAIuQ,EAAQ,IAAInF,EAAgB,CAC9BC,OAAQ5Y,KAAK4Y,OACbE,MAAO9Y,KAAK8Y,MACZ9J,MAAOhP,KAAKgP,MAAMtI,KAAI8G,GAAa,OAAP,UAAWA,OAErCA,EAAI,OAAH,UAAOvG,GAIZ,OAHAjH,KAAKoO,YAAYZ,UACVA,EAAE1M,UAAW0M,EAAE4O,WAAY5O,EAAEyQ,eAAgBzQ,EAAEtI,KACtD4Y,EAAM1M,QAAQ5D,GACVsQ,EAAM9K,UAAYhT,KAAKuN,SACzBtG,EAAKgG,YAAc,EAAA/I,MAAMgJ,QAAQ,CAAC,EAAGM,IAC9B,EAGX,CAGOoQ,oBAAoB3W,EAAqBkL,GAI9C,OAFAA,EAAE1E,EAAI0E,EAAE1E,GAAKxG,EAAKwG,EAClB0E,EAAEzE,EAAIyE,EAAEzE,GAAKzG,EAAKyG,EACdzG,EAAKjC,IAAMmN,EAAEnN,GAAKiC,EAAKhC,IAAMkN,EAAElN,IAE/BgC,EAAK8K,OAAQI,EAAE1E,EAAI3I,KAAK4N,IAAIP,EAAE1E,EAAGxG,EAAK8K,OACtC9K,EAAK+K,OAAQG,EAAEzE,EAAI5I,KAAK4N,IAAIP,EAAEzE,EAAGzG,EAAK+K,OACtC/K,EAAK0G,OAAQwE,EAAE1E,EAAI3I,KAAK6H,IAAIwF,EAAE1E,EAAGxG,EAAK0G,OACtC1G,EAAK2G,OAAQuE,EAAEzE,EAAI5I,KAAK6H,IAAIwF,EAAEzE,EAAGzG,EAAK2G,OAClC3G,EAAKwG,IAAM0E,EAAE1E,GAAKxG,EAAKyG,IAAMyE,EAAEzE,EACzC,CAGO2M,SAASpT,EAAqByT,G,QACnC,IAAKzT,IAA4ByT,EAAG,OAAO,EAC3C,IAAIwD,OACWlS,IAAX0O,EAAER,OACJgE,EAAmBxD,EAAER,MAAO,GAIX,iBAARQ,EAAE1V,IAAkB0V,EAAE1V,EAAIiC,EAAKjC,GACvB,iBAAR0V,EAAEzV,IAAkByV,EAAEzV,EAAIgC,EAAKhC,GACvB,iBAARyV,EAAEjN,IAAkBiN,EAAEjN,EAAIxG,EAAKwG,GACvB,iBAARiN,EAAEhN,IAAkBgN,EAAEhN,EAAIzG,EAAKyG,GAC1C,IAAIwE,EAAYjL,EAAKwG,IAAMiN,EAAEjN,GAAKxG,EAAKyG,IAAMgN,EAAEhN,EAC3C8L,EAAoB,EAAAtV,MAAMgJ,QAAQ,CAAC,EAAGjG,GAAM,GAKhD,GAJA,EAAA/C,MAAMgJ,QAAQsM,EAAIkB,GAClBlB,EAAKxZ,KAAK+M,aAAayM,EAAItH,GAC3B,EAAAhO,MAAMgJ,QAAQwN,EAAGlB,GAEb,EAAAtV,MAAM2Y,QAAQ5V,EAAMyT,GAAI,OAAO,EACnC,IAAIyD,EAA6B,EAAAja,MAAMgJ,QAAQ,CAAC,EAAGjG,GAG/C0T,EAAW3a,KAAKwa,WAAWvT,EAAMuS,EAAIkB,EAAEjX,MACvC2a,GAAa,EACjB,GAAIzD,EAASjP,OAAQ,CACnB,IAAI2S,EAAapX,EAAK6J,UAAY4J,EAAEb,OAEhC/G,EAAUuL,EAAare,KAAKya,yBAAyBxT,EAAMyT,EAAGC,GAAYA,EAAS,GAEvF,GAAI0D,GAAcvL,IAA0B,QAAnB,EAAa,QAAb,EAAI7L,EAAK/B,YAAI,eAAEvC,YAAI,eAAEsM,kBAAmBhI,EAAK/B,KAAKoJ,QAAS,CAClF,IAAIpF,EAAO,EAAAhF,MAAMoa,cAAc5D,EAAEtH,KAAMN,EAAQ8H,OAC3C2D,EAAK,EAAAra,MAAM6V,KAAKW,EAAEtH,MAClBoL,EAAK,EAAAta,MAAM6V,KAAKjH,EAAQ8H,OACjB1R,GAAQqV,EAAKC,EAAKD,EAAKC,GACvB,KACT1L,EAAQ5N,KAAKuZ,YAAY3L,EAAQhS,QAAIkL,EAAW/E,GAChD6L,OAAU9G,E,CAIV8G,EACFsL,GAAcpe,KAAK0Z,eAAezS,EAAMuS,EAAI1G,EAAS4H,IAErD0D,GAAa,EACTF,UAAyBxD,EAAER,K,CAanC,OARIkE,IACFnX,EAAKwU,QAAS,EACd,EAAAvX,MAAMgJ,QAAQjG,EAAMuS,IAElBkB,EAAER,MACJla,KAAKqZ,aACFC,WAEG,EAAApV,MAAM2Y,QAAQ5V,EAAMkX,EAC9B,CAEOnL,SACL,OAAOhT,KAAKgP,MAAM0P,QAAO,CAAC3L,EAAKvF,IAAM1I,KAAK6H,IAAIoG,EAAKvF,EAAEvI,EAAIuI,EAAEE,IAAI,EACjE,CAEO6D,YAAYtK,GAMjB,OALKA,EAAKgV,YACRhV,EAAKgV,WAAY,SACVhV,EAAKqM,UACPtT,KAAKkZ,WAAWlZ,KAAKoZ,eAErBpZ,IACT,CAEO6P,YACL,IAAIrC,EAAIxN,KAAKgP,MAAMxL,MAAKgK,GAAKA,EAAEyO,YAK/B,OAJIzO,WACKA,EAAEyO,iBACFzO,EAAE8F,WAEJtT,IACT,CAIO2e,KAAKC,GAAc,G,MAExB,IAAIC,EAAmB,QAAhB,EAAG7e,KAAK2d,gBAAQ,eAAEjS,OACrBoT,EAASD,GAAO7e,KAAK4Y,SAAYiG,EAAM,EAAK7e,KAAK2d,SAASkB,EAAM,GAAK,KACrElT,EAAwB,GAU5B,OATA3L,KAAK4Z,YACL5Z,KAAKgP,MAAMlM,SAAQ0K,IACjB,IAAIuR,EAAKD,aAAM,EAANA,EAAQtb,MAAKwb,GAAKA,EAAE5C,MAAQ5O,EAAE4O,MACnC3O,EAAC,iBAAsBD,GAEvBuR,IAAMtR,EAAEzI,EAAI+Z,EAAG/Z,EAAGyI,EAAExI,EAAI8Z,EAAG9Z,EAAGwI,EAAEA,EAAIsR,EAAGtR,GAC3C,EAAAvJ,MAAM+a,sBAAsBxR,GAAImR,GAChCjT,EAAKkD,KAAKpB,EAAE,IAEP9B,CACT,CAGOuT,mBAAmBlQ,GACxB,OAAKhP,KAAK2d,UAAY3d,KAAKyc,iBAE3Bzc,KAAK2d,SAAS7a,SAAQ,CAACgc,EAAQlG,KAC7B,IAAKkG,GAAUlG,IAAW5Y,KAAK4Y,OAAQ,OAAO5Y,KAC9C,GAAI4Y,EAAS5Y,KAAK4Y,OAChB5Y,KAAK2d,SAAS/E,QAAU5M,MAErB,CAGH,IAAImT,EAAQvG,EAAS5Y,KAAK4Y,OAC1B5J,EAAMlM,SAAQmE,IACZ,IAAKA,EAAKiK,MAAO,OACjB,IAAI1D,EAAIsR,EAAOtb,MAAKwb,GAAKA,EAAE5C,MAAQnV,EAAKmV,MACnC5O,IAGDvG,EAAKhC,IAAMgC,EAAKiK,MAAMjM,IACxBuI,EAAEvI,GAAMgC,EAAKhC,EAAIgC,EAAKiK,MAAMjM,GAG1BgC,EAAKjC,IAAMiC,EAAKiK,MAAMlM,IACxBwI,EAAExI,EAAIF,KAAK8H,MAAM3F,EAAKjC,EAAIma,IAGxBlY,EAAKwG,IAAMxG,EAAKiK,MAAMzD,IACxBD,EAAEC,EAAI3I,KAAK8H,MAAM3F,EAAKwG,EAAI0R,I,QA1BiBnf,IAiCrD,CAaOof,iBAAiBC,EAAoBzG,EAAgB5J,EAAwB8P,EAAwB,a,MAC1G,IAAK9e,KAAKgP,MAAMtD,SAAWkN,GAAUyG,IAAezG,EAAQ,OAAO5Y,KAGnEA,KAAKsf,YAAYtf,KAAKgP,MAAOqQ,GAC7Brf,KAAKgZ,cACL,IAAIuG,EAA4B,GAG5BC,GAAW,EACf,GAAe,IAAX5G,IAAgB5J,aAAK,EAALA,EAAOtD,QAAQ,CACjC8T,GAAW,EACX,IAAIjY,EAAM,EACVyH,EAAMlM,SAAQ0K,IACZA,EAAExI,EAAI,EACNwI,EAAEC,EAAI,EACND,EAAEvI,EAAIH,KAAK6H,IAAIa,EAAEvI,EAAGsC,GACpBA,EAAMiG,EAAEvI,EAAIuI,EAAEE,CAAC,IAEjB6R,EAAWvQ,EACXA,EAAQ,E,MAERA,EAAQ,EAAA9K,MAAM8X,KAAKhc,KAAKgP,OAAQ,EAAGqQ,GAKrC,IAAII,EAA8B,GAClC,GAAI7G,EAASyG,EAAY,CACvBI,EAAazf,KAAK2d,SAAS/E,IAAW,GAGtC,IAAI8G,EAAY1f,KAAK2d,SAASjS,OAAS,GAClC+T,EAAW/T,QAAU2T,IAAeK,IAAqC,QAA5B,EAAI1f,KAAK2d,SAAS+B,UAAU,eAAEhU,UAC9E2T,EAAaK,EACb1f,KAAK2d,SAAS+B,GAAW5c,SAAQ6c,IAC/B,IAAInS,EAAIwB,EAAMxL,MAAKgK,GAAKA,EAAE4O,MAAQuD,EAAUvD,MACxC5O,IAEFA,EAAExI,EAAI2a,EAAU3a,EAChBwI,EAAEvI,EAAI0a,EAAU1a,EAChBuI,EAAEC,EAAIkS,EAAUlS,E,KAmBxB,GAZAgS,EAAW3c,SAAQ6c,IACjB,IAAIC,EAAI5Q,EAAM6Q,WAAUrS,GAAKA,EAAE4O,MAAQuD,EAAUvD,OACtC,IAAPwD,IAEF5Q,EAAM4Q,GAAG5a,EAAI2a,EAAU3a,EACvBgK,EAAM4Q,GAAG3a,EAAI0a,EAAU1a,EACvB+J,EAAM4Q,GAAGnS,EAAIkS,EAAUlS,EACvB8R,EAAS1Q,KAAKG,EAAM4Q,IACpB5Q,EAAM8Q,OAAOF,EAAG,G,IAIhB5Q,EAAMtD,OACR,GAAsB,mBAAXoT,EACTA,EAAOlG,EAAQyG,EAAYE,EAAUvQ,QAChC,IAAKwQ,EAAU,CACpB,IAAIL,EAAQvG,EAASyG,EACjB5J,EAAmB,SAAXqJ,GAAgC,cAAXA,EAC7BiB,EAAoB,UAAXjB,GAAiC,cAAXA,EACnC9P,EAAMlM,SAAQmE,IAEZA,EAAKjC,EAAgB,IAAX4T,EAAe,EAAKnD,EAAO3Q,KAAK8H,MAAM3F,EAAKjC,EAAIma,GAASra,KAAK4N,IAAIzL,EAAKjC,EAAG4T,EAAS,GAC5F3R,EAAKwG,EAAiB,IAAXmL,GAA+B,IAAfyG,EAAoB,EAC7CU,EAASjb,KAAK8H,MAAM3F,EAAKwG,EAAI0R,IAAU,EAAMra,KAAK4N,IAAIzL,EAAKwG,EAAGmL,GAChE2G,EAAS1Q,KAAK5H,EAAK,IAErB+H,EAAQ,E,CAcZ,OATKwQ,IAAUD,EAAW,EAAArb,MAAM8X,KAAKuD,GAAW,EAAG3G,IACnD5Y,KAAKyc,iBAAkB,EACvBzc,KAAKgP,MAAQ,GACbuQ,EAASzc,SAAQmE,IACfjH,KAAKoR,QAAQnK,GAAM,UACZA,EAAKiK,KAAK,IAEnBlR,KAAKgZ,aAAY,UACVhZ,KAAKyc,gBACLzc,IACT,CAQOsf,YAAYtQ,EAAwB4J,EAAgBoH,GAAQ,GACjE,IAAIrD,EAAwB,GAO5B,OANA3N,EAAMlM,SAAQ,CAAC0K,EAAG8I,KAChB9I,EAAE4O,IAAM5O,EAAE4O,KAAOzD,EAAgB0D,SACjCM,EAAKrG,GAAK,CAACtR,EAAGwI,EAAExI,EAAGC,EAAGuI,EAAEvI,EAAGwI,EAAGD,EAAEC,EAAG2O,IAAK5O,EAAE4O,IAAI,IAEhDpc,KAAK2d,SAAWqC,EAAQ,GAAKhgB,KAAK2d,UAAY,GAC9C3d,KAAK2d,SAAS/E,GAAU+D,EACjB3c,IACT,CAOO4c,eAAepP,EAAkBoL,GACtCpL,EAAE4O,IAAM5O,EAAE4O,KAAOzD,EAAgB0D,SACjC,IAAIyC,EAAwB,CAAC9Z,EAAGwI,EAAExI,EAAGC,EAAGuI,EAAEvI,EAAGwI,EAAGD,EAAEC,EAAG2O,IAAK5O,EAAE4O,KAC5Dpc,KAAK2d,SAAW3d,KAAK2d,UAAY,GACjC3d,KAAK2d,SAAS/E,GAAU5Y,KAAK2d,SAAS/E,IAAW,GACjD,IAAIqH,EAAQjgB,KAAK0c,gBAAgBlP,EAAGoL,GAKpC,OAJe,IAAXqH,EACFjgB,KAAK2d,SAAS/E,GAAQ/J,KAAKiQ,GAE3B9e,KAAK2d,SAAS/E,GAAQqH,GAASnB,EAC1B9e,IACT,CAEU0c,gBAAgBlP,EAAkBoL,G,UAC1C,OAA8D,QAA9D,EAA6B,QAA7B,EAAoB,QAApB,EAAO5Y,KAAK2d,gBAAQ,eAAG/E,UAAM,eAAGiH,WAAUb,GAAKA,EAAE5C,MAAQ5O,EAAE4O,aAAG,SAAM,CACtE,CAIOhO,YAAYnH,GACjB,IAAK,IAAIN,KAAQM,EACC,MAAZN,EAAK,IAAuB,QAATA,UAAuBM,EAAKN,GAErD,OAAO3G,IACT,EA13BF,oBAoBgB,EAAAqc,OAAS,C,6YCvCzB,cACA,SACA,SAIA,YACA,YACA,WAsCA,MAAapQ,EAkKX,YAAmBnL,EAAqB6B,EAAyB,CAAC,G,QArB3D,KAAAmN,gBAAkB,CAAC,EAYhB,KAAAuB,cAAgB,EAUxBrR,KAAKc,GAAKA,GACV6B,EAAOA,GAAQ,CAAC,GAGPoQ,MACPpQ,EAAKud,OAASvd,EAAK4K,OAAS5K,EAAKoQ,WAC1BpQ,EAAKoQ,KAEd,IAAIoN,EAAU,EAAAjc,MAAMkc,SAAStf,EAAG8J,aAAa,WAGzB,SAAhBjI,EAAKiW,eACAjW,EAAKiW,OAId,IAAIyH,EAAU1d,OACWqJ,IAArBqU,EAAQrJ,WACVrU,EAAK2d,cAAgB3d,EAAK2d,eAAiBD,EAAQrJ,gBAC5CqJ,EAAQrJ,eAGmBhL,IAAhCrJ,EAAKmI,yBACNnI,EAAa4d,wBAA0B5d,EAAKmI,wBAI/C,IAAIwR,EAAQ,+BAAyB,EAAApY,MAAMsc,UAAU,EAAAC,eAAa,CAChE7H,OAAQ,EAAA1U,MAAMkc,SAAStf,EAAG8J,aAAa,eAAiB,EAAA6V,aAAa7H,OACrEsH,OAAQC,GAAoB,EAAAjc,MAAMkc,SAAStf,EAAG8J,aAAa,gBAAkB,EAAA6V,aAAaP,OAC1F3S,OAAQ4S,GAAoB,EAAAjc,MAAMkc,SAAStf,EAAG8J,aAAa,gBAAkB,EAAA6V,aAAalT,OAC1FnB,WAAY,EAAAlI,MAAMwc,OAAO5f,EAAG8J,aAAa,eAAiB,EAAA6V,aAAarU,WACvE5C,UAAW,CACTtI,QAASyB,EAAKge,YAAc,IAAMhe,EAAKge,YAAehe,EAAKzB,OAASyB,EAAKzB,OAAS,KAAQ,EAAAuf,aAAajX,UAAUtI,QAEnHiP,iBAAkB,CAChB7G,OAAQ3G,EAAKie,UAAY,IAAMje,EAAKie,UAAY,EAAAH,aAAatQ,iBAAiB7G,UAG9ExI,EAAG8J,aAAa,gBAClB0R,EAASuE,QAAU,EAAA3c,MAAMwc,OAAO5f,EAAG8J,aAAa,gBAGlD5K,KAAK2C,KAAO,EAAAuB,MAAMoY,SAAS3Z,EAAM2Z,GACjC3Z,EAAO,KACP3C,KAAK8gB,cAGoB,IAArB9gB,KAAK2C,KAAKiW,SAAiB5Y,KAAK2C,KAAKoe,sBAAwB/gB,KAAKghB,qBAAuBhhB,KAAK2C,KAAK2d,gBACrGtgB,KAAKihB,YAAcjhB,KAAKkhB,YACxBlhB,KAAK2C,KAAKiW,OAAS,GAGC,SAAlB5Y,KAAK2C,KAAKwe,MACZnhB,KAAK2C,KAAKwe,IAA8B,QAAvBrgB,EAAGgF,MAAMkO,WAExBhU,KAAK2C,KAAKwe,KACZnhB,KAAKc,GAAGO,UAAUY,IAAI,kBAIxB,IAAI8M,EAAiG,QAA/E,IAAA7K,MAAMkd,iBAAiBphB,KAAKc,GAAI,EAAA2f,aAAaG,kBAAkC,eAAEzb,cACnG4J,IACFA,EAAeI,QAAUnP,KACzBA,KAAK+O,eAAiBA,EACtB/O,KAAKc,GAAGO,UAAUY,IAAI,qBACtB8M,EAAejO,GAAGO,UAAUY,IAAI,wBAGlCjC,KAAKqhB,kBAA8C,SAAzBrhB,KAAK2C,KAAK4J,WAChCvM,KAAKqhB,mBAA8C,YAAzBrhB,KAAK2C,KAAK4J,WAEtCvM,KAAKuM,gBAAWP,GAAW,IAGQ,iBAAxBhM,KAAK2C,KAAK4J,YAA0BvM,KAAK2C,KAAK2e,gBAAkBthB,KAAK2C,KAAK2e,iBAAmB,EAAAb,aAAaa,iBACnHthB,KAAK2C,KAAK4J,WAAavM,KAAK2C,KAAK4J,WAAavM,KAAK2C,KAAK2e,sBACjDthB,KAAK2C,KAAK2e,gBAEnBthB,KAAKuM,WAAWvM,KAAK2C,KAAK4J,YAAY,IAIC,WAArCvM,KAAK2C,KAAKmI,yBACZ9K,KAAK2C,KAAKmI,uBAAyB,EAAAjJ,SAGrC7B,KAAKuhB,iBAAmB,uBAAyB,EAAA5I,gBAAgB0D,SACjErc,KAAKc,GAAGO,UAAUY,IAAIjC,KAAKuhB,kBAE3BvhB,KAAKwhB,kBAEL,IAAIC,EAAczhB,KAAK2C,KAAK8e,aAAexV,EAAUwV,aAAe,EAAA9I,gBAsBpE,GArBA3Y,KAAK8M,OAAS,IAAI2U,EAAY,CAC5B7I,OAAQ5Y,KAAKkhB,YACbpI,MAAO9Y,KAAK2C,KAAKmW,MACjBvL,OAAQvN,KAAK2C,KAAK4K,OAClBwL,SAAW2I,IACT,IAAI1P,EAAO,EACXhS,KAAK8M,OAAOkC,MAAMlM,SAAQ0K,IAAOwE,EAAOlN,KAAK6H,IAAIqF,EAAMxE,EAAEvI,EAAIuI,EAAEE,EAAE,IACjEgU,EAAQ5e,SAAQ0K,IACd,IAAI1M,EAAK0M,EAAE1M,GACNA,IACD0M,EAAEgQ,YACA1c,GAAIA,EAAGkB,gBACJwL,EAAEgQ,YAETxd,KAAKmR,cAAcrQ,EAAI0M,G,IAG3BxN,KAAKwP,eAAc,EAAOwC,EAAK,IAI/BhS,KAAK2C,KAAKsS,KAAM,CAClBjV,KAAKgZ,cACL,IAAI2I,EAA2C,GAC3C/I,EAAS5Y,KAAKkhB,YACH,IAAXtI,GAAgB5Y,KAAKihB,cAAarI,EAAS5Y,KAAKihB,aACpDjhB,KAAK4hB,eAAe9e,SAAQhC,IAC1B,IAAIkE,EAAI6c,SAAS/gB,EAAG8J,aAAa,SAC7B3F,EAAI4c,SAAS/gB,EAAG8J,aAAa,SACjC+W,EAAS9S,KAAK,CACZ/N,KAEAwV,GAAI3R,OAAO4X,MAAMvX,GAAK,IAAOA,IAAML,OAAO4X,MAAMtX,GAAK,IAAOA,GAAK2T,GACjE,IAEJ+I,EAAS3F,MAAK,CAACV,EAAGC,IAAMA,EAAEjF,EAAIgF,EAAEhF,IAAGxT,SAAQE,GAAKhD,KAAK8hB,gBAAgB9e,EAAElC,MACvEd,KAAKgZ,aAAY,E,CAGnBhZ,KAAK+hB,aAAa/hB,KAAK2C,KAAKke,SAE5B7gB,KAAKwP,gBACmB,IAApBxP,KAAK2C,KAAKiW,QACZ5Y,KAAKc,GAAGO,UAAUY,IAAI,cAAgBjC,KAAK2C,KAAKiW,QAI9C5Y,KAAK2C,KAAKqI,QAAQiB,EAAUmE,YAAYpQ,KAAK2C,KAAKqI,OAAQhL,KAAK2C,KAAK0N,sBACjErQ,KAAK2C,KAAKqI,cACVhL,KAAK2C,KAAK0N,cAGbrQ,KAAK2C,KAAKsM,iBAAmB,EAAAhM,UAAUwB,YAAW,EAAAxB,UAAUwB,WAAY,QACzCuH,KAAZ,QAAnB,EAAAhM,KAAK2C,KAAK6G,iBAAS,eAAE9E,SAAqB,EAAAzB,UAAUwB,UAAYzE,KAAK2C,KAAK6G,UAAU9E,OAExF1E,KAAKiQ,mBACLjQ,KAAKmM,qBACLnM,KAAKgiB,0BACP,CA3SOtY,YAAYuY,EAA4B,CAAC,EAAGC,EAA+B,eAChF,IAAIphB,EAAKmL,EAAUkW,eAAeD,GAClC,OAAKphB,GASAA,EAAGsO,YACNtO,EAAGsO,UAAY,IAAInD,EAAUnL,EAAI,EAAAoD,MAAMsc,UAAUyB,KAE5CnhB,EAAGsO,YAXkB,iBAAf8S,EACTE,QAAQC,MAAM,wDAA0DH,EAA1D,+IAGdE,QAAQC,MAAM,gDAET,KAMX,CAWO3Y,eAAeuY,EAA4B,CAAC,EAAG3U,EAAW,eAC/D,IAAIgV,EAAqB,GAYzB,OAXArW,EAAUsW,gBAAgBjV,GAAUxK,SAAQhC,IACrCA,EAAGsO,YACNtO,EAAGsO,UAAY,IAAInD,EAAUnL,EAAI,EAAAoD,MAAMsc,UAAUyB,WAC1CA,EAAQjX,cAAeiX,EAAQ5R,eAExCiS,EAAMzT,KAAK/N,EAAGsO,UAAU,IAEL,IAAjBkT,EAAM5W,QACR0W,QAAQC,MAAM,wDAA0D/U,EAA1D,+IAGTgV,CACT,CASO5Y,eAAe9B,EAAqB+R,EAAwB,CAAC,GAClE,IAAK/R,EAAQ,OAAO,KAGpB,IAAI9G,EAAK8G,EACT,IAAKA,EAAOvG,UAAUC,SAAS,cAAe,CAC5C,IAAIkhB,EAAM5e,SAAS6e,eAAeC,mBAAmB,IACrDF,EAAInc,KAAKsc,UAAY,0BAA0BhJ,EAAIiJ,OAAS,aAC5D9hB,EAAK0hB,EAAInc,KAAKwc,SAAS,GACvBjb,EAAOQ,YAAYtH,E,CAIrB,IAAIoE,EAAO+G,EAAUL,KAAK+N,EAAK7Y,GAC/B,GAAIoE,EAAKvC,KAAKkgB,SAAU,CACtB,IAAIA,EAAW3d,EAAKvC,KAAKkgB,gBAClB3d,EAAKvC,KAAKkgB,SACjB3d,EAAK4d,KAAKD,E,CAEZ,OAAO3d,CACT,CAMAwE,sBAAsB+X,GACpBxV,EAAUwV,YAAcA,CAC1B,CA6BWhT,kBACT,IAAKzO,KAAK+iB,aAAc,CACtB,IAAIC,EAAmBpf,SAASoE,cAAc,OAC9Cgb,EAAiB/hB,UAAY,sBACzBjB,KAAK2C,KAAKsgB,kBACZD,EAAiBL,UAAY3iB,KAAK2C,KAAKsgB,iBAEzCjjB,KAAK+iB,aAAenf,SAASoE,cAAc,OAC3ChI,KAAK+iB,aAAa1hB,UAAUY,IAAIjC,KAAK2C,KAAKugB,iBAAkB,EAAAzC,aAAaG,UAAW5gB,KAAK2C,KAAKie,WAC9F5gB,KAAKyO,YAAYrG,YAAY4a,E,CAE/B,OAAOhjB,KAAK+iB,YACd,CAsMOI,UAAU7X,EAA0C2W,GAKzD,IAAInhB,EACJ,GAAmB,iBAARwK,EAAkB,CAC3B,IAAIkX,EAAM5e,SAAS6e,eAAeC,mBAAmB,IACrDF,EAAInc,KAAKsc,UAAYrX,EACrBxK,EAAK0hB,EAAInc,KAAKwc,SAAS,E,MAClB,GAAyB,IAArBO,UAAU1X,QAAqC,IAArB0X,UAAU1X,cAR9BM,KADUyB,EASsDnC,GARtEtG,QAA2BgH,IAARyB,EAAExI,QAA2B+G,IAARyB,EAAEA,QAA2BzB,IAARyB,EAAEC,QAAiC1B,IAAdyB,EAAEwQ,SAQR,CACrF,IAAIA,EAAU3S,GAAOA,EAAwB2S,SAAgB,GAC7DgE,EAAU3W,EACV,IAAIkX,EAAM5e,SAAS6e,eAAeC,mBAAmB,IACrDF,EAAInc,KAAKsc,UAAY,+BAA+B3iB,KAAK2C,KAAKie,WAAa,4CAA4C3C,gBACvHnd,EAAK0hB,EAAInc,KAAKwc,SAAS,E,MAEvB/hB,EAAKwK,EAhBP,IAA2BmC,EAsB3B,IAAI4V,EAAUrjB,KAAK+N,UAAUjN,GAC7BmhB,EAAU,EAAA/d,MAAMsc,UAAUyB,IAAY,CAAC,EACvC,EAAA/d,MAAMoY,SAAS2F,EAASoB,GACxB,IAAIpc,EAAOjH,KAAK8M,OAAOqP,YAAY8F,GA2BnC,OA1BAjiB,KAAKsP,WAAWxO,EAAImhB,GAEhBjiB,KAAKsjB,iBACPtjB,KAAKc,GAAGyiB,QAAQziB,GAEhBd,KAAKc,GAAGsH,YAAYtH,GAItBd,KAAK8hB,gBAAgBhhB,GAAI,EAAMmhB,GAC/BjiB,KAAKyP,yBAGDxI,EAAKkI,SACPnP,KAAKye,YAAYxX,EAAKnG,QAAIkL,OAAWA,GAAW,GAK9ChM,KAAKihB,aAAoC,IAArBjhB,KAAK2C,KAAKiW,SAChC5Y,KAAKwjB,0BAA2B,GAElCxjB,KAAK2P,mBACL3P,KAAK4P,6BACE5P,KAAKwjB,yBAEL1iB,CACT,CAUO2d,YAAY3d,EAAyB2iB,EAAwBC,EAA2BC,GAAc,G,MAC3G,IAWIC,EAXA3c,EAAOnG,EAAGqE,cAId,GAHK8B,IACHA,EAAOjH,KAAK6jB,WAAW/iB,GAAIqE,eAEE,QAA1B,EAAA8B,EAAKkI,eAAqB,eAAErO,GAAI,OAAOmG,EAAKkI,SAEjDsU,EAAM,EAAAvf,MAAMsc,UAAUiD,GAAOxc,EAAKkI,SAA+B,OAAJ,wBAAQnP,KAAK2C,KAAKwM,SAAO,CAAE0T,cAAU7W,MAC9FmD,QAAU,EAAAjL,MAAMsc,UAAUiD,GAC9Bxc,EAAKkI,QAAUsU,EAII,SAAfA,EAAI7K,SACNgL,GAAa,EACbH,EAAI7K,OAAS9T,KAAK6H,IAAI1F,EAAKwG,GAAK,GAAGiW,aAAS,EAATA,EAAWjW,IAAK,GACnDgW,EAAI1C,sBAAuB,GAI7B,IACI+C,EACAC,EAFA9F,EAAUhX,EAAKnG,GAAGS,cAAc,4BAGpC,GAAIoiB,EAAa,CACf3jB,KAAKkP,UAAUjI,EAAKnG,IACpB,IAAI0hB,EAAM5e,SAAS6e,eAAeC,mBAAmB,IACrDF,EAAInc,KAAKsc,UAAY,sCACrBmB,EAAUtB,EAAInc,KAAKwc,SAAS,GAC5BiB,EAAQ1b,YAAY6V,GACpB8F,EAAa,OAAH,wBAAO9c,GAAI,CAAEjC,EAAE,EAAGC,EAAE,IAC9B,EAAAf,MAAM+a,sBAAsB8E,UACrBA,EAAW5U,QACdlI,EAAKgX,UACP8F,EAAW9F,QAAUhX,EAAKgX,eACnBhX,EAAKgX,SAEduE,EAAInc,KAAKsc,UAAY,8CACrB1E,EAAUuE,EAAInc,KAAKwc,SAAS,GAC5B5b,EAAKnG,GAAGsH,YAAY6V,GACpBje,KAAK+P,uBAAuB9I,E,CAI9B,GAAIyc,EAAW,CACb,IAAIjW,EAAImW,EAAaH,EAAI7K,OAAS3R,EAAKwG,EACnCC,EAAIzG,EAAKyG,EAAIgW,EAAUhW,EACvB5H,EAAQmB,EAAKnG,GAAGgF,MACpBA,EAAMkB,WAAa,OACnBhH,KAAKgkB,OAAO/c,EAAKnG,GAAI,CAAC2M,IAAGC,MACzB7I,YAAW,IAAOiB,EAAMkB,WAAa,M,CAGvC,IAAImI,EAAUlI,EAAKkI,QAAUlD,EAAUgY,QAAQhG,EAASwF,GAkBxD,OAjBIC,aAAS,EAATA,EAAW5S,WAAS3B,EAAQb,SAAU,GACtCsV,IAAYzU,EAAQ+U,aAAc,GAGlCP,GACFxU,EAAQgU,UAAUW,EAASC,GAIzBL,IACEA,EAAU5S,QAEZzO,OAAOwC,YAAW,IAAM,EAAAX,MAAMuT,mBAAmBiM,EAAU3S,OAAQ,aAAc5B,EAAQrO,KAAK,GAE9FqO,EAAQgU,UAAUlc,EAAKnG,GAAImG,IAGxBkI,CACT,CAMOZ,gBAAgB4V,G,MACrB,IAAIC,EAA2B,QAAtB,EAAGpkB,KAAK+O,sBAAc,eAAE7J,KAC5Bkf,IAELA,EAAMpL,cACNoL,EAAMC,aAAarkB,KAAK+O,eAAejO,IAAI,GAAM,GACjDd,KAAK8M,OAAOkC,MAAMlM,SAAQ0K,IAExBA,EAAExI,GAAKhF,KAAK+O,eAAe/J,EAC3BwI,EAAEvI,GAAKjF,KAAK+O,eAAe9J,EAC3Bmf,EAAMjB,UAAU3V,EAAE1M,GAAI0M,EAAE,IAE1B4W,EAAMpL,aAAY,UACXhZ,KAAK+O,eAGRoV,GACF9hB,OAAOwC,YAAW,IAAM,EAAAX,MAAMuT,mBAAmB0M,EAAgBpT,OAAQ,aAAcqT,EAAMtjB,KAAK,GAEtG,CAWO6d,KAAKgF,GAAc,EAAMW,GAAc,GAE5C,IAAI3Y,EAAO3L,KAAK8M,OAAO6R,KAAKgF,GAmB5B,GAhBAhY,EAAK7I,SAAQ0K,IACX,GAAImW,GAAenW,EAAE1M,KAAO0M,EAAE2B,QAAS,CACrC,IAAIoV,EAAM/W,EAAE1M,GAAGS,cAAc,4BAC7BiM,EAAEyQ,QAAUsG,EAAMA,EAAI5B,eAAY3W,EAC7BwB,EAAEyQ,gBAAgBzQ,EAAEyQ,O,MAEpB0F,UAAsBnW,EAAEyQ,QAEzBzQ,EAAE2B,UACJ3B,EAAE2B,QAAW3B,EAAE2B,QAAsBwP,KAAKgF,GAAa,WAGpDnW,EAAE1M,EAAE,IAITwjB,EAAa,CACf,IAAI5J,EAAsB,EAAAxW,MAAMsc,UAAUxgB,KAAK2C,MAE3C+X,EAAE7I,eAAiB6I,EAAE/I,WAAa+I,EAAE9I,cAAgB8I,EAAE5I,YAAc4I,EAAE/I,YAAc+I,EAAE9I,cACxF8I,EAAE8J,OAAS9J,EAAE/I,iBACN+I,EAAE/I,iBAAkB+I,EAAE9I,mBAAoB8I,EAAE7I,oBAAqB6I,EAAE5I,YAExE4I,EAAEyG,OAAqC,QAA5BnhB,KAAKc,GAAGgF,MAAMkO,aAAwB0G,EAAEyG,IAAM,QACzDnhB,KAAKqhB,oBACP3G,EAAEnO,WAAa,QAEbvM,KAAKkkB,cACPxJ,EAAE9B,OAAS,cACJ8B,EAAEqG,sBAEX,MAAM0D,EAAY/J,EAAU6F,wBAS5B,cARQ7F,EAAU6F,6BACDvU,IAAbyY,EACF/J,EAAE5P,uBAAyB2Z,SAEpB/J,EAAE5P,uBAEX,EAAA5G,MAAMwgB,sBAAsBhK,EAAG,EAAA+F,cAC/B/F,EAAEmI,SAAWlX,EACN+O,C,CAGT,OAAO/O,CACT,CAYOmX,KAAKhE,EAA2B6F,GAAuC,GAC5E,IAAIC,EAAQ3Y,EAAU/H,MAAM8X,KAAK,IAAI8C,IAAU,EAAG9e,KAAKihB,aAAejhB,KAAKkhB,aAC3ElhB,KAAKsjB,kBAAmB,EAIpBtjB,KAAKihB,aAAejhB,KAAKihB,cAAgBjhB,KAAK2C,KAAKiW,QAAUgM,EAAM1H,MAAK1P,GAAMA,EAAExI,EAAIwI,EAAEC,EAAKzN,KAAK2C,KAAKiW,WACvG5Y,KAAKwjB,0BAA2B,EAChCxjB,KAAK8M,OAAOwS,YAAYsF,EAAO5kB,KAAKihB,aAAa,IAGnD,IAAI4D,EAA2B,GA8C/B,OA7CA7kB,KAAKgZ,cAGD2L,GACc,IAAI3kB,KAAK8M,OAAOkC,OACtBlM,SAAQ0K,IACLoX,EAAMphB,MAAKiK,GAAKD,EAAEsX,KAAOrX,EAAEqX,OAEP,mBAAnB,EACRH,EAAa3kB,KAAMwN,GAAG,IAEtBqX,EAAQhW,KAAKrB,GACbxN,KAAKqkB,aAAa7W,EAAE1M,IAAI,GAAM,I,IAOtC8jB,EAAM9hB,SAAQ2K,IACZ,IAAIsX,EAAQtX,EAAEqX,IAAe,IAATrX,EAAEqX,GAAY9kB,KAAK8M,OAAOkC,MAAMxL,MAAKgK,GAAKA,EAAEsX,KAAOrX,EAAEqX,UAAM9Y,EAC/E,GAAI+Y,GAEF,GADA/kB,KAAKgkB,OAAOe,EAAKjkB,GAAI2M,GACjBA,EAAE0B,SAAY1B,EAAE0B,QAA6B0T,SAAU,CACzD,IAAI0B,EAAMQ,EAAKjkB,GAAGS,cAAc,eAC5BgjB,GAAOA,EAAInV,YACbmV,EAAInV,UAAU0T,KAAMrV,EAAE0B,QAA6B0T,UACnD7iB,KAAKsjB,kBAAmB,E,OAGnBqB,IAEPlX,EAD2B,mBAAnB,EACJkX,EAAa3kB,KAAMyN,GAAG,GAAMtI,cAE5BnF,KAAKmjB,UAAU1V,GAAGtI,c,IAK5BnF,KAAK8M,OAAO8B,aAAeiW,EAC3B7kB,KAAKgZ,aAAY,UAGVhZ,KAAKwjB,gCACLxjB,KAAKsjB,iBACLtjB,IACT,CAMOgZ,YAAYC,GAAO,GAOxB,OANAjZ,KAAK8M,OAAOkM,YAAYC,GACnBA,IACHjZ,KAAK8O,sBACL9O,KAAK2P,mBACL3P,KAAK4P,uBAEA5P,IACT,CAKO8N,cAAckX,GAAa,GAChC,GAAIhlB,KAAK2C,KAAK4J,YAAuC,SAAzBvM,KAAK2C,KAAK4J,cACjCyY,IAAehlB,KAAK2C,KAAK2e,gBAA+C,OAA7BthB,KAAK2C,KAAK2e,gBACxD,OAAOthB,KAAK2C,KAAK4J,WAGnB,IAAIzL,EAAKd,KAAKc,GAAGS,cAAc,IAAMvB,KAAK2C,KAAKie,WAC/C,GAAI9f,EAAI,CACN,IAAIgG,EAAS,EAAA5C,MAAMkc,SAAStf,EAAG8J,aAAa,SAC5C,OAAO9F,KAAK8H,MAAM9L,EAAGoN,aAAepH,E,CAGtC,IAAIme,EAAOpD,SAAS7hB,KAAKc,GAAG8J,aAAa,mBACzC,OAAOqa,EAAOngB,KAAK8H,MAAM5M,KAAKc,GAAGwH,wBAAwBxB,OAASme,GAAQjlB,KAAK2C,KAAK4J,UACtF,CAgBOA,WAAWkH,EAAsBuQ,GAAS,GAY/C,GATIA,QAAkBhY,IAARyH,GACRzT,KAAKqhB,qBAA+B,SAAR5N,KAC9BzT,KAAKqhB,kBAA6B,SAAR5N,EAC1BzT,KAAKgiB,4BAGG,YAARvO,GAA6B,SAARA,IAAkBA,OAAMzH,QAGrCA,IAARyH,EAAmB,CACrB,IAAIyR,GAAgBllB,KAAK2C,KAAKiP,YAA0B5R,KAAK2C,KAAKmP,WAC7D9R,KAAK2C,KAAKgP,UAAwB3R,KAAK2C,KAAKkP,aACjD4B,EAAMzT,KAAKwM,YAAc0Y,C,CAG3B,IAAIC,EAAO,EAAAjhB,MAAMkhB,YAAY3R,GAC7B,OAAIzT,KAAK2C,KAAK2e,iBAAmB6D,EAAKE,MAAQrlB,KAAK2C,KAAK4J,aAAe4Y,EAAKzX,IAG5E1N,KAAK2C,KAAK2e,eAAiB6D,EAAKE,KAChCrlB,KAAK2C,KAAK4J,WAAa4Y,EAAKzX,EAExBsW,GACFhkB,KAAKwP,eAAc,IANZxP,IASX,CAGOwM,YACL,OAAOxM,KAAKghB,oBAAsBhhB,KAAKkhB,WACzC,CAEUF,oBAGR,OAAQhhB,KAAKc,GAAGwkB,aAAetlB,KAAKc,GAAG+E,cAAcyf,aAAejjB,OAAOkjB,UAC7E,CAGOzJ,UAGL,OAFA9b,KAAK8M,OAAOgP,UACZ9b,KAAK4P,sBACE5P,IACT,CAWO4Y,OAAOA,EAAgBkG,EAAwB,aACpD,GAAIlG,EAAS,GAAK5Y,KAAK2C,KAAKiW,SAAWA,EAAQ,OAAO5Y,KACtD,IAeIwlB,EAfAC,EAAYzlB,KAAKkhB,YA+BrB,OA3Be,IAAXtI,EACF5Y,KAAKihB,YAAcwE,SAEZzlB,KAAKihB,YAGdjhB,KAAKc,GAAGO,UAAUW,OAAO,cAAgByjB,GACzCzlB,KAAKc,GAAGO,UAAUY,IAAI,cAAgB2W,GACtC5Y,KAAK2C,KAAKiW,OAAS5Y,KAAK8M,OAAO8L,OAASA,EAIzB,IAAXA,GAAgB5Y,KAAK2C,KAAK+iB,uBAC5BF,EAAW,GACXxlB,KAAK4hB,eAAe9e,SAAQhC,IACtBA,EAAGqE,eAAiBqgB,EAAS3W,KAAK/N,EAAGqE,c,IAEtCqgB,EAAS9Z,SAAU8Z,OAAWxZ,IAErChM,KAAK8M,OAAOsS,iBAAiBqG,EAAW7M,EAAQ4M,EAAU1G,GACtD9e,KAAKqhB,mBAAmBrhB,KAAKuM,aAGjCvM,KAAKwjB,0BAA2B,EAChCxjB,KAAK4P,6BACE5P,KAAKwjB,yBAELxjB,IACT,CAKOkhB,YACL,OAAOlhB,KAAK2C,KAAKiW,MACnB,CAGOgJ,eACL,OAAO+D,MAAMC,KAAK5lB,KAAKc,GAAG+hB,UACvBhX,QAAQ/K,GAAoBA,EAAGyI,QAAQ,IAAMvJ,KAAK2C,KAAKie,aAAe9f,EAAGyI,QAAQ,IAAMvJ,KAAK2C,KAAKugB,mBACtG,CAMO1iB,QAAQid,GAAY,GACzB,GAAKzd,KAAKc,GAkBV,OAjBAd,KAAKgiB,0BAAyB,GAC9BhiB,KAAK6lB,WAAU,GAAM,GACrB7lB,KAAK+hB,cAAa,GACbtE,EAIHzd,KAAKc,GAAGyF,WAAWgC,YAAYvI,KAAKc,KAHpCd,KAAK0d,UAAUD,GACfzd,KAAKc,GAAGO,UAAUW,OAAOhC,KAAKuhB,mBAIhCvhB,KAAK8lB,oBACL9lB,KAAKc,GAAGilB,gBAAgB,yBACjB/lB,KAAK+O,sBACL/O,KAAK2C,YACL3C,KAAK+iB,oBACL/iB,KAAK8M,cACL9M,KAAKc,GAAGsO,iBACRpP,KAAKc,GACLd,IACT,CAKO8Y,MAAMrF,GAKX,OAJIzT,KAAK2C,KAAKmW,QAAUrF,IACtBzT,KAAK2C,KAAKmW,MAAQ9Y,KAAK8M,OAAOgM,MAAQrF,EACtCzT,KAAK4P,uBAEA5P,IACT,CAKOgmB,WACL,OAAOhmB,KAAK8M,OAAOgM,KACrB,CAWOmN,iBAAiBlgB,EAAyBmgB,GAAiB,GAChE,IAEIC,EAFA7I,EAAMtd,KAAKc,GAAGwH,wBAIhB6d,EADED,EACa,CAAC3e,IAAK+V,EAAI/V,IAAM3D,SAASwiB,gBAAgBtQ,UAAW1O,KAAMkW,EAAIlW,MAG9D,CAACG,IAAKvH,KAAKc,GAAG2G,UAAWL,KAAMpH,KAAKc,GAAGwG,YAGxD,IAAI+e,EAAetgB,EAASqB,KAAO+e,EAAa/e,KAC5Ckf,EAAcvgB,EAASwB,IAAM4e,EAAa5e,IAE1Cgf,EAAejJ,EAAIzW,MAAQ7G,KAAKkhB,YAChCsF,EAAalJ,EAAIxW,OAAS+a,SAAS7hB,KAAKc,GAAG8J,aAAa,mBAE5D,MAAO,CAAC5F,EAAGF,KAAKuY,MAAMgJ,EAAeE,GAActhB,EAAGH,KAAKuY,MAAMiJ,EAAcE,GACjF,CAGOxT,SACL,OAAOlO,KAAK6H,IAAI3M,KAAK8M,OAAOkG,SAAUhT,KAAK2C,KAAKud,OAClD,CASOrE,YAAY7W,EAAWC,EAAWwI,EAAWC,GAClD,OAAO1N,KAAK8M,OAAO+O,YAAY7W,EAAGC,EAAGwI,EAAGC,EAC1C,CAaOmW,WAAWvY,GAChB,IAAIxK,EAAKmL,EAAUwa,WAAWnb,GAK9B,OAJAtL,KAAK8hB,gBAAgBhhB,GAAI,GACzBd,KAAKyP,yBACLzP,KAAK2P,mBACL3P,KAAK4P,sBACE9O,CACT,CAkBOZ,GAAGkD,EAAsBhD,GAE9B,IAA2B,IAAvBgD,EAAKwG,QAAQ,KAGf,OAFYxG,EAAKiS,MAAM,KACjBvS,SAAQM,GAAQpD,KAAKE,GAAGkD,EAAMhD,KAC7BJ,KAGT,GAAa,WAAToD,GAA8B,UAATA,GAA6B,YAATA,GAA+B,WAATA,GAA8B,YAATA,EAAoB,CAE1G,IAAIsjB,EAAmB,WAATtjB,GAA8B,YAATA,EAEjCpD,KAAK8P,gBAAgB1M,GADnBsjB,EAC4BvmB,GAAiBC,EAASD,GAE1BA,GAAuBC,EAASD,EAAOA,EAAMwmB,QAE7E3mB,KAAKc,GAAGc,iBAAiBwB,EAAMpD,KAAK8P,gBAAgB1M,G,KAClC,SAATA,GAA4B,cAATA,GAAiC,aAATA,GAAgC,gBAATA,GAAmC,WAATA,GAA8B,eAATA,GAAkC,YAATA,EAGnJpD,KAAK8P,gBAAgB1M,GAAQhD,EAE7BgiB,QAAQwE,IAAI,gBAAkBxjB,EAAO,mHAEvC,OAAOpD,IACT,CAMOK,IAAI+C,GAET,OAA2B,IAAvBA,EAAKwG,QAAQ,MACHxG,EAAKiS,MAAM,KACjBvS,SAAQM,GAAQpD,KAAKK,IAAI+C,KACxBpD,OAGI,WAAToD,GAA8B,UAATA,GAA6B,YAATA,GAA+B,WAATA,GAA8B,YAATA,GAElFpD,KAAK8P,gBAAgB1M,IACvBpD,KAAKc,GAAGqB,oBAAoBiB,EAAMpD,KAAK8P,gBAAgB1M,WAGpDpD,KAAK8P,gBAAgB1M,GAErBpD,KACT,CAQOqkB,aAAa/Y,EAAuBmS,GAAY,EAAMhd,GAAe,GAwB1E,OAvBAwL,EAAUR,YAAYH,GAAKxI,SAAQhC,IACjC,GAAIA,EAAG+E,eAAiB/E,EAAG+E,gBAAkB7F,KAAKc,GAAI,OACtD,IAAImG,EAAOnG,EAAGqE,cAET8B,IACHA,EAAOjH,KAAK8M,OAAOkC,MAAMxL,MAAKgK,GAAK1M,IAAO0M,EAAE1M,MAEzCmG,WAGEnG,EAAGqE,cACVnF,KAAKkP,UAAUpO,GAEfd,KAAK8M,OAAOkD,WAAW/I,EAAMwW,EAAWhd,GAEpCgd,GAAa3c,EAAG+E,eAClB/E,EAAGkB,S,IAGHvB,IACFT,KAAK8O,sBACL9O,KAAK4P,uBAEA5P,IACT,CAMO0d,UAAUD,GAAY,GAQ3B,OANAzd,KAAK8M,OAAOkC,MAAMlM,SAAQ0K,WACjBA,EAAE1M,GAAGqE,cACZnF,KAAKkP,UAAU1B,EAAE1M,GAAG,IAEtBd,KAAK8M,OAAO4Q,UAAUD,GACtBzd,KAAK8O,sBACE9O,IACT,CAMO+hB,aAAa8E,GAMlB,OALIA,EACF7mB,KAAKc,GAAGO,UAAUY,IAAI,sBAEtBjC,KAAKc,GAAGO,UAAUW,OAAO,sBAEpBhC,IACT,CAOO6lB,UAAUpS,EAAcqT,GAAc,GAC3C,OAAI9mB,KAAK2C,KAAKyJ,aAAeqH,IAC7BzT,KAAK2C,KAAKyJ,WAAaqH,EACvBzT,KAAKiQ,mBACLjQ,KAAKmM,qBACLnM,KAAK8M,OAAOkC,MAAMlM,SAAQ0K,GAAKxN,KAAK+P,uBAAuBvC,KACvDsZ,GAAe9mB,KAAKwhB,mBALiBxhB,IAO3C,CAOOgkB,OAAO1Y,EAAuBqO,GAGnC,GAAIyJ,UAAU1X,OAAS,EAAG,CACxB0W,QAAQ2E,KAAK,yHAEb,IAAIzL,EAAI8H,UAAW9M,EAAI,EAEvB,OADAqD,EAAM,CAAE3U,EAAEsW,EAAEhF,KAAMrR,EAAEqW,EAAEhF,KAAM7I,EAAE6N,EAAEhF,KAAM5I,EAAE4N,EAAEhF,MACnCtW,KAAKgkB,OAAO1Y,EAAKqO,E,CA4D1B,OAzDA1N,EAAUR,YAAYH,GAAKxI,SAAQhC,IACjC,IAAKA,IAAOA,EAAGqE,cAAe,OAC9B,IAAIqI,EAAI1M,EAAGqE,cACPsI,EAAI,EAAAvJ,MAAMsc,UAAU7G,UACjBlM,EAAEZ,aAGT,IACIma,EADAnkB,EAAO,CAAC,IAAK,IAAK,IAAK,KAe3B,GAbIA,EAAKqa,MAAK+J,QAAcjb,IAATyB,EAAEwZ,IAAoBxZ,EAAEwZ,KAAOzZ,EAAEyZ,OAClDD,EAAI,CAAC,EACLnkB,EAAKC,SAAQmkB,IACXD,EAAEC,QAAejb,IAATyB,EAAEwZ,GAAoBxZ,EAAEwZ,GAAKzZ,EAAEyZ,UAChCxZ,EAAEwZ,EAAE,MAIVD,IAAMvZ,EAAEE,MAAQF,EAAEG,MAAQH,EAAEsE,MAAQtE,EAAEuE,QACzCgV,EAAI,CAAC,GAIHvZ,EAAEwQ,QAAS,CACb,IAAIsG,EAAMzjB,EAAGS,cAAc,4BACvBgjB,GAAOA,EAAI5B,YAAclV,EAAEwQ,UAC7BsG,EAAI5B,UAAYlV,EAAEwQ,gBAEbxQ,EAAEwQ,O,CAIX,IAAIiJ,GAAU,EACVC,GAAY,EAChB,IAAK,MAAMpkB,KAAO0K,EACD,MAAX1K,EAAI,IAAcyK,EAAEzK,KAAS0K,EAAE1K,KACjCyK,EAAEzK,GAAO0K,EAAE1K,GACXmkB,GAAU,EACVC,EAAYA,IAAennB,KAAK2C,KAAKyJ,aAAuB,aAARrJ,GAA8B,WAARA,GAA4B,WAARA,IAK9FikB,IACFhnB,KAAK8M,OAAOwE,aACTC,YAAY/D,GACZ6M,SAAS7M,EAAGwZ,GACfhnB,KAAKyP,yBACLzP,KAAK4P,sBACL5P,KAAK8M,OAAO+C,aAEVqX,GACFlnB,KAAKsP,WAAWxO,EAAI0M,GAElB2Z,GACFnnB,KAAK+P,uBAAuBvC,E,IAGzBxN,IACT,CAMOwkB,OAAOha,GAGZ,KAFqC,iBAAVA,GAAsBA,EAAM6K,MAAM,KAAK3J,OAAS,GAExD,CACjB,IAAIyZ,EAAO,EAAAjhB,MAAMkhB,YAAY5a,GAC7B,GAAIxK,KAAK2C,KAAKykB,aAAejC,EAAKE,MAAQrlB,KAAK2C,KAAK6hB,SAAWW,EAAKzX,EAAG,M,CASzE,OANA1N,KAAK2C,KAAK6hB,OAASha,EACnBxK,KAAK2C,KAAKgP,UAAY3R,KAAK2C,KAAKkP,aAAe7R,KAAK2C,KAAKmP,WAAa9R,KAAK2C,KAAKiP,iBAAc5F,EAC9FhM,KAAK8gB,cAEL9gB,KAAKwP,eAAc,GAEZxP,IACT,CAGOqnB,YAAsB,OAAOrnB,KAAK2C,KAAK6hB,MAAkB,CAczDxX,UAAU/F,GAEf,GAAImc,UAAU1X,OAAS,EAAG,CACxB0W,QAAQ2E,KAAK,uHAEb,IAAIzL,EAAI8H,UAAW9M,EAAI,EACrB7I,EAAqB,CAAEzI,EAAEsW,EAAEhF,KAAMrR,EAAEqW,EAAEhF,KAAM7I,EAAE6N,EAAEhF,KAAM5I,EAAE4N,EAAEhF,KAAMzJ,aAAayO,EAAEhF,MAChF,OAAOtW,KAAKgN,UAAUS,E,CAExB,OAAOzN,KAAK8M,OAAOE,UAAU/F,EAC/B,CAGU2I,sBACR,GAAI5P,KAAK8M,OAAOoM,UAAW,OAAOlZ,KAClC,IAAI2hB,EAAW3hB,KAAK8M,OAAOgQ,eAAc,GAQzC,OAPI6E,GAAYA,EAASjW,SAClB1L,KAAKwjB,0BACRxjB,KAAK8M,OAAOoS,mBAAmByC,GAEjC3hB,KAAK4T,cAAc,SAAU+N,IAE/B3hB,KAAK8M,OAAOsM,cACLpZ,IACT,CAGU2P,mBACR,OAAI3P,KAAK8M,OAAOoM,WACZlZ,KAAK8M,OAAO4C,YAAc1P,KAAK8M,OAAO4C,WAAWhE,OAAS,IACvD1L,KAAKwjB,0BACRxjB,KAAK8M,OAAOoS,mBAAmBlf,KAAK8M,OAAO4C,YAG7C1P,KAAK8M,OAAO4C,WAAW5M,SAAQ0K,WAAcA,EAAEiO,MAAM,IACrDzb,KAAK4T,cAAc,QAAS5T,KAAK8M,OAAO4C,YACxC1P,KAAK8M,OAAO4C,WAAa,IARO1P,IAWpC,CAGO8O,sBACL,OAAI9O,KAAK8M,OAAOoM,WACZlZ,KAAK8M,OAAO8B,cAAgB5O,KAAK8M,OAAO8B,aAAalD,OAAS,IAChE1L,KAAK4T,cAAc,UAAW5T,KAAK8M,OAAO8B,cAC1C5O,KAAK8M,OAAO8B,aAAe,IAHK5O,IAMpC,CAGU4T,cAAcxP,EAAc+gB,GACpC,IAAIhlB,EAAQglB,EAAO,IAAImC,YAAYljB,EAAM,CAACmjB,SAAS,EAAOZ,OAAQxB,IAAS,IAAIqC,MAAMpjB,GAErF,OADApE,KAAKc,GAAGsX,cAAcjY,GACfH,IACT,CAGU8lB,oBAMR,OAJI9lB,KAAKynB,UACP,EAAAvjB,MAAMwjB,iBAAiB1nB,KAAKuhB,yBACrBvhB,KAAKynB,SAEPznB,IACT,CAGUwP,cAAcmY,GAAc,EAAO3V,GAU3C,GARI2V,GACF3nB,KAAK8lB,oBAGF9T,IAAMA,EAAOhS,KAAKgT,UACvBhT,KAAKyP,yBAGwB,IAAzBzP,KAAK2C,KAAK4J,WACZ,OAAOvM,KAGT,IAAIuM,EAAavM,KAAK2C,KAAK4J,WACvB+U,EAAiBthB,KAAK2C,KAAK2e,eAC3BlN,EAAS,IAAIpU,KAAKuhB,uBAAuBvhB,KAAK2C,KAAKie,YAGvD,IAAK5gB,KAAKynB,QAAS,CAEjB,IAAIG,EAAgB5nB,KAAK2C,KAAK4M,iBAAcvD,EAAYhM,KAAKc,GAAGyF,WAEhE,GADAvG,KAAKynB,QAAU,EAAAvjB,MAAM2jB,iBAAiB7nB,KAAKuhB,iBAAkBqG,IACxD5nB,KAAKynB,QAAS,OAAOznB,KAC1BA,KAAKynB,QAAQK,KAAO,EAGpB,EAAA5jB,MAAM6jB,WAAW/nB,KAAKynB,QAASrT,EAAQ,eAAe7H,IAAa+U,KAEnE,IAAI/Z,EAAcvH,KAAK2C,KAAKgP,UAAY3R,KAAK2C,KAAKykB,WAC9C/L,EAAiBrb,KAAK2C,KAAKkP,aAAe7R,KAAK2C,KAAKykB,WACpDhM,EAAgBpb,KAAK2C,KAAKiP,YAAc5R,KAAK2C,KAAKykB,WAClDhgB,EAAepH,KAAK2C,KAAKmP,WAAa9R,KAAK2C,KAAKykB,WAChDnJ,EAAU,GAAG7J,+BACb3F,EAAc,IAAIzO,KAAKuhB,oEAC3B,EAAArd,MAAM6jB,WAAW/nB,KAAKynB,QAASxJ,EAAS,QAAQ1W,aAAe6T,cAAkBC,YAAiBjU,MAClG,EAAAlD,MAAM6jB,WAAW/nB,KAAKynB,QAAShZ,EAAa,QAAQlH,aAAe6T,cAAkBC,YAAiBjU,MAEtG,EAAAlD,MAAM6jB,WAAW/nB,KAAKynB,QAAS,GAAGrT,uBAA6B,UAAUgH,KACzE,EAAAlX,MAAM6jB,WAAW/nB,KAAKynB,QAAS,GAAGrT,sBAA4B,UAAUgH,KACxE,EAAAlX,MAAM6jB,WAAW/nB,KAAKynB,QAAS,GAAGrT,uBAA6B,UAAUgH,cAAkBC,KAC3F,EAAAnX,MAAM6jB,WAAW/nB,KAAKynB,QAAS,GAAGrT,uBAA6B,SAAShN,KACxE,EAAAlD,MAAM6jB,WAAW/nB,KAAKynB,QAAS,GAAGrT,sBAA4B,SAAShN,KACvE,EAAAlD,MAAM6jB,WAAW/nB,KAAKynB,QAAS,GAAGrT,uBAA6B,SAAShN,cAAiBiU,I,CAK3F,IADArJ,EAAOA,GAAQhS,KAAKynB,QAAQK,MACjB9nB,KAAKynB,QAAQK,KAAM,CAC5B,IAAIE,EAAa/C,GAA0B1Y,EAAa0Y,EAAQ3D,EAChE,IAAK,IAAIhL,EAAItW,KAAKynB,QAAQK,KAAO,EAAGxR,GAAKtE,EAAMsE,IAAK,CAClD,IAAI5I,EAAYsa,EAAU1R,GAC1B,EAAApS,MAAM6jB,WAAW/nB,KAAKynB,QAAS,GAAGrT,WAAgBkC,EAAE,MAAS,QAAQ0R,EAAU1R,EAAE,MACjF,EAAApS,MAAM6jB,WAAW/nB,KAAKynB,QAAS,GAAGrT,WAAgBkC,MAAW,WAAW5I,KACxE,EAAAxJ,MAAM6jB,WAAW/nB,KAAKynB,QAAS,GAAGrT,eAAoBkC,MAAO,eAAe5I,KAC5E,EAAAxJ,MAAM6jB,WAAW/nB,KAAKynB,QAAS,GAAGrT,eAAoBkC,MAAO,eAAe5I,I,CAE9E1N,KAAKynB,QAAQK,KAAO9V,C,CAEtB,OAAOhS,IACT,CAGUyP,yBACR,IAAKzP,KAAK8M,QAAU9M,KAAK8M,OAAOoM,UAAW,OAAOlZ,KAClD,IAAI+S,EAAM/S,KAAKgT,SAAWhT,KAAKqR,cAY/B,GADArR,KAAKc,GAAGmnB,aAAa,iBAAkBC,OAAOnV,IAClC,IAARA,EAEF,OADA/S,KAAKc,GAAGgF,MAAMqiB,eAAe,cACtBnoB,KAET,IAAIuM,EAAavM,KAAK2C,KAAK4J,WACvB8Y,EAAOrlB,KAAK2C,KAAK2e,eACrB,OAAK/U,GACLvM,KAAKc,GAAGgF,MAAMoR,UAAYnE,EAAMxG,EAAa8Y,EACtCrlB,MAFiBA,IAG1B,CAGU8hB,gBAAgBhhB,EAAyByc,GAAkB,EAAOtW,GACrEA,IACHnG,EAAGO,UAAUY,IAAIjC,KAAK2C,KAAKie,WAC3B3Z,EAAOjH,KAAK+N,UAAUjN,IAExBA,EAAGqE,cAAgB8B,EACnBA,EAAKnG,GAAKA,EACVmG,EAAK/B,KAAOlF,KACZ,IAAI2c,EAAO,OAAH,UAAO1V,GAOf,OANAA,EAAOjH,KAAK8M,OAAOsE,QAAQnK,EAAMsW,GAE5B,EAAArZ,MAAMkkB,KAAKnhB,EAAM0V,IACpB3c,KAAKsP,WAAWxO,EAAImG,GAEtBjH,KAAK+P,uBAAuB9I,GACrBjH,IACT,CAGUmR,cAAcrQ,EAAiB0M,GAKvC,YAJYxB,IAARwB,EAAExI,GAA2B,OAARwI,EAAExI,GAAclE,EAAGmnB,aAAa,OAAQC,OAAO1a,EAAExI,SAC9DgH,IAARwB,EAAEvI,GAA2B,OAARuI,EAAEvI,GAAcnE,EAAGmnB,aAAa,OAAQC,OAAO1a,EAAEvI,IACtEuI,EAAEC,GAAK3M,EAAGmnB,aAAa,OAAQC,OAAO1a,EAAEC,IACxCD,EAAEE,GAAK5M,EAAGmnB,aAAa,OAAQC,OAAO1a,EAAEE,IACrC1N,IACT,CAGUsP,WAAWxO,EAAiBmG,GACpC,IAAKA,EAAM,OAAOjH,KAClBA,KAAKmR,cAAcrQ,EAAImG,GAEvB,IAAIohB,EAA2C,CAC7Cxb,aAAc,mBACdc,KAAM,WACNC,KAAM,WACNmE,KAAM,WACNC,KAAM,WACNvB,SAAU,eACVF,OAAQ,aACR6J,OAAQ,YACR0K,GAAI,QACJwD,cAAe,qBAEjB,IAAK,MAAMvlB,KAAOslB,EACZphB,EAAKlE,GACPjC,EAAGmnB,aAAaI,EAAMtlB,GAAMmlB,OAAOjhB,EAAKlE,KAExCjC,EAAGilB,gBAAgBsC,EAAMtlB,IAG7B,OAAO/C,IACT,CAGU+N,UAAUjN,GAClB,IAAImG,EAAsB,CAAC,EAC3BA,EAAKjC,EAAI,EAAAd,MAAMkc,SAAStf,EAAG8J,aAAa,SACxC3D,EAAKhC,EAAI,EAAAf,MAAMkc,SAAStf,EAAG8J,aAAa,SACxC3D,EAAKwG,EAAI,EAAAvJ,MAAMkc,SAAStf,EAAG8J,aAAa,SACxC3D,EAAKyG,EAAI,EAAAxJ,MAAMkc,SAAStf,EAAG8J,aAAa,SACxC3D,EAAK8K,KAAO,EAAA7N,MAAMkc,SAAStf,EAAG8J,aAAa,aAC3C3D,EAAK0G,KAAO,EAAAzJ,MAAMkc,SAAStf,EAAG8J,aAAa,aAC3C3D,EAAK+K,KAAO,EAAA9N,MAAMkc,SAAStf,EAAG8J,aAAa,aAC3C3D,EAAK2G,KAAO,EAAA1J,MAAMkc,SAAStf,EAAG8J,aAAa,aAC3C3D,EAAK4F,aAAe,EAAA3I,MAAMwc,OAAO5f,EAAG8J,aAAa,qBACjD3D,EAAKwJ,SAAW,EAAAvM,MAAMwc,OAAO5f,EAAG8J,aAAa,iBAC7C3D,EAAKsJ,OAAS,EAAArM,MAAMwc,OAAO5f,EAAG8J,aAAa,eAC3C3D,EAAKmT,OAAS,EAAAlW,MAAMwc,OAAO5f,EAAG8J,aAAa,cAC3C3D,EAAKqhB,cAAgBxnB,EAAG8J,aAAa,qBACrC3D,EAAK6d,GAAKhkB,EAAG8J,aAAa,SAG1B,IAAK,MAAM7H,KAAOkE,EAAM,CACtB,IAAKA,EAAKshB,eAAexlB,GAAM,OAC1BkE,EAAKlE,IAAsB,IAAdkE,EAAKlE,WACdkE,EAAKlE,E,CAIhB,OAAOkE,CACT,CAGUua,kBACR,IAAIgH,EAAU,CAAC,qBAUf,OARIxoB,KAAK2C,KAAKyJ,YACZpM,KAAKc,GAAGO,UAAUY,OAAOumB,GACzBxoB,KAAKc,GAAGmnB,aAAa,YAAa,UAElCjoB,KAAKc,GAAGO,UAAUW,UAAUwmB,GAC5BxoB,KAAKc,GAAGilB,gBAAgB,cAGnB/lB,IACT,CAMOuT,iBACL,IAAKvT,KAAKc,KAAOd,KAAKc,GAAGwkB,YAAa,OACtC,IAAImD,GAAgB,EAGpB,GAAIzoB,KAAKkkB,aAAelkB,KAAK+O,eACvB/O,KAAK2C,KAAKiW,SAAW5Y,KAAK+O,eAAetB,IAC3Cgb,GAAgB,EAChBzoB,KAAK4Y,OAAO5Y,KAAK+O,eAAetB,EAAG,aAEhC,CAEL,IAAIib,GAAa1oB,KAAK2C,KAAKoe,sBAAwB/gB,KAAKc,GAAGwkB,aAAetlB,KAAK2C,KAAK2d,cAC1D,IAArBtgB,KAAK2C,KAAKiW,SAAkB8P,IAC/BD,GAAgB,EACZzoB,KAAK2C,KAAKke,SAAW7gB,KAAK+hB,cAAa,GAC3C/hB,KAAK4Y,OAAO8P,EAAY,EAAI1oB,KAAKihB,aAC7BjhB,KAAK2C,KAAKke,SAAW7gB,KAAK+hB,cAAa,G,CAsB/C,OAjBI/hB,KAAKqhB,qBACFoH,GAAiBzoB,KAAK2C,KAAKgmB,oBACzB3oB,KAAK4oB,sBACR5oB,KAAK4oB,oBAAsB,EAAA1kB,MAAM2kB,UAAS,IAAM7oB,KAAKuM,cAAcvM,KAAK2C,KAAKgmB,qBAE/E3oB,KAAK4oB,uBAGL5oB,KAAKuM,cAKTvM,KAAK8M,OAAOkC,MAAMlM,SAAQ0K,IACpBA,EAAE2B,SAAW3B,EAAE2B,QAAsBoE,gB,IAGpCvT,IACT,CAGUgiB,yBAAyB8G,GAAc,GAE/C,MAAMC,GAAY/oB,KAAKqhB,oBAAsBrhB,KAAK2C,KAAKoe,wBAA0B/gB,KAAK+O,eAUtF,OARK+Z,IAAeC,GAAa/oB,KAAKgpB,mBAG1BF,GAAgBC,IAAa/oB,KAAKgpB,oBAC5C3mB,OAAOF,oBAAoB,SAAUnC,KAAKgpB,0BACnChpB,KAAKgpB,oBAJZhpB,KAAKgpB,kBAAoBhpB,KAAKuT,eAAe9R,KAAKzB,MAClDqC,OAAOT,iBAAiB,SAAU5B,KAAKgpB,oBAMlChpB,IACT,CAGO0J,kBAAkB4B,EAAwB,oBAA2C,OAAO,EAAApH,MAAMuiB,WAAWnb,EAAK,CAElH5B,mBAAmB4B,EAAwB,oBAA6C,OAAO,EAAApH,MAAMuH,YAAYH,EAAK,CAEtH5B,sBAAsB4B,GAA0C,OAAOW,EAAUwa,WAAWnb,EAAK,CAEjG5B,uBAAuB4B,GAAkC,OAAO,EAAApH,MAAMuH,YAAYH,EAAK,CAGpFwV,cAER,IAAIqE,EACAX,EAAS,EAGTyE,EAAoB,GAsDxB,MArDgC,iBAArBjpB,KAAK2C,KAAK6hB,SACnByE,EAAUjpB,KAAK2C,KAAK6hB,OAAOnP,MAAM,MAEZ,IAAnB4T,EAAQvd,QACV1L,KAAK2C,KAAKgP,UAAY3R,KAAK2C,KAAKkP,aAAeoX,EAAQ,GACvDjpB,KAAK2C,KAAKmP,WAAa9R,KAAK2C,KAAKiP,YAAcqX,EAAQ,IAC3B,IAAnBA,EAAQvd,QACjB1L,KAAK2C,KAAKgP,UAAYsX,EAAQ,GAC9BjpB,KAAK2C,KAAKiP,YAAcqX,EAAQ,GAChCjpB,KAAK2C,KAAKkP,aAAeoX,EAAQ,GACjCjpB,KAAK2C,KAAKmP,WAAamX,EAAQ,KAE/B9D,EAAO,EAAAjhB,MAAMkhB,YAAYplB,KAAK2C,KAAK6hB,QACnCxkB,KAAK2C,KAAKykB,WAAajC,EAAKE,KAC5Bb,EAASxkB,KAAK2C,KAAK6hB,OAASW,EAAKzX,QAIP1B,IAAxBhM,KAAK2C,KAAKgP,UACZ3R,KAAK2C,KAAKgP,UAAY6S,GAEtBW,EAAO,EAAAjhB,MAAMkhB,YAAYplB,KAAK2C,KAAKgP,WACnC3R,KAAK2C,KAAKgP,UAAYwT,EAAKzX,SACpB1N,KAAK2C,KAAK6hB,aAGYxY,IAA3BhM,KAAK2C,KAAKkP,aACZ7R,KAAK2C,KAAKkP,aAAe2S,GAEzBW,EAAO,EAAAjhB,MAAMkhB,YAAYplB,KAAK2C,KAAKkP,cACnC7R,KAAK2C,KAAKkP,aAAesT,EAAKzX,SACvB1N,KAAK2C,KAAK6hB,aAGWxY,IAA1BhM,KAAK2C,KAAKiP,YACZ5R,KAAK2C,KAAKiP,YAAc4S,GAExBW,EAAO,EAAAjhB,MAAMkhB,YAAYplB,KAAK2C,KAAKiP,aACnC5R,KAAK2C,KAAKiP,YAAcuT,EAAKzX,SACtB1N,KAAK2C,KAAK6hB,aAGUxY,IAAzBhM,KAAK2C,KAAKmP,WACZ9R,KAAK2C,KAAKmP,WAAa0S,GAEvBW,EAAO,EAAAjhB,MAAMkhB,YAAYplB,KAAK2C,KAAKmP,YACnC9R,KAAK2C,KAAKmP,WAAaqT,EAAKzX,SACrB1N,KAAK2C,KAAK6hB,QAEnBxkB,KAAK2C,KAAKykB,WAAajC,EAAKE,KACxBrlB,KAAK2C,KAAKgP,YAAc3R,KAAK2C,KAAKkP,cAAgB7R,KAAK2C,KAAKmP,aAAe9R,KAAK2C,KAAKiP,aAAe5R,KAAK2C,KAAKgP,YAAc3R,KAAK2C,KAAKiP,cACxI5R,KAAK2C,KAAK6hB,OAASxkB,KAAK2C,KAAKgP,WAExB3R,IACT,CAoBO0J,mBAAmBsB,EAAiBqF,GAA0E,CAQ9GmD,QAAQlI,EAAuBmI,GAA2B,OAAOzT,IAAK,CAMtEuK,UAAUe,EAAuBmI,GAA2B,OAAOzT,IAAK,CAUxEO,UAAuB,OAAOP,IAAK,CASnCM,SAAsB,OAAON,IAAK,CAIlC0T,WAAWG,GAAgC,OAAO7T,IAAK,CAIvD2T,aAAaE,GAAgC,OAAO7T,IAAK,CAGzDkP,UAAUpO,GAAsC,OAAOd,IAAK,CAE5DmM,qBAAkC,OAAOnM,IAAK,CAE9CiQ,mBAAgC,OAAOjQ,IAAK,CAE5C+P,uBAAuB9I,GAAkC,OAAOjH,IAAK,CAErEmN,eAAerM,EAAyBX,EAAcmE,EAAc2C,EAAqBuF,EAAmBD,GAAmC,CAE/Ia,cAActM,EAAyBX,EAAcmE,EAAc2C,EAAqBuF,EAAmBD,GAAmC,CAE9IsB,OAAO/M,EAAyB2B,GAA6C,CAE7EymB,SAA+F,OAAzE,EAAAC,SAASnpB,KAAMA,KAAKgZ,aAAY,GAAQ,SAAU,cAAe,OAAehZ,IAAM,EAvkDrH,cA+FgB,EAAAkE,MAAQ,EAAAA,MAGR,EAAAklB,OAAS,EAAAzQ,gBAy5ChB,EAAA0Q,MAAQ,QAqFjB,eACA,SACA,W,4GC9nDa,EAAA5I,aAAiC,CAC5C3V,uBAAwB,SACxB+V,SAAS,EACT5L,MAAM,EACN1I,WAAY,OACZoc,mBAAoB,IACpBrH,eAAgB,KAChB1I,OAAQ,GACRpP,UAAW,CAAEtI,OAAQ,2BAA4BoF,SAAU,QAC3DpF,OAAQ,2BACR0f,UAAW,kBACX4D,OAAQ,GACR4C,WAAY,KACZ7Z,OAAQ,EACR2S,OAAQ,EACRI,cAAe,IACf4C,iBAAkB,yBAClBD,gBAAiB,GACjB9S,iBAAkB,CAAE7G,OAAQ,oBAC5BiB,UAAW,CAAEI,QAAS,MACtBwW,IAAK,QAeM,EAAA7Q,qBAAoC,CAC/CpP,OAAQ,2BACRoF,SAAU,O,yIChCZ,oBAAyBzG,EAAMypB,EAAGC,EAAiBC,EAAiBC,GAClE,IAAIC,EAAU,IAAIC,KAChBvH,QAAQ2E,KAAK,2BAA6BwC,EAAU,sBAAwBE,EAA/D,gCACFD,EAAU,iDACdF,EAAEM,MAAM/pB,EAAM8pB,IAGvB,OADAD,EAAQxd,UAAYod,EAAEpd,UACfwd,CACT,EAGA,wBAA6B/mB,EAAwB4mB,EAAiBC,EAAiBC,QAC/Dzd,IAAlBrJ,EAAK4mB,KACP5mB,EAAK6mB,GAAW7mB,EAAK4mB,GACrBnH,QAAQ2E,KAAK,yBAA2BwC,EAAU,sBAAwBE,EAAM,gCAC9ED,EAAU,iDAEhB,EAGA,2BAAgC7mB,EAAwB4mB,EAAiBE,EAAaI,QAC9D7d,IAAlBrJ,EAAK4mB,IACPnH,QAAQ2E,KAAK,yBAA2BwC,EAAU,sBAAwBE,EAAMI,EAEpF,EAGA,wBAA6B/oB,EAAiByoB,EAAiBC,EAAiBC,GAC9E,IAAIK,EAAUhpB,EAAG8J,aAAa2e,GACd,OAAZO,IACFhpB,EAAGmnB,aAAauB,EAASM,GACzB1H,QAAQ2E,KAAK,4BAA8BwC,EAAU,KAAOO,EAAU,oCAAsCL,EAAM,gCAChHD,EAAU,iDAEhB,EAKA,MAAatlB,EAGXwF,mBAAmB4B,GACjB,GAAmB,iBAARA,EAAkB,CAC3B,IAAIK,EAAO/H,SAASmmB,iBAAiBze,GAKrC,OAJKK,EAAKD,QAAqB,MAAXJ,EAAI,IAAyB,MAAXA,EAAI,KACxCK,EAAO/H,SAASmmB,iBAAiB,IAAMze,GAClCK,EAAKD,SAAUC,EAAO/H,SAASmmB,iBAAiB,IAAMze,KAEtDqa,MAAMC,KAAKja,E,CAEpB,MAAO,CAACL,EACV,CAGA5B,kBAAkB4B,GAChB,GAAmB,iBAARA,EAAkB,CAC3B,IAAKA,EAAII,OAAQ,OAAO,KACxB,GAAe,MAAXJ,EAAI,GACN,OAAO1H,SAASomB,eAAe1e,EAAInK,UAAU,IAE/C,GAAe,MAAXmK,EAAI,IAAyB,MAAXA,EAAI,GACxB,OAAO1H,SAASrC,cAAc+J,GAIhC,IAAIiR,OAAOjR,EAAI,IACb,OAAO1H,SAASomB,eAAe1e,GAIjC,IAAIxK,EAAK8C,SAASrC,cAAc+J,GAGhC,OAFKxK,IAAMA,EAAK8C,SAASomB,eAAe1e,IACnCxK,IAAMA,EAAK8C,SAASrC,cAAc,IAAM+J,IACtCxK,C,CAET,OAAOwK,CACT,CAGA5B,qBAAqB4R,EAAsBC,GACzC,QAASD,EAAErW,GAAKsW,EAAEtW,EAAIsW,EAAE7N,GAAK4N,EAAErW,EAAIqW,EAAE5N,GAAK6N,EAAEtW,GAAKqW,EAAEtW,EAAIsW,EAAE7N,GAAK8N,EAAEvW,GAAKsW,EAAEtW,GAAKuW,EAAEvW,EAAIuW,EAAE9N,EACtF,CAGA/D,kBAAkB4R,EAAsBC,GACtC,OAAOrX,EAAMqW,cAAce,EAAG,CAACtW,EAAGuW,EAAEvW,EAAE,GAAKC,EAAGsW,EAAEtW,EAAE,GAAKwI,EAAG8N,EAAE9N,EAAE,EAAGC,EAAG6N,EAAE7N,EAAE,GAC1E,CAGAhE,qBAAqB4R,EAAsBC,GACzC,IAAI0O,EAAM3O,EAAEtW,EAAIuW,EAAEvW,EAAKsW,EAAEtW,EAAIuW,EAAEvW,EAC3BklB,EAAM5O,EAAEtW,EAAEsW,EAAE7N,EAAI8N,EAAEvW,EAAEuW,EAAE9N,EAAK6N,EAAEtW,EAAEsW,EAAE7N,EAAI8N,EAAEvW,EAAEuW,EAAE9N,EAC/C,GAAIyc,GAAMD,EAAI,OAAO,EACrB,IAAIE,EAAM7O,EAAErW,EAAIsW,EAAEtW,EAAKqW,EAAErW,EAAIsW,EAAEtW,EAC3BmlB,EAAM9O,EAAErW,EAAEqW,EAAE5N,EAAI6N,EAAEtW,EAAEsW,EAAE7N,EAAK4N,EAAErW,EAAEqW,EAAE5N,EAAI6N,EAAEtW,EAAEsW,EAAE7N,EAC/C,OAAI0c,GAAMD,EAAW,GACbD,EAAGD,IAAOG,EAAGD,EACvB,CAGAzgB,YAAY4R,GACV,OAAOA,EAAE7N,EAAI6N,EAAE5N,CACjB,CAQAhE,YAAYsF,EAAwBkF,EAAc0E,GAEhD,OADAA,EAASA,GAAU5J,EAAM0P,QAAO,CAAC2L,EAAK7c,IAAM1I,KAAK6H,IAAIa,EAAExI,EAAIwI,EAAEC,EAAG4c,IAAM,IAAM,IAC/D,IAATnW,EACKlF,EAAMgN,MAAK,CAACV,EAAGC,IAAOA,EAAEvW,EAAIuW,EAAEtW,EAAI2T,GAAS0C,EAAEtW,EAAIsW,EAAErW,EAAI2T,KAEvD5J,EAAMgN,MAAK,CAACT,EAAGD,IAAOC,EAAEvW,EAAIuW,EAAEtW,EAAI2T,GAAS0C,EAAEtW,EAAIsW,EAAErW,EAAI2T,IAClE,CAQAlP,wBAAwBob,EAAYld,GAClC,IAAI9B,EAA0BlC,SAASoE,cAAc,SAiBrD,OAhBAlC,EAAMmiB,aAAa,OAAQ,YAC3BniB,EAAMmiB,aAAa,cAAenD,GAE7Bhf,EAAcwkB,WAEhBxkB,EAAcwkB,WAAWC,QAAU,GAEpCzkB,EAAMsC,YAAYxE,SAAS4mB,eAAe,KAEvC5iB,EAKHA,EAAO6iB,aAAa3kB,EAAO8B,EAAO8iB,aAHlC9iB,EAAShE,SAAS+mB,qBAAqB,QAAQ,IACxCviB,YAAYtC,GAIdA,EAAM8kB,KACf,CAGAlhB,wBAAwBob,GACtB,IAAIhkB,EAAK8C,SAASrC,cAAc,qBAAuBujB,EAAK,KACxDhkB,GAAMA,EAAGyF,YAAYzF,EAAGkB,QAC9B,CAGA0H,kBAAkBkhB,EAAsBtd,EAAkBud,GAC3B,mBAAlBD,EAAME,QACfF,EAAME,QAAQxd,EAAUud,GACa,mBAArBD,EAAMG,YACtBH,EAAMG,WAAW,GAAGzd,KAAYud,KAEpC,CAGAnhB,cAAcshB,GACZ,MAAiB,kBAANA,EACFA,EAEQ,iBAANA,IAEM,MADfA,EAAIA,EAAEznB,gBACqB,OAANynB,GAAoB,UAANA,GAAuB,MAANA,GAE/CC,QAAQD,EACjB,CAEAthB,gBAAgBc,GACd,OAAkB,OAAVA,GAAmC,IAAjBA,EAAMkB,YAAgBM,EAAYrH,OAAO6F,EACrE,CAEAd,mBAAmB+J,GACjB,IAAI/F,EACA2X,EAAO,KACX,GAAmB,iBAAR5R,EAAkB,CAC3B,IAAI9L,EAAQ8L,EAAI9L,MAAM,yEACtB,IAAKA,EACH,MAAM,IAAIujB,MAAM,kBAElB7F,EAAO1d,EAAM,IAAM,KACnB+F,EAAIyd,WAAWxjB,EAAM,G,MAErB+F,EAAI+F,EAEN,MAAO,CAAE/F,IAAG2X,OACd,CAIA3b,gBAAgBrG,KAAW+nB,GAczB,OAZAA,EAAQtoB,SAAQuoB,IACd,IAAK,MAAMtoB,KAAOsoB,EAAQ,CACxB,IAAKA,EAAO9C,eAAexlB,GAAM,OACb,OAAhBM,EAAON,SAAiCiJ,IAAhB3I,EAAON,GACjCM,EAAON,GAAOsoB,EAAOtoB,GACW,iBAAhBsoB,EAAOtoB,IAA4C,iBAAhBM,EAAON,IAE1D/C,KAAKsc,SAASjZ,EAAON,GAAMsoB,EAAOtoB,G,KAKjCM,CACT,CAGAqG,YAAY4R,EAAYC,GACtB,GAAiB,iBAAND,EAAiB,OAAOA,GAAKC,EACxC,UAAWD,UAAaC,EAAG,OAAO,EAElC,GAAI3Y,OAAOC,KAAKyY,GAAG5P,SAAW9I,OAAOC,KAAK0Y,GAAG7P,OAAQ,OAAO,EAC5D,IAAK,MAAM3I,KAAOuY,EAChB,GAAIA,EAAEvY,KAASwY,EAAExY,GAAM,OAAO,EAEhC,OAAO,CACT,CAGA2G,eAAe4R,EAAoBC,EAAoB+P,GAAW,GAWhE,OAVAhQ,EAAEtW,EAAIuW,EAAEvW,EACRsW,EAAErW,EAAIsW,EAAEtW,EACRqW,EAAE7N,EAAI8N,EAAE9N,EACR6N,EAAE5N,EAAI6N,EAAE7N,EACJ4d,IACE/P,EAAE5N,OAAM2N,EAAE3N,KAAO4N,EAAE5N,MACnB4N,EAAE3N,OAAM0N,EAAE1N,KAAO2N,EAAE3N,MACnB2N,EAAExJ,OAAMuJ,EAAEvJ,KAAOwJ,EAAExJ,MACnBwJ,EAAEvJ,OAAMsJ,EAAEtJ,KAAOuJ,EAAEvJ,OAElBsJ,CACT,CAGA5R,eAAe4R,EAAsBC,GACnC,OAAOD,GAAKC,GAAKD,EAAEtW,IAAMuW,EAAEvW,GAAKsW,EAAErW,IAAMsW,EAAEtW,GAAKqW,EAAE7N,IAAM8N,EAAE9N,GAAK6N,EAAE5N,IAAM6N,EAAE7N,CAC1E,CAGAhE,6BAA6B4R,EAAYC,GACvC,GAAiB,iBAAND,GAA+B,iBAANC,EACpC,IAAK,IAAIxY,KAAOuY,EAAG,CACjB,IAAI7H,EAAM6H,EAAEvY,GACZ,GAAe,MAAXA,EAAI,IAAc0Q,IAAQ8H,EAAExY,UACvBuY,EAAEvY,QACJ,GAAI0Q,GAAsB,iBAARA,QAA+BzH,IAAXuP,EAAExY,GAAoB,CACjE,IAAK,IAAIuT,KAAK7C,EACRA,EAAI6C,KAAOiF,EAAExY,GAAKuT,IAAe,MAATA,EAAE,WAAqB7C,EAAI6C,GAEpD1T,OAAOC,KAAK4Q,GAAK/H,eAAiB4P,EAAEvY,E,EAG/C,CAGA2G,6BAA6B8D,EAAkB+d,GAAW,GACxD,IAAK,IAAIxoB,KAAOyK,EAAoB,MAAXzK,EAAI,IAAyB,OAAXyK,EAAEzK,SAA4BiJ,IAAXwB,EAAEzK,WAA4ByK,EAAEzK,UACvFyK,EAAEtI,KACLqmB,UAAiB/d,EAAE1M,GAElB0M,EAAEX,qBAAqBW,EAAEX,aACzBW,EAAEiD,iBAAiBjD,EAAEiD,SACrBjD,EAAE+C,eAAe/C,EAAE+C,OACnB/C,EAAE4M,eAAe5M,EAAE4M,OACZ,IAAR5M,EAAEC,GAAWD,EAAEC,IAAMD,EAAEG,aAAaH,EAAEC,EAC9B,IAARD,EAAEE,GAAWF,EAAEE,IAAMF,EAAEI,aAAaJ,EAAEE,CAC5C,CAGAhE,wBAAwB5I,EAAiBsC,GACvC,KAAOtC,GAAI,CACT,GAAIA,EAAGO,UAAUC,SAAS8B,GAAO,OAAOtC,EACxCA,EAAKA,EAAG+E,a,CAEV,OAAO,IACT,CAGA6D,gBAAgB8hB,EAAkBC,GAChC,IAAIC,GAAY,EAChB,MAAO,IAAI/B,KACJ+B,IACHA,GAAY,EACZ7mB,YAAW,KAAQ2mB,KAAQ7B,GAAO+B,GAAY,CAAK,GAAKD,G,CAG9D,CAEA/hB,+BAA+B5I,GAC7B,IAAIgF,EAAQhF,EAAGgF,MACXA,EAAMC,UACRD,EAAMqiB,eAAe,YAEnBriB,EAAMsB,MACRtB,EAAMqiB,eAAe,QAEnBriB,EAAMyB,KACRzB,EAAMqiB,eAAe,OAEnBriB,EAAMe,OACRf,EAAMqiB,eAAe,SAEnBriB,EAAMgB,QACRhB,EAAMqiB,eAAe,SAEzB,CAGAze,wBAAwB5I,GACtB,IAAKA,EAAI,OAAO8C,SAAS+nB,kBAAmC/nB,SAASwiB,gBACrE,MAAMtgB,EAAQ4B,iBAAiB5G,GAG/B,MAFsB,gBAEJ8qB,KAAK9lB,EAAM+lB,SAAW/lB,EAAMgmB,WACrChrB,EAEAd,KAAK4V,iBAAiB9U,EAAG+E,cAEpC,CAGA6D,4BAA4B5I,EAAiBiF,EAAyB4M,GAEpE,IAAIS,EAAOtS,EAAGwH,wBACVyjB,EAA6B1pB,OAAO2pB,aAAepoB,SAASwiB,gBAAgB6F,aAChF,GAAI7Y,EAAK7L,IAAM,GACb6L,EAAKiI,OAAS0Q,EACd,CAIA,IAAIG,EAAiB9Y,EAAKiI,OAAS0Q,EAC/BI,EAAe/Y,EAAK7L,IACpBoO,EAAW3V,KAAK4V,iBAAiB9U,GACrC,GAAiB,OAAb6U,EAAmB,CACrB,IAAIyW,EAAazW,EAASG,UACtB1C,EAAK7L,IAAM,GAAKoL,EAAW,EAEzB7R,EAAGoN,aAAe6d,EACpBpW,EAASG,WAAanD,EAEtBgD,EAASG,WAAahR,KAAKC,IAAIonB,GAAgBrnB,KAAKC,IAAI4N,GAAYA,EAAWwZ,EAExExZ,EAAW,IAEhB7R,EAAGoN,aAAe6d,EACpBpW,EAASG,WAAanD,EAEtBgD,EAASG,WAAaoW,EAAiBvZ,EAAWA,EAAWuZ,GAIjEnmB,EAASwB,KAAOoO,EAASG,UAAYsW,C,EAG3C,CASA1iB,0BAA0BvJ,EAAmBW,EAAiB6R,GAC5D,MAAMgD,EAAW3V,KAAK4V,iBAAiB9U,GACjCgG,EAAS6O,EAASsW,aAKlBxkB,EAAakO,IAAa3V,KAAK4V,mBAAsB,EAAID,EAASrN,wBAAwBf,IAC1F8kB,EAAclsB,EAAMqH,QAAUC,EAE9B4T,EAASgR,EAAcvlB,EAAS6L,EAD1B0Z,EAAc1Z,EAMxBgD,EAAS2W,SAAS,CAAEC,SAAU,SAAUhlB,IAAK8kB,EAAc1Z,IAClD0I,GACT1F,EAAS2W,SAAS,CAAEC,SAAU,SAAUhlB,IAAKoL,GAAY7L,EAASulB,IAEtE,CAGA3iB,aAAgB8iB,GACd,OAAIA,SAAqD,iBAAV,EACtCA,EAGLA,aAAe7G,MAEV,IAAI6G,GAEN,OAAP,UAAWA,EACb,CAMA9iB,iBAAoB8iB,GAElB,MAAMC,EAAa,CAAC,aAAc,KAAM,OAAQ,UAAW,UAErDC,EAAMxoB,EAAM4Z,MAAM0O,GACxB,IAAK,MAAMzpB,KAAO2pB,EAEZA,EAAInE,eAAexlB,IAA6B,iBAAd2pB,EAAI3pB,IAA8C,OAAxBA,EAAI5B,UAAU,EAAG,KAAgBsrB,EAAWjpB,MAAKyjB,GAAKA,IAAMlkB,MAC1H2pB,EAAI3pB,GAAOmB,EAAMsc,UAAUgM,EAAIzpB,KAGnC,OAAO2pB,CACT,CAGOhjB,iBAAiB5I,GACtB,MAAMmG,EAAOnG,EAAGsF,WAAU,GAE1B,OADAa,EAAK8e,gBAAgB,MACd9e,CACT,CAEOyC,gBAAgB5I,EAAiB8G,GACtC,IAAIrB,EAEFA,EADoB,iBAAXqB,EACIhE,SAASrC,cAAcqG,GAEvBA,EAEXrB,GACFA,EAAW6B,YAAYtH,EAE3B,CAQO4I,mBAAmB5I,EAAiB6rB,GACzC,GAAIA,aAAkB/pB,OACpB,IAAK,MAAM2B,KAAKooB,EACVA,EAAOpE,eAAehkB,KACpBohB,MAAMiH,QAAQD,EAAOpoB,IAEtBooB,EAAOpoB,GAAgBzB,SAAQ2Q,IAC9B3S,EAAGgF,MAAMvB,GAAKkP,CAAG,IAGnB3S,EAAGgF,MAAMvB,GAAKooB,EAAOpoB,GAK/B,CAEOmF,iBAAoB1G,EAA2B6mB,GACpD,MAAMgD,EAAM,CAAEzoB,KAAMylB,EAAKzlB,MACnBooB,EAAM,CACVrpB,OAAQ,EACR2pB,MAAO,EACPC,QAAS,EACTxF,SAAS,EACT3P,YAAY,EACZvU,OAAQwmB,EAAKxmB,OAASwmB,EAAKxmB,OAASL,EAAEK,QAQxC,OALKL,EAAgBgqB,eACnBH,EAAkB,aAAK7pB,EAAgBgqB,cAEzC,CAAC,SAAS,UAAU,UAAU,YAAYlqB,SAAQqP,GAAK0a,EAAI1a,GAAKnP,EAAEmP,KAClE,CAAC,QAAQ,QAAQ,UAAU,UAAU,UAAU,WAAWrP,SAAQqP,GAAK0a,EAAI1a,GAAKnP,EAAEmP,KAC3E,+BAAI0a,GAAQL,EACrB,CAGO9iB,0BAA0B1G,EAAe0U,EAAuBrU,GACrE,MAAM0U,EAAiBnU,SAASoU,YAAY,eAC5CD,EAAeE,eACbP,GACA,GACA,EACArV,OACA,EACAW,EAAEkV,QACFlV,EAAEmV,QACFnV,EAAEqE,QACFrE,EAAEwE,QACFxE,EAAEiqB,QACFjqB,EAAEkqB,OACFlqB,EAAEmqB,SACFnqB,EAAEoqB,QACF,EACApqB,EAAEK,SAEHA,GAAUL,EAAEK,QAAQ+U,cAAcL,EACrC,EAjdF,S,GCpDIsV,EAA2B,CAAC,ECE5BC,EDCJ,SAASC,EAAoBC,GAE5B,IAAIC,EAAeJ,EAAyBG,GAC5C,QAAqBxhB,IAAjByhB,EACH,OAAOA,EAAahuB,QAGrB,IAAIC,EAAS2tB,EAAyBG,GAAY,CAGjD/tB,QAAS,CAAC,GAOX,OAHAiuB,EAAoBF,GAAUG,KAAKjuB,EAAOD,QAASC,EAAQA,EAAOD,QAAS8tB,GAGpE7tB,EAAOD,OACf,CCnB0B8tB,CAAoB,K","file":"gridstack-all.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GridStack\"] = factory();\n\telse\n\t\troot[\"GridStack\"] = factory();\n})(self, function() {\nreturn ","/**\n * dd-base-impl.ts 7.1.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nexport type EventCallback = (event: Event) => boolean|void;\nexport abstract class DDBaseImplement {\n  /** returns the enable state, but you have to call enable()/disable() to change (as other things need to happen) */\n  public get disabled(): boolean   { return this._disabled; }\n\n  /** @internal */\n  protected _disabled: boolean; // initial state to differentiate from false\n  /** @internal */\n  protected _eventRegister: {\n    [eventName: string]: EventCallback;\n  } = {};\n\n  public on(event: string, callback: EventCallback): void {\n    this._eventRegister[event] = callback;\n  }\n\n  public off(event: string): void {\n    delete this._eventRegister[event];\n  }\n\n  public enable(): void {\n    this._disabled = false;\n  }\n\n  public disable(): void {\n    this._disabled = true;\n  }\n\n  public destroy(): void {\n    delete this._eventRegister;\n  }\n\n  public triggerEvent(eventName: string, event: Event): boolean|void {\n    if (!this.disabled && this._eventRegister && this._eventRegister[eventName])\n      return this._eventRegister[eventName](event);\n  }\n}\n\nexport interface HTMLElementExtendOpt<T> {\n  el: HTMLElement;\n  option: T;\n  updateOption(T): DDBaseImplement;\n}\n","/**\n * dd-draggable.ts 7.1.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\nimport { Utils } from './utils';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { GridItemHTMLElement, DDUIData } from './types';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, touchend, touchmove, touchstart, pointerdown } from './dd-touch';\n\n// TODO: merge with DDDragOpt ?\nexport interface DDDraggableOpt {\n  appendTo?: string | HTMLElement;\n  handle?: string;\n  helper?: string | HTMLElement | ((event: Event) => HTMLElement);\n  // containment?: string | HTMLElement; // TODO: not implemented yet\n  // revert?: string | boolean | unknown; // TODO: not implemented yet\n  // scroll?: boolean; // native support by HTML5 drag drop, can't be switch to off actually\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  drag?: (event: Event, ui: DDUIData) => void;\n}\n\ninterface DragOffset {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n  offsetLeft: number;\n  offsetTop: number;\n}\n\ntype DDDragEvent = 'drag' | 'dragstart' | 'dragstop';\n\n// let count = 0; // TEST\n\nexport class DDDraggable extends DDBaseImplement implements HTMLElementExtendOpt<DDDraggableOpt> {\n  public el: HTMLElement;\n  public option: DDDraggableOpt;\n  public helper: HTMLElement; // used by GridStackDDNative\n\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected dragOffset: DragOffset;\n  /** @internal */\n  protected dragElementOriginStyle: Array<string>;\n  /** @internal */\n  protected dragEl: HTMLElement;\n  /** @internal true while we are dragging an item around */\n  protected dragging: boolean;\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected helperContainment: HTMLElement;\n  /** @internal properties we change during dragging, and restore back */\n  protected static originStyleProp = ['transition', 'pointerEvents', 'position', 'left', 'top'];\n  /** @internal pause before we call the actual drag hit collision code */\n  protected dragTimeout: number;\n\n  constructor(el: HTMLElement, option: DDDraggableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = option;\n    // get the element that is actually supposed to be dragged by\n    let className = option.handle.substring(1);\n    this.dragEl = el.classList.contains(className) ? el : el.querySelector(option.handle) || el;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n    this.enable();\n  }\n\n  public on(event: DDDragEvent, callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: DDDragEvent): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.dragEl.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchstart', touchstart);\n      this.dragEl.addEventListener('pointerdown', pointerdown);\n      // this.dragEl.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    this.el.classList.remove('ui-draggable-disabled');\n    this.el.classList.add('ui-draggable');\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.dragEl.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchstart', touchstart);\n      this.dragEl.removeEventListener('pointerdown', pointerdown);\n    }\n    this.el.classList.remove('ui-draggable');\n    if (!forDestroy) this.el.classList.add('ui-draggable-disabled');\n  }\n\n  public destroy(): void {\n    if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n    delete this.dragTimeout;\n    if (this.dragging) this._mouseUp(this.mouseDownEvent);\n    this.disable(true);\n    delete this.el;\n    delete this.helper;\n    delete this.option;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDraggableOpt): DDDraggable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    return this;\n  }\n\n  /** @internal call when mouse goes down before a dragstart happens */\n  protected _mouseDown(e: MouseEvent): boolean {\n    // don't let more than one widget handle mouseStart\n    if (DDManager.mouseHandled) return;\n    if (e.button !== 0) return true; // only left click\n\n    // make sure we are not clicking on known object that handles mouseDown (TODO: make this extensible ?) #2054\n    const skipMouseDown = ['input', 'textarea', 'button', 'select', 'option'];\n    const name = (e.target as HTMLElement).nodeName.toLowerCase();\n    if (skipMouseDown.find(skip => skip === name)) return true;\n\n    // make sure we are clicking on a drag handle or child of it...\n    // Note: we don't need to check that's handle is an immediate child, as mouseHandled will prevent parents from also handling it (lowest wins)\n    //\n    // REMOVE: why would we get the event if it wasn't for us or child ?\n    // let className = this.option.handle.substring(1);\n    // let el = e.target as HTMLElement;\n    // while (el && !el.classList.contains(className)) { el = el.parentElement; }\n    // if (!el) return;\n    this.mouseDownEvent = e;\n    delete this.dragging;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    // document handler so we can continue receiving moves as the item is 'fixed' position, and capture=true so WE get a first crack\n    document.addEventListener('mousemove', this._mouseMove, true); // true=capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.addEventListener('touchmove', touchmove);\n      this.dragEl.addEventListener('touchend', touchend);\n    }\n\n    e.preventDefault();\n    DDManager.mouseHandled = true;\n    return true;\n  }\n\n  /** @internal method to call actual drag event */\n  protected _callDrag(e: DragEvent) {\n    if (!this.dragging) return;\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drag' });\n    if (this.option.drag) {\n      this.option.drag(ev, this.ui());\n    }\n    this.triggerEvent('drag', ev);\n  }\n\n  /** @internal called when the main page (after successful mousedown) receives a move event to drag the item around the screen */\n  protected _mouseMove(e: DragEvent): boolean {\n    // console.log(`${count++} move ${e.x},${e.y}`)\n    let s = this.mouseDownEvent;\n\n    if (this.dragging) {\n      this._dragFollow(e);\n      // delay actual grid handling drag until we pause for a while if set\n      if (DDManager.pauseDrag) {\n        const pause = Number.isInteger(DDManager.pauseDrag) ? DDManager.pauseDrag as number : 100;\n        if (this.dragTimeout) window.clearTimeout(this.dragTimeout);\n        this.dragTimeout = window.setTimeout(() => this._callDrag(e), pause);\n      } else {\n        this._callDrag(e);\n      }\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 3) {\n      /**\n       * don't start unless we've moved at least 3 pixels\n       */\n      this.dragging = true;\n      DDManager.dragElement = this;\n      // if we're dragging an actual grid item, set the current drop as the grid (to detect enter/leave)\n      let grid = (this.el as GridItemHTMLElement).gridstackNode?.grid;\n      if (grid) {\n        DDManager.dropElement = (grid.el as DDElementHost).ddElement.ddDroppable;\n      } else {\n        delete DDManager.dropElement;\n      }\n      this.helper = this._createHelper(e);\n      this._setupHelperContainmentStyle();\n      this.dragOffset = this._getDragOffset(e, this.el, this.helperContainment);\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstart' });\n\n      this._setupHelperStyle(e);\n      if (this.option.start) {\n        this.option.start(ev, this.ui());\n      }\n      this.triggerEvent('dragstart', ev);\n    }\n    e.preventDefault(); // needed otherwise we get text sweep text selection as we drag around\n    return true;\n  }\n\n  /** @internal call when the mouse gets released to drop the item at current location */\n  protected _mouseUp(e: MouseEvent): void {\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.dragEl.removeEventListener('touchmove', touchmove, true);\n      this.dragEl.removeEventListener('touchend', touchend, true);\n    }\n    if (this.dragging) {\n      delete this.dragging;\n\n      // reset the drop target if dragging over ourself (already parented, just moving during stop callback below)\n      if (DDManager.dropElement?.el === this.el.parentElement) {\n        delete DDManager.dropElement;\n      }\n\n      this.helperContainment.style.position = this.parentOriginStylePosition || null;\n      if (this.helper === this.el) {\n        this._removeHelperStyle();\n      } else {\n        this.helper.remove();\n      }\n      const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dragstop' });\n      if (this.option.stop) {\n        this.option.stop(ev); // NOTE: destroy() will be called when removing item, so expect NULL ptr after!\n      }\n      this.triggerEvent('dragstop', ev);\n\n      // call the droppable method to receive the item\n      if (DDManager.dropElement) {\n        DDManager.dropElement.drop(e);\n      }\n    }\n    delete this.helper;\n    delete this.mouseDownEvent;\n    delete DDManager.dragElement;\n    delete DDManager.dropElement;\n    delete DDManager.mouseHandled;\n    e.preventDefault();\n  }\n\n  /** @internal create a clone copy (or user defined method) of the original drag item if set */\n  protected _createHelper(event: DragEvent): HTMLElement {\n    let helper = this.el;\n    if (typeof this.option.helper === 'function') {\n      helper = this.option.helper(event);\n    } else if (this.option.helper === 'clone') {\n      helper = Utils.cloneNode(this.el);\n    }\n    if (!document.body.contains(helper)) {\n      Utils.appendTo(helper, this.option.appendTo === 'parent' ? this.el.parentNode : this.option.appendTo);\n    }\n    if (helper === this.el) {\n      this.dragElementOriginStyle = DDDraggable.originStyleProp.map(prop => this.el.style[prop]);\n    }\n    return helper;\n  }\n\n  /** @internal set the fix position of the dragged item */\n  protected _setupHelperStyle(e: DragEvent): DDDraggable {\n    this.helper.classList.add('ui-draggable-dragging');\n    // TODO: set all at once with style.cssText += ... ? https://stackoverflow.com/questions/3968593\n    const style = this.helper.style;\n    style.pointerEvents = 'none'; // needed for over items to get enter/leave\n    // style.cursor = 'move'; //  TODO: can't set with pointerEvents=none ! (done in CSS as well)\n    style['min-width'] = 0; // since we no longer relative to our parent and we don't resize anyway (normally 100/#column %)\n    style.width = this.dragOffset.width + 'px';\n    style.height = this.dragOffset.height + 'px';\n    style.willChange = 'left, top';\n    style.position = 'fixed'; // let us drag between grids by not clipping as parent .grid-stack is position: 'relative'\n    this._dragFollow(e); // now position it\n    style.transition = 'none'; // show up instantly\n    setTimeout(() => {\n      if (this.helper) {\n        style.transition = null; // recover animation\n      }\n    }, 0);\n    return this;\n  }\n\n  /** @internal restore back the original style before dragging */\n  protected _removeHelperStyle(): DDDraggable {\n    this.helper.classList.remove('ui-draggable-dragging');\n    let node = (this.helper as GridItemHTMLElement)?.gridstackNode;\n    // don't bother restoring styles if we're gonna remove anyway...\n    if (this.dragElementOriginStyle && (!node || !node._isAboutToRemove)) {\n      let helper = this.helper;\n      // don't animate, otherwise we animate offseted when switching back to 'absolute' from 'fixed'\n      let transition = this.dragElementOriginStyle['transition'] || null;\n      helper.style.transition = this.dragElementOriginStyle['transition'] = 'none';\n      DDDraggable.originStyleProp.forEach(prop => helper.style[prop] = this.dragElementOriginStyle[prop] || null);\n      setTimeout(() => helper.style.transition = transition, 50); // recover animation from saved vars after a pause (0 isn't enough #1973)\n    }\n    delete this.dragElementOriginStyle;\n    return this;\n  }\n\n  /** @internal updates the top/left position to follow the mouse */\n  protected _dragFollow(e: DragEvent): void {\n    let containmentRect = { left: 0, top: 0 };\n    // if (this.helper.style.position === 'absolute') { // we use 'fixed'\n    //   const { left, top } = this.helperContainment.getBoundingClientRect();\n    //   containmentRect = { left, top };\n    // }\n    const style = this.helper.style;\n    const offset = this.dragOffset;\n    style.left = e.clientX + offset.offsetLeft - containmentRect.left + 'px';\n    style.top = e.clientY + offset.offsetTop - containmentRect.top + 'px';\n  }\n\n  /** @internal */\n  protected _setupHelperContainmentStyle(): DDDraggable {\n    this.helperContainment = this.helper.parentElement;\n    if (this.helper.style.position !== 'fixed') {\n      this.parentOriginStylePosition = this.helperContainment.style.position;\n      if (window.getComputedStyle(this.helperContainment).position.match(/static/)) {\n        this.helperContainment.style.position = 'relative';\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _getDragOffset(event: DragEvent, el: HTMLElement, parent: HTMLElement): DragOffset {\n\n    // in case ancestor has transform/perspective css properties that change the viewpoint\n    let xformOffsetX = 0;\n    let xformOffsetY = 0;\n    if (parent) {\n      const testEl = document.createElement('div');\n      Utils.addElStyles(testEl, {\n        opacity: '0',\n        position: 'fixed',\n        top: 0 + 'px',\n        left: 0 + 'px',\n        width: '1px',\n        height: '1px',\n        zIndex: '-999999',\n      });\n      parent.appendChild(testEl);\n      const testElPosition = testEl.getBoundingClientRect();\n      parent.removeChild(testEl);\n      xformOffsetX = testElPosition.left;\n      xformOffsetY = testElPosition.top;\n      // TODO: scale ?\n    }\n\n    const targetOffset = el.getBoundingClientRect();\n    return {\n      left: targetOffset.left,\n      top: targetOffset.top,\n      offsetLeft: - event.clientX + targetOffset.left - xformOffsetX,\n      offsetTop: - event.clientY + targetOffset.top - xformOffsetY,\n      width: targetOffset.width,\n      height: targetOffset.height\n    };\n  }\n\n  /** @internal TODO: set to public as called by DDDroppable! */\n  public ui(): DDUIData {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const offset = this.helper.getBoundingClientRect();\n    return {\n      position: { //Current CSS position of the helper as { top, left } object\n        top: offset.top - containmentRect.top,\n        left: offset.left - containmentRect.left\n      }\n      /* not used by GridStack for now...\n      helper: [this.helper], //The object arr representing the helper that's being dragged.\n      offset: { top: offset.top, left: offset.left } // Current offset position of the helper as { top, left } object.\n      */\n    };\n  }\n}\n","/**\n * dd-droppable.ts 7.1.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDManager } from './dd-manager';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDElementHost } from './dd-element';\nimport { isTouch, pointerenter, pointerleave } from './dd-touch';\n\nexport interface DDDroppableOpt {\n  accept?: string | ((el: HTMLElement) => boolean);\n  drop?: (event: DragEvent, ui) => void;\n  over?: (event: DragEvent, ui) => void;\n  out?: (event: DragEvent, ui) => void;\n}\n\n// let count = 0; // TEST\n\nexport class DDDroppable extends DDBaseImplement implements HTMLElementExtendOpt<DDDroppableOpt> {\n\n  public accept: (el: HTMLElement) => boolean;\n  public el: HTMLElement;\n  public option: DDDroppableOpt;\n\n  constructor(el: HTMLElement, opts: DDDroppableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseEnter = this._mouseEnter.bind(this);\n    this._mouseLeave = this._mouseLeave.bind(this);\n    this.enable();\n    this._setupAccept();\n  }\n\n  public on(event: 'drop' | 'dropover' | 'dropout', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'drop' | 'dropover' | 'dropout'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    if (this.disabled === false) return;\n    super.enable();\n    this.el.classList.add('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    this.el.addEventListener('mouseenter', this._mouseEnter);\n    this.el.addEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.addEventListener('pointerenter', pointerenter);\n      this.el.addEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public disable(forDestroy = false): void {\n    if (this.disabled === true) return;\n    super.disable();\n    this.el.classList.remove('ui-droppable');\n    if (!forDestroy) this.el.classList.add('ui-droppable-disabled');\n    this.el.removeEventListener('mouseenter', this._mouseEnter);\n    this.el.removeEventListener('mouseleave', this._mouseLeave);\n    if (isTouch) {\n      this.el.removeEventListener('pointerenter', pointerenter);\n      this.el.removeEventListener('pointerleave', pointerleave);\n    }\n  }\n\n  public destroy(): void {\n    this.disable(true);\n    this.el.classList.remove('ui-droppable');\n    this.el.classList.remove('ui-droppable-disabled');\n    super.destroy();\n  }\n\n  public updateOption(opts: DDDroppableOpt): DDDroppable {\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    this._setupAccept();\n    return this;\n  }\n\n  /** @internal called when the cursor enters our area - prepare for a possible drop and track leaving */\n  protected _mouseEnter(e: MouseEvent): void {\n    // console.log(`${count++} Enter ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement) return;\n    if (!this._canDrop(DDManager.dragElement.el)) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    // make sure when we enter this, that the last one gets a leave FIRST to correctly cleanup as we don't always do\n    if (DDManager.dropElement && DDManager.dropElement !== this) {\n      DDManager.dropElement._mouseLeave(e as DragEvent);\n    }\n    DDManager.dropElement = this;\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropover' });\n    if (this.option.over) {\n      this.option.over(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropover', ev);\n    this.el.classList.add('ui-droppable-over');\n    // console.log('tracking'); // TEST\n  }\n\n  /** @internal called when the item is leaving our area, stop tracking if we had moving item */\n  protected _mouseLeave(e: MouseEvent): void {\n    // console.log(`${count++} Leave ${this.el.id || (this.el as GridHTMLElement).gridstack.opts.id}`); // TEST\n    if (!DDManager.dragElement || DDManager.dropElement !== this) return;\n    e.preventDefault();\n    e.stopPropagation();\n\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'dropout' });\n    if (this.option.out) {\n      this.option.out(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('dropout', ev);\n\n    if (DDManager.dropElement === this) {\n      delete DDManager.dropElement;\n      // console.log('not tracking'); // TEST\n\n      // if we're still over a parent droppable, send it an enter as we don't get one from leaving nested children\n      let parentDrop: DDDroppable;\n      let parent: DDElementHost = this.el.parentElement;\n      while (!parentDrop && parent) {\n        parentDrop = parent.ddElement?.ddDroppable;\n        parent = parent.parentElement;\n      }\n      if (parentDrop) {\n        parentDrop._mouseEnter(e);\n      }\n    }\n  }\n\n  /** item is being dropped on us - called by the drag mouseup handler - this calls the client drop event */\n  public drop(e: MouseEvent): void {\n    e.preventDefault();\n    const ev = Utils.initEvent<DragEvent>(e, { target: this.el, type: 'drop' });\n    if (this.option.drop) {\n      this.option.drop(ev, this._ui(DDManager.dragElement))\n    }\n    this.triggerEvent('drop', ev);\n  }\n\n  /** @internal true if element matches the string/method accept option */\n  protected _canDrop(el: HTMLElement): boolean {\n    return el && (!this.accept || this.accept(el));\n  }\n\n  /** @internal */\n  protected _setupAccept(): DDDroppable {\n    if (!this.option.accept) return this;\n    if (typeof this.option.accept === 'string') {\n      this.accept = (el: HTMLElement) => el.matches(this.option.accept as string);\n    } else {\n      this.accept = this.option.accept;\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _ui(drag: DDDraggable) {\n    return {\n      draggable: drag.el,\n      ...drag.ui()\n    };\n  }\n}\n\n","/**\n * dd-elements.ts 7.1.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizable, DDResizableOpt } from './dd-resizable';\nimport { GridItemHTMLElement } from './types';\nimport { DDDraggable, DDDraggableOpt } from './dd-draggable';\nimport { DDDroppable, DDDroppableOpt } from './dd-droppable';\n\nexport interface DDElementHost extends GridItemHTMLElement {\n  ddElement?: DDElement;\n}\n\nexport class DDElement {\n\n  static init(el: DDElementHost): DDElement {\n    if (!el.ddElement) { el.ddElement = new DDElement(el); }\n    return el.ddElement;\n  }\n\n  public el: DDElementHost;\n  public ddDraggable?: DDDraggable;\n  public ddDroppable?: DDDroppable;\n  public ddResizable?: DDResizable;\n\n  constructor(el: DDElementHost) {\n    this.el = el;\n  }\n\n  public on(eventName: string, callback: (event: MouseEvent) => void): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.on(eventName as 'drag' | 'dragstart' | 'dragstop', callback);\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.on(eventName as 'drop' | 'dropover' | 'dropout', callback);\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.on(eventName as 'resizestart' | 'resize' | 'resizestop', callback);\n    }\n    return this;\n  }\n\n  public off(eventName: string): DDElement {\n    if (this.ddDraggable && ['drag', 'dragstart', 'dragstop'].indexOf(eventName) > -1) {\n      this.ddDraggable.off(eventName as 'drag' | 'dragstart' | 'dragstop');\n    } else if (this.ddDroppable && ['drop', 'dropover', 'dropout'].indexOf(eventName) > -1) {\n      this.ddDroppable.off(eventName as 'drop' | 'dropover' | 'dropout');\n    } else if (this.ddResizable && ['resizestart', 'resize', 'resizestop'].indexOf(eventName) > -1) {\n      this.ddResizable.off(eventName as 'resizestart' | 'resize' | 'resizestop');\n    }\n    return this;\n  }\n\n  public setupDraggable(opts: DDDraggableOpt): DDElement {\n    if (!this.ddDraggable) {\n      this.ddDraggable = new DDDraggable(this.el, opts);\n    } else {\n      this.ddDraggable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDraggable(): DDElement {\n    if (this.ddDraggable) {\n      this.ddDraggable.destroy();\n      delete this.ddDraggable;\n    }\n    return this;\n  }\n\n  public setupResizable(opts: DDResizableOpt): DDElement {\n    if (!this.ddResizable) {\n      this.ddResizable = new DDResizable(this.el, opts);\n    } else {\n      this.ddResizable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanResizable(): DDElement {\n    if (this.ddResizable) {\n      this.ddResizable.destroy();\n      delete this.ddResizable;\n    }\n    return this;\n  }\n\n  public setupDroppable(opts: DDDroppableOpt): DDElement {\n    if (!this.ddDroppable) {\n      this.ddDroppable = new DDDroppable(this.el, opts);\n    } else {\n      this.ddDroppable.updateOption(opts);\n    }\n    return this;\n  }\n\n  public cleanDroppable(): DDElement {\n    if (this.ddDroppable) {\n      this.ddDroppable.destroy();\n      delete this.ddDroppable;\n    }\n    return this;\n  }\n}\n","/**\r\n * dd-gridstack.ts 7.1.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\n/* eslint-disable @typescript-eslint/no-unused-vars */\r\nimport { GridItemHTMLElement, GridStackNode, GridStackElement, DDUIData, DDDragInOpt, GridStackPosition, dragInDefaultOptions, GridStackOptions } from './types';\r\nimport { GridStack } from './gridstack';\r\nimport { Utils } from './utils';\r\nimport { DDManager } from './dd-manager';\r\nimport { DDElement, DDElementHost } from './dd-element';\r\n\r\n/** Drag&Drop drop options */\r\nexport type DDDropOpt = {\r\n  /** function or class type that this grid will accept as dropped items (see GridStackOptions.acceptWidgets) */\r\n  accept?: (el: GridItemHTMLElement) => boolean;\r\n}\r\n\r\n/** drag&drop options currently called from the main code, but others can be passed in grid options */\r\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nexport type DDOpts = 'enable' | 'disable' | 'destroy' | 'option' | string | any;\r\nexport type DDKey = 'minWidth' | 'minHeight' | 'maxWidth' | 'maxHeight';\r\nexport type DDValue = number | string;\r\n\r\n/** drag&drop events callbacks */\r\nexport type DDCallback = (event: Event, arg2: GridItemHTMLElement, helper?: GridItemHTMLElement) => void;\r\n\r\n// let count = 0; // TEST\r\n\r\n/**\r\n * HTML Native Mouse and Touch Events Drag and Drop functionality.\r\n */\r\nexport class DDGridStack {\r\n\r\n  /** get the global (but static to this code) DD implementation */\r\n  static get(): DDGridStack {\r\n    return dd;\r\n  }\r\n\r\n  public resizable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddResizable && dEl.ddResizable[opts](); // can't create DD as it requires options for setupResizable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddResizable && dEl.cleanResizable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupResizable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        let handles = dEl.el.getAttribute('gs-resize-handles') ? dEl.el.getAttribute('gs-resize-handles') : grid.opts.resizable.handles;\r\n        let autoHide = !grid.opts.alwaysShowResizeHandle;\r\n        dEl.setupResizable({\r\n          ...grid.opts.resizable,\r\n          ...{ handles, autoHide },\r\n          ...{\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            resize: opts.resize\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public draggable(el: GridItemHTMLElement, opts: DDOpts, key?: DDKey, value?: DDValue): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDraggable && dEl.ddDraggable[opts](); // can't create DD as it requires options for setupDraggable()\r\n      } else if (opts === 'destroy') {\r\n        dEl.ddDraggable && dEl.cleanDraggable();\r\n      } else if (opts === 'option') {\r\n        dEl.setupDraggable({ [key]: value });\r\n      } else {\r\n        const grid = dEl.el.gridstackNode.grid;\r\n        dEl.setupDraggable({\r\n          ...grid.opts.draggable,\r\n          ...{\r\n            // containment: (grid.parentGridItem && !grid.opts.dragOut) ? grid.el.parentElement : (grid.opts.draggable.containment || null),\r\n            start: opts.start,\r\n            stop: opts.stop,\r\n            drag: opts.drag\r\n          }\r\n        });\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  public dragIn(el: GridStackElement, opts: DDDragInOpt): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.setupDraggable(opts));\r\n    return this;\r\n  }\r\n\r\n  public droppable(el: GridItemHTMLElement, opts: DDOpts | DDDropOpt, key?: DDKey, value?: DDValue): DDGridStack {\r\n    if (typeof opts.accept === 'function' && !opts._accept) {\r\n      opts._accept = opts.accept;\r\n      opts.accept = (el) => opts._accept(el);\r\n    }\r\n    this._getDDElements(el).forEach(dEl => {\r\n      if (opts === 'disable' || opts === 'enable') {\r\n        dEl.ddDroppable && dEl.ddDroppable[opts]();\r\n      } else if (opts === 'destroy') {\r\n        if (dEl.ddDroppable) { // error to call destroy if not there\r\n          dEl.cleanDroppable();\r\n        }\r\n      } else if (opts === 'option') {\r\n        dEl.setupDroppable({ [key]: value });\r\n      } else {\r\n        dEl.setupDroppable(opts);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /** true if element is droppable */\r\n  public isDroppable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDroppable && !el.ddElement.ddDroppable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isDraggable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddDraggable && !el.ddElement.ddDraggable.disabled);\r\n  }\r\n\r\n  /** true if element is draggable */\r\n  public isResizable(el: DDElementHost): boolean {\r\n    return !!(el && el.ddElement && el.ddElement.ddResizable && !el.ddElement.ddResizable.disabled);\r\n  }\r\n\r\n  public on(el: GridItemHTMLElement, name: string, callback: DDCallback): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl =>\r\n      dEl.on(name, (event: Event) => {\r\n        callback(\r\n          event,\r\n          DDManager.dragElement ? DDManager.dragElement.el : event.target as GridItemHTMLElement,\r\n          DDManager.dragElement ? DDManager.dragElement.helper : null)\r\n      })\r\n    );\r\n    return this;\r\n  }\r\n\r\n  public off(el: GridItemHTMLElement, name: string): DDGridStack {\r\n    this._getDDElements(el).forEach(dEl => dEl.off(name));\r\n    return this;\r\n  }\r\n\r\n  /** @internal returns a list of DD elements, creating them on the fly by default */\r\n  protected _getDDElements(els: GridStackElement, create = true): DDElement[] {\r\n    let hosts = Utils.getElements(els) as DDElementHost[];\r\n    if (!hosts.length) return [];\r\n    let list = hosts.map(e => e.ddElement || (create ? DDElement.init(e) : null));\r\n    if (!create) { list.filter(d => d); } // remove nulls\r\n    return list;\r\n  }\r\n}\r\n\r\n/** global instance */\r\nconst dd = new DDGridStack;\r\n\r\n/********************************************************************************\r\n * GridStack code that is doing drag&drop extracted here so main class is smaller\r\n * for static grid that don't do any of this work anyway. Saves about 31k (41k -> 72k)\r\n * https://www.typescriptlang.org/docs/handbook/declaration-merging.html\r\n * https://www.typescriptlang.org/docs/handbook/mixins.html\r\n ********************************************************************************/\r\n\r\n/** @internal called to add drag over to support widgets being added externally */\r\nGridStack.prototype._setupAcceptWidget = function(this: GridStack): GridStack {\r\n\r\n  // check if we need to disable things\r\n  if (this.opts.staticGrid || (!this.opts.acceptWidgets && !this.opts.removable)) {\r\n    dd.droppable(this.el, 'destroy');\r\n    return this;\r\n  }\r\n\r\n  // vars shared across all methods\r\n  let cellHeight: number, cellWidth: number;\r\n\r\n  let onDrag = (event: DragEvent, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n\r\n    helper = helper || el;\r\n    let parent = this.el.getBoundingClientRect();\r\n    let {top, left} = helper.getBoundingClientRect();\r\n    left -= parent.left;\r\n    top -= parent.top;\r\n    let ui: DDUIData = {position: {top, left}};\r\n\r\n    if (node._temporaryRemoved) {\r\n      node.x = Math.max(0, Math.round(left / cellWidth));\r\n      node.y = Math.max(0, Math.round(top / cellHeight));\r\n      delete node.autoPosition;\r\n      this.engine.nodeBoundFix(node);\r\n\r\n      // don't accept *initial* location if doesn't fit #1419 (locked drop region, or can't grow), but maybe try if it will go somewhere\r\n      if (!this.engine.willItFit(node)) {\r\n        node.autoPosition = true; // ignore x,y and try for any slot...\r\n        if (!this.engine.willItFit(node)) {\r\n          dd.off(el, 'drag'); // stop calling us\r\n          return; // full grid or can't grow\r\n        }\r\n        if (node._willFitPos) {\r\n          // use the auto position instead #1687\r\n          Utils.copyPos(node, node._willFitPos);\r\n          delete node._willFitPos;\r\n        }\r\n      }\r\n\r\n      // re-use the existing node dragging method\r\n      this._onStartMoving(helper, event, ui, node, cellWidth, cellHeight);\r\n    } else {\r\n      // re-use the existing node dragging that does so much of the collision detection\r\n      this._dragOrResize(helper, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n  }\r\n\r\n  dd.droppable(this.el, {\r\n    accept: (el: GridItemHTMLElement) => {\r\n      let node: GridStackNode = el.gridstackNode;\r\n      // set accept drop to true on ourself (which we ignore) so we don't get \"can't drop\" icon in HTML5 mode while moving\r\n      if (node?.grid === this) return true;\r\n      if (!this.opts.acceptWidgets) return false;\r\n      // check for accept method or class matching\r\n      let canAccept = true;\r\n      if (typeof this.opts.acceptWidgets === 'function') {\r\n        canAccept = this.opts.acceptWidgets(el);\r\n      } else {\r\n        let selector = (this.opts.acceptWidgets === true ? '.grid-stack-item' : this.opts.acceptWidgets as string);\r\n        canAccept = el.matches(selector);\r\n      }\r\n      // finally check to make sure we actually have space left #1571\r\n      if (canAccept && node && this.opts.maxRow) {\r\n        let n = {w: node.w, h: node.h, minW: node.minW, minH: node.minH}; // only width/height matters and autoPosition\r\n        canAccept = this.engine.willItFit(n);\r\n      }\r\n      return canAccept;\r\n    }\r\n  })\r\n  /**\r\n   * entering our grid area\r\n   */\r\n    .on(this.el, 'dropover', (event: Event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    // console.log(`over ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n      let node = el.gridstackNode;\r\n      // ignore drop enter on ourself (unless we temporarily removed) which happens on a simple drag of our item\r\n      if (node?.grid === this && !node._temporaryRemoved) {\r\n      // delete node._added; // reset this to track placeholder again in case we were over other grid #1484 (dropout doesn't always clear)\r\n        return false; // prevent parent from receiving msg (which may be a grid as well)\r\n      }\r\n\r\n      // fix #1578 when dragging fast, we may not get a leave on the previous grid so force one now\r\n      if (node?.grid && node.grid !== this && !node._temporaryRemoved) {\r\n      // console.log('dropover without leave'); // TEST\r\n        let otherGrid = node.grid;\r\n        otherGrid._leave(el, helper);\r\n      }\r\n\r\n      // cache cell dimensions (which don't change), position can animate if we removed an item in otherGrid that affects us...\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true);\r\n\r\n      // load any element attributes if we don't have a node\r\n      if (!node) {// @ts-ignore private read only on ourself\r\n        node = this._readAttr(el);\r\n      }\r\n      if (!node.grid) {\r\n        node._isExternal = true;\r\n        el.gridstackNode = node;\r\n      }\r\n\r\n      // calculate the grid size based on element outer size\r\n      helper = helper || el;\r\n      let w = node.w || Math.round(helper.offsetWidth / cellWidth) || 1;\r\n      let h = node.h || Math.round(helper.offsetHeight / cellHeight) || 1;\r\n\r\n      // if the item came from another grid, make a copy and save the original info in case we go back there\r\n      if (node.grid && node.grid !== this) {\r\n      // copy the node original values (min/max/id/etc...) but override width/height/other flags which are this grid specific\r\n      // console.log('dropover cloning node'); // TEST\r\n        if (!el._gridstackNodeOrig) el._gridstackNodeOrig = node; // shouldn't have multiple nested!\r\n        el.gridstackNode = node = {...node, w, h, grid: this};\r\n        this.engine.cleanupNode(node)\r\n          .nodeBoundFix(node);\r\n        // restore some internal fields we need after clearing them all\r\n        node._initDD =\r\n      node._isExternal =  // DOM needs to be re-parented on a drop\r\n      node._temporaryRemoved = true; // so it can be inserted onDrag below\r\n      } else {\r\n        node.w = w; node.h = h;\r\n        node._temporaryRemoved = true; // so we can insert it\r\n      }\r\n\r\n      // clear any marked for complete removal (Note: don't check _isAboutToRemove as that is cleared above - just do it)\r\n      _itemRemoving(node.el, false);\r\n\r\n      dd.on(el, 'drag', onDrag);\r\n      // make sure this is called at least once when going fast #1578\r\n      onDrag(event as DragEvent, el, helper);\r\n      return false; // prevent parent from receiving msg (which may be a grid as well)\r\n    })\r\n  /**\r\n   * Leaving our grid area...\r\n   */\r\n    .on(this.el, 'dropout', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n    // console.log(`out ${this.el.gridstack.opts.id} ${count++}`); // TEST\r\n      let node = el.gridstackNode;\r\n      if (!node) return false;\r\n      // fix #1578 when dragging fast, we might get leave after other grid gets enter (which calls us to clean)\r\n      // so skip this one if we're not the active grid really..\r\n      if (!node.grid || node.grid === this) {\r\n        this._leave(el, helper);\r\n        // if we were created as temporary nested grid, go back to before state\r\n        if (this._isTemp) {\r\n          this.removeAsSubGrid(node);\r\n        }\r\n      }\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    })\r\n  /**\r\n   * end - releasing the mouse\r\n   */\r\n    .on(this.el, 'drop', (event, el: GridItemHTMLElement, helper: GridItemHTMLElement) => {\r\n      let node = el.gridstackNode;\r\n      // ignore drop on ourself from ourself that didn't come from the outside - dragend will handle the simple move instead\r\n      if (node?.grid === this && !node._isExternal) return false;\r\n\r\n      let wasAdded = !!this.placeholder.parentElement; // skip items not actually added to us because of constrains, but do cleanup #1419\r\n      this.placeholder.remove();\r\n\r\n      // notify previous grid of removal\r\n      // console.log('drop delete _gridstackNodeOrig') // TEST\r\n      let origNode = el._gridstackNodeOrig;\r\n      delete el._gridstackNodeOrig;\r\n      if (wasAdded && origNode?.grid && origNode.grid !== this) {\r\n        let oGrid = origNode.grid;\r\n        oGrid.engine.removedNodes.push(origNode);\r\n        oGrid._triggerRemoveEvent();\r\n        // if it's an empty sub-grid, to get auto-created, nuke it\r\n        if (oGrid.parentGridItem && !oGrid.engine.nodes.length && oGrid.opts.subGridDynamic) {\r\n          oGrid.removeAsSubGrid();\r\n        }\r\n      }\r\n\r\n      if (!node) return false;\r\n\r\n      // use existing placeholder node as it's already in our list with drop location\r\n      if (wasAdded) {\r\n        this.engine.cleanupNode(node); // removes all internal _xyz values\r\n        node.grid = this;\r\n      }\r\n      dd.off(el, 'drag');\r\n      // if we made a copy ('helper' which is temp) of the original node then insert a copy, else we move the original node (#1102)\r\n      // as the helper will be nuked by jquery-ui otherwise\r\n      if (helper !== el) {\r\n        helper.remove();\r\n        el.gridstackNode = origNode; // original item (left behind) is re-stored to pre dragging as the node now has drop info\r\n        if (wasAdded) {\r\n          el = el.cloneNode(true) as GridItemHTMLElement;\r\n        }\r\n      } else {\r\n        el.remove(); // reduce flicker as we change depth here, and size further down\r\n        this._removeDD(el);\r\n      }\r\n      if (!wasAdded) return false;\r\n      el.gridstackNode = node;\r\n      node.el = el;\r\n      let subGrid = (node.subGrid as GridStack)?.el?.gridstack; // set when actual sub-grid present\r\n      // @ts-ignore\r\n      Utils.copyPos(node, this._readAttr(this.placeholder)); // placeholder values as moving VERY fast can throw things off #1578\r\n      Utils.removePositioningStyles(el);// @ts-ignore\r\n      this._writeAttr(el, node);\r\n      this.el.appendChild(el);// @ts-ignore // TODO: now would be ideal time to _removeHelperStyle() overriding floating styles (native only)\r\n      if (subGrid) {\r\n        subGrid.parentGridItem = node;\r\n        if (!subGrid.opts.styleInHead) subGrid._updateStyles(true); // re-create sub-grid styles now that we've moved\r\n      }\r\n      this._updateContainerHeight();\r\n      this.engine.addedNodes.push(node);// @ts-ignore\r\n      this._triggerAddEvent();// @ts-ignore\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n      if (this._gsEventHandler['dropped']) {\r\n        this._gsEventHandler['dropped']({...event, type: 'dropped'}, origNode && origNode.grid ? origNode : undefined, node);\r\n      }\r\n\r\n      // wait till we return out of the drag callback to set the new drag&resize handler or they may get messed up\r\n      window.setTimeout(() => {\r\n      // IFF we are still there (some application will use as placeholder and insert their real widget instead and better call makeWidget())\r\n        if (node.el && node.el.parentElement) {\r\n          this._prepareDragDropByNode(node);\r\n        } else {\r\n          this.engine.removeNode(node);\r\n        }\r\n        delete node.grid._isTemp;\r\n      });\r\n\r\n      return false; // prevent parent from receiving msg (which may be grid as well)\r\n    });\r\n  return this;\r\n}\r\n\r\n/** @internal mark item for removal */\r\nfunction _itemRemoving(el: GridItemHTMLElement, remove: boolean) {\r\n  let node = el ? el.gridstackNode : undefined;\r\n  if (!node || !node.grid) return;\r\n  remove ? node._isAboutToRemove = true : delete node._isAboutToRemove;\r\n  remove ? el.classList.add('grid-stack-item-removing') : el.classList.remove('grid-stack-item-removing');\r\n}\r\n\r\n/** @internal called to setup a trash drop zone if the user specifies it */\r\nGridStack.prototype._setupRemoveDrop = function(this: GridStack): GridStack {\r\n  if (!this.opts.staticGrid && typeof this.opts.removable === 'string') {\r\n    let trashEl = document.querySelector(this.opts.removable) as HTMLElement;\r\n    if (!trashEl) return this;\r\n    // only register ONE drop-over/dropout callback for the 'trash', and it will\r\n    // update the passed in item and parent grid because the 'trash' is a shared resource anyway,\r\n    // and Native DD only has 1 event CB (having a list and technically a per grid removableOptions complicates things greatly)\r\n    if (!dd.isDroppable(trashEl)) {\r\n      dd.droppable(trashEl, this.opts.removableOptions)\r\n        .on(trashEl, 'dropover', (event, el) => _itemRemoving(el, true))\r\n        .on(trashEl, 'dropout',  (event, el) => _itemRemoving(el, false));\r\n    }\r\n  }\r\n  return this;\r\n}\r\n\r\n/**\r\n * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\r\n * is dynamically create and needs to change later.\r\n **/\r\nGridStack.setupDragIn = function(this: GridStack, dragIn?: string, dragInOptions?: DDDragInOpt) {\r\n  if (dragInOptions?.pause !== undefined) {\r\n    DDManager.pauseDrag = dragInOptions.pause;\r\n  }\r\n\r\n  if (typeof dragIn === 'string') {\r\n    dragInOptions = {...dragInDefaultOptions, ...(dragInOptions || {})};\r\n    Utils.getElements(dragIn).forEach(el => {\r\n      if (!dd.isDraggable(el)) dd.dragIn(el, dragInOptions);\r\n    });\r\n  }\r\n}\r\n\r\n/** @internal prepares the element for drag&drop **/\r\nGridStack.prototype._prepareDragDropByNode = function(this: GridStack, node: GridStackNode): GridStack {\r\n  let el = node.el;\r\n  const noMove = node.noMove || this.opts.disableDrag;\r\n  const noResize = node.noResize || this.opts.disableResize;\r\n\r\n  // check for disabled grid first\r\n  if (this.opts.staticGrid || (noMove && noResize)) {\r\n    if (node._initDD) {\r\n      this._removeDD(el); // nukes everything instead of just disable, will add some styles back next\r\n      delete node._initDD;\r\n    }\r\n    el.classList.add('ui-draggable-disabled', 'ui-resizable-disabled'); // add styles one might depend on #1435\r\n    return this;\r\n  }\r\n\r\n  if (!node._initDD) {\r\n    // variables used/cashed between the 3 start/move/end methods, in addition to node passed above\r\n    let cellWidth: number;\r\n    let cellHeight: number;\r\n\r\n    /** called when item starts moving/resizing */\r\n    let onStartMoving = (event: Event, ui: DDUIData) => {\r\n      // trigger any 'dragstart' / 'resizestart' manually\r\n      if (this._gsEventHandler[event.type]) {\r\n        this._gsEventHandler[event.type](event, event.target);\r\n      }\r\n      cellWidth = this.cellWidth();\r\n      cellHeight = this.getCellHeight(true); // force pixels for calculations\r\n\r\n      this._onStartMoving(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when item is being dragged/resized */\r\n    let dragOrResize = (event: Event, ui: DDUIData) => {\r\n      this._dragOrResize(el, event, ui, node, cellWidth, cellHeight);\r\n    }\r\n\r\n    /** called when the item stops moving/resizing */\r\n    let onEndMoving = (event: Event) => {\r\n      this.placeholder.remove();\r\n      delete node._moving;\r\n      delete node._event;\r\n      delete node._lastTried;\r\n\r\n      // if the item has moved to another grid, we're done here\r\n      let target: GridItemHTMLElement = event.target as GridItemHTMLElement;\r\n      if (!target.gridstackNode || target.gridstackNode.grid !== this) return;\r\n\r\n      node.el = target;\r\n\r\n      if (node._isAboutToRemove) {\r\n        let gridToNotify = el.gridstackNode.grid;\r\n        if (gridToNotify._gsEventHandler[event.type]) {\r\n          gridToNotify._gsEventHandler[event.type](event, target);\r\n        }\r\n        this._removeDD(el);\r\n        gridToNotify.engine.removedNodes.push(node);\r\n        gridToNotify._triggerRemoveEvent();\r\n        // break circular links and remove DOM\r\n        delete el.gridstackNode;\r\n        delete node.el;\r\n        el.remove();\r\n      } else {\r\n        Utils.removePositioningStyles(target);\r\n        if (node._temporaryRemoved) {\r\n          // got removed - restore item back to before dragging position\r\n          Utils.copyPos(node, node._orig);// @ts-ignore\r\n          this._writePosAttr(target, node);\r\n          this.engine.addNode(node);\r\n        } else {\r\n          // move to new placeholder location\r\n          this._writePosAttr(target, node);\r\n        }\r\n        if (this._gsEventHandler[event.type]) {\r\n          this._gsEventHandler[event.type](event, target);\r\n        }\r\n      }\r\n      // @ts-ignore\r\n      this._extraDragRow = 0;// @ts-ignore\r\n      this._updateContainerHeight();// @ts-ignore\r\n      this._triggerChangeEvent();\r\n\r\n      this.engine.endUpdate();\r\n    }\r\n\r\n    dd.draggable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      drag: dragOrResize\r\n    }).resizable(el, {\r\n      start: onStartMoving,\r\n      stop: onEndMoving,\r\n      resize: dragOrResize\r\n    });\r\n    node._initDD = true; // we've set DD support now\r\n  }\r\n\r\n  // finally fine tune move vs resize by disabling any part...\r\n  dd.draggable(el, noMove ? 'disable' : 'enable')\r\n    .resizable(el, noResize ? 'disable' : 'enable');\r\n\r\n  return this;\r\n}\r\n\r\n/** @internal called when item is starting a drag/resize */\r\nGridStack.prototype._onStartMoving = function(this: GridStack, el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number) {\r\n  this.engine.cleanNodes()\r\n    .beginUpdate(node);\r\n  // @ts-ignore\r\n  this._writePosAttr(this.placeholder, node)\r\n  this.el.appendChild(this.placeholder);\r\n  // console.log('_onStartMoving placeholder') // TEST\r\n\r\n  node.el = this.placeholder;\r\n  node._lastUiPosition = ui.position;\r\n  node._prevYPix = ui.position.top;\r\n  node._moving = (event.type === 'dragstart'); // 'dropover' are not initially moving so they can go exactly where they enter (will push stuff out of the way)\r\n  delete node._lastTried;\r\n\r\n  if (event.type === 'dropover' && node._temporaryRemoved) {\r\n    // console.log('engine.addNode x=' + node.x); // TEST\r\n    this.engine.addNode(node); // will add, fix collisions, update attr and clear _temporaryRemoved\r\n    node._moving = true; // AFTER, mark as moving object (wanted fix location before)\r\n  }\r\n\r\n  // set the min/max resize info\r\n  this.engine.cacheRects(cellWidth, cellHeight, this.opts.marginTop as number, this.opts.marginRight as number, this.opts.marginBottom as number, this.opts.marginLeft as number);\r\n  if (event.type === 'resizestart') {\r\n    dd.resizable(el, 'option', 'minWidth', cellWidth * (node.minW || 1))\r\n      .resizable(el, 'option', 'minHeight', cellHeight * (node.minH || 1));\r\n    if (node.maxW) { dd.resizable(el, 'option', 'maxWidth', cellWidth * node.maxW); }\r\n    if (node.maxH) { dd.resizable(el, 'option', 'maxHeight', cellHeight * node.maxH); }\r\n  }\r\n}\r\n\r\n/** @internal called when item leaving our area by either cursor dropout event\r\n * or shape is outside our boundaries. remove it from us, and mark temporary if this was\r\n * our item to start with else restore prev node values from prev grid it came from.\r\n **/\r\nGridStack.prototype._leave = function(this: GridStack, el: GridItemHTMLElement, helper?: GridItemHTMLElement)  {\r\n  let node = el.gridstackNode;\r\n  if (!node) return;\r\n\r\n  dd.off(el, 'drag'); // no need to track while being outside\r\n\r\n  // this gets called when cursor leaves and shape is outside, so only do this once\r\n  if (node._temporaryRemoved) return;\r\n  node._temporaryRemoved = true;\r\n\r\n  this.engine.removeNode(node); // remove placeholder as well, otherwise it's a sign node is not in our list, which is a bigger issue\r\n  node.el = node._isExternal && helper ? helper : el; // point back to real item being dragged\r\n\r\n  if (this.opts.removable === true) { // boolean vs a class string\r\n    // item leaving us and we are supposed to remove on leave (no need to drag onto trash) mark it so\r\n    _itemRemoving(el, true);\r\n  }\r\n\r\n  // finally if item originally came from another grid, but left us, restore things back to prev info\r\n  if (el._gridstackNodeOrig) {\r\n    // console.log('leave delete _gridstackNodeOrig') // TEST\r\n    el.gridstackNode = el._gridstackNodeOrig;\r\n    delete el._gridstackNodeOrig;\r\n  } else if (node._isExternal) {\r\n    // item came from outside (like a toolbar) so nuke any node info\r\n    delete node.el;\r\n    delete el.gridstackNode;\r\n    // and restore all nodes back to original\r\n    this.engine.restoreInitial();\r\n  }\r\n}\r\n\r\n/** @internal called when item is being dragged/resized */\r\nGridStack.prototype._dragOrResize = function(this: GridStack, el: GridItemHTMLElement, event: MouseEvent, ui: DDUIData,\r\n  node: GridStackNode, cellWidth: number, cellHeight: number)  {\r\n  let p = {...node._orig}; // could be undefined (_isExternal) which is ok (drag only set x,y and w,h will default to node value)\r\n  let resizing: boolean;\r\n  let mLeft = this.opts.marginLeft as number,\r\n    mRight = this.opts.marginRight as number,\r\n    mTop = this.opts.marginTop as number,\r\n    mBottom = this.opts.marginBottom as number;\r\n\r\n  // if margins (which are used to pass mid point by) are large relative to cell height/width, reduce them down #1855\r\n  let mHeight = Math.round(cellHeight * 0.1),\r\n    mWidth = Math.round(cellWidth * 0.1);\r\n  mLeft = Math.min(mLeft, mWidth);\r\n  mRight = Math.min(mRight, mWidth);\r\n  mTop = Math.min(mTop, mHeight);\r\n  mBottom = Math.min(mBottom, mHeight);\r\n\r\n  if (event.type === 'drag') {\r\n    if (node._temporaryRemoved) return; // handled by dropover\r\n    let distance = ui.position.top - node._prevYPix;\r\n    node._prevYPix = ui.position.top;\r\n    Utils.updateScrollPosition(el, ui.position, distance);\r\n\r\n    // get new position taking into account the margin in the direction we are moving! (need to pass mid point by margin)\r\n    let left = ui.position.left + (ui.position.left > node._lastUiPosition.left  ? -mRight : mLeft);\r\n    let top = ui.position.top + (ui.position.top > node._lastUiPosition.top  ? -mBottom : mTop);\r\n    p.x = Math.round(left / cellWidth);\r\n    p.y = Math.round(top / cellHeight);\r\n\r\n    // @ts-ignore// if we're at the bottom hitting something else, grow the grid so cursor doesn't leave when trying to place below others\r\n    let prev = this._extraDragRow;\r\n    if (this.engine.collide(node, p)) {\r\n      let row = this.getRow();\r\n      let extra = Math.max(0, (p.y + node.h) - row);\r\n      if (this.opts.maxRow && row + extra > this.opts.maxRow) {\r\n        extra = Math.max(0, this.opts.maxRow - row);\r\n      }// @ts-ignore\r\n      this._extraDragRow = extra;// @ts-ignore\r\n    } else this._extraDragRow = 0;// @ts-ignore\r\n    if (this._extraDragRow !== prev) this._updateContainerHeight();\r\n\r\n    if (node.x === p.x && node.y === p.y) return; // skip same\r\n    // DON'T skip one we tried as we might have failed because of coverage <50% before\r\n    // if (node._lastTried && node._lastTried.x === x && node._lastTried.y === y) return;\r\n  } else if (event.type === 'resize')  {\r\n    if (p.x < 0) return;\r\n    // Scrolling page if needed\r\n    Utils.updateScrollResize(event, el, cellHeight);\r\n\r\n    // get new size\r\n    p.w = Math.round((ui.size.width - mLeft) / cellWidth);\r\n    p.h = Math.round((ui.size.height - mTop) / cellHeight);\r\n    if (node.w === p.w && node.h === p.h) return;\r\n    if (node._lastTried && node._lastTried.w === p.w && node._lastTried.h === p.h) return; // skip one we tried (but failed)\r\n\r\n    // if we size on left/top side this might move us, so get possible new position as well\r\n    let left = ui.position.left + mLeft;\r\n    let top = ui.position.top + mTop;\r\n    p.x = Math.round(left / cellWidth);\r\n    p.y = Math.round(top / cellHeight);\r\n\r\n    resizing = true;\r\n  }\r\n\r\n  node._event = event;\r\n  node._lastTried = p; // set as last tried (will nuke if we go there)\r\n  let rect: GridStackPosition = { // screen pix of the dragged box\r\n    x: ui.position.left + mLeft,\r\n    y: ui.position.top + mTop,\r\n    w: (ui.size ? ui.size.width : node.w * cellWidth) - mLeft - mRight,\r\n    h: (ui.size ? ui.size.height : node.h * cellHeight) - mTop - mBottom\r\n  };\r\n  if (this.engine.moveNodeCheck(node, {...p, cellWidth, cellHeight, rect, resizing})) {\r\n    node._lastUiPosition = ui.position;\r\n    this.engine.cacheRects(cellWidth, cellHeight, mTop, mRight, mBottom, mLeft);\r\n    delete node._skipDown;\r\n    if (resizing && node.subGrid) { (node.subGrid as GridStack).onParentResize(); }// @ts-ignore\r\n    this._extraDragRow = 0;// @ts-ignore\r\n    this._updateContainerHeight();\r\n\r\n    let target = event.target as GridItemHTMLElement;// @ts-ignore\r\n    this._writePosAttr(target, node);\r\n    if (this._gsEventHandler[event.type]) {\r\n      this._gsEventHandler[event.type](event, target);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Enables/Disables moving.\r\n * @param els widget or selector to modify.\r\n * @param val if true widget will be draggable.\r\n */\r\nGridStack.prototype.movable = function(this: GridStack, els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n    if (val) delete node.noMove; else node.noMove = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n/**\r\n * Enables/Disables resizing.\r\n * @param els  widget or selector to modify\r\n * @param val  if true widget will be resizable.\r\n */\r\nGridStack.prototype.resizable = function(this: GridStack, els: GridStackElement, val: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't resize a static grid!\r\n  GridStack.getElements(els).forEach(el => {\r\n    let node = el.gridstackNode;\r\n    if (!node) return;\r\n    if (val) delete node.noResize; else node.noResize = true;\r\n    this._prepareDragDropByNode(node); // init DD if need be, and adjust\r\n  });\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Temporarily disables widgets moving/resizing.\r\n  * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n  * Note: no-op for static grid\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(false);\r\n  *  grid.enableResize(false);\r\n  */\r\nGridStack.prototype.disable = function(this: GridStack): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(false);\r\n  this.enableResize(false);// @ts-ignore\r\n  this._triggerEvent('disable');\r\n  return this;\r\n}\r\n\r\n/**\r\n  * Re-enables widgets moving/resizing - see disable().\r\n  * Note: no-op for static grid.\r\n  * This is a shortcut for:\r\n  * @example\r\n  *  grid.enableMove(true);\r\n  *  grid.enableResize(true);\r\n  */\r\nGridStack.prototype.enable = function(this: GridStack): GridStack {\r\n  if (this.opts.staticGrid) return;\r\n  this.enableMove(true);\r\n  this.enableResize(true);// @ts-ignore\r\n  this._triggerEvent('enable');\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget moving. No-op for static grids. */\r\nGridStack.prototype.enableMove = function(this: GridStack, doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't move a static grid!\r\n  this.opts.disableDrag = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.movable(n.el, doEnable));\r\n  return this;\r\n}\r\n\r\n/** Enables/disables widget resizing. No-op for static grids. */\r\nGridStack.prototype.enableResize = function(this: GridStack, doEnable: boolean): GridStack {\r\n  if (this.opts.staticGrid) return this; // can't size a static grid!\r\n  this.opts.disableResize = !doEnable; // FIRST before we update children as grid overrides #1658\r\n  this.engine.nodes.forEach(n => this.resizable(n.el, doEnable));\r\n  return this;\r\n}\r\n\r\n/** removes any drag&drop present (called during destroy) */\r\nGridStack.prototype._removeDD = function(this: GridStack, el: DDElementHost): GridStack {\r\n  dd.draggable(el, 'destroy').resizable(el, 'destroy');\r\n  if (el.gridstackNode) {\r\n    delete el.gridstackNode._initDD; // reset our DD init flag\r\n  }\r\n  delete el.ddElement;\r\n  return this;\r\n}\r\n\r\n","/**\n * dd-manager.ts 7.1.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDDraggable } from './dd-draggable';\nimport { DDDroppable } from './dd-droppable';\nimport { DDResizable } from './dd-resizable';\n\n/**\n * globals that are shared across Drag & Drop instances\n */\nexport class DDManager {\n  /** if set (true | in msec), dragging placement (collision) will only happen after a pause by the user*/\n  public static pauseDrag: boolean | number;\n\n  /** true if a mouse down event was handled */\n  public static mouseHandled: boolean;\n\n  /** item being dragged */\n  public static dragElement: DDDraggable;\n\n  /** item we are currently over as drop target */\n  public static dropElement: DDDroppable;\n\n  /** current item we're over for resizing purpose (ignore nested grid resize handles) */\n  public static overResizeElement: DDResizable;\n\n}\n","/**\n * dd-resizable-handle.ts 7.1.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { isTouch, pointerdown, touchend, touchmove, touchstart } from './dd-touch';\n\nexport interface DDResizableHandleOpt {\n  start?: (event) => void;\n  move?: (event) => void;\n  stop?: (event) => void;\n}\n\nexport class DDResizableHandle {\n  /** @internal */\n  protected el: HTMLElement;\n  /** @internal */\n  protected host: HTMLElement;\n  /** @internal */\n  protected option: DDResizableHandleOpt;\n  /** @internal */\n  protected dir: string;\n  /** @internal true after we've moved enough pixels to start a resize */\n  protected moving = false;\n  /** @internal */\n  protected mouseDownEvent: MouseEvent;\n  /** @internal */\n  protected static prefix = 'ui-resizable-';\n\n  constructor(host: HTMLElement, direction: string, option: DDResizableHandleOpt) {\n    this.host = host;\n    this.dir = direction;\n    this.option = option;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseDown = this._mouseDown.bind(this);\n    this._mouseMove = this._mouseMove.bind(this);\n    this._mouseUp = this._mouseUp.bind(this);\n\n    this._init();\n  }\n\n  /** @internal */\n  protected _init(): DDResizableHandle {\n    const el = document.createElement('div');\n    el.classList.add('ui-resizable-handle');\n    el.classList.add(`${DDResizableHandle.prefix}${this.dir}`);\n    el.style.zIndex = '100';\n    el.style.userSelect = 'none';\n    this.el = el;\n    this.host.appendChild(this.el);\n    this.el.addEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.addEventListener('touchstart', touchstart);\n      this.el.addEventListener('pointerdown', pointerdown);\n      // this.el.style.touchAction = 'none'; // not needed unlike pointerdown doc comment\n    }\n    return this;\n  }\n\n  /** call this when resize handle needs to be removed and cleaned up */\n  public destroy(): DDResizableHandle {\n    if (this.moving) this._mouseUp(this.mouseDownEvent);\n    this.el.removeEventListener('mousedown', this._mouseDown);\n    if (isTouch) {\n      this.el.removeEventListener('touchstart', touchstart);\n      this.el.removeEventListener('pointerdown', pointerdown);\n    }\n    this.host.removeChild(this.el);\n    delete this.el;\n    delete this.host;\n    return this;\n  }\n\n  /** @internal called on mouse down on us: capture move on the entire document (mouse might not stay on us) until we release the mouse */\n  protected _mouseDown(e: MouseEvent) {\n    this.mouseDownEvent = e;\n    document.addEventListener('mousemove', this._mouseMove, true); // capture, not bubble\n    document.addEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.addEventListener('touchmove', touchmove);\n      this.el.addEventListener('touchend', touchend);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseMove(e: MouseEvent) {\n    let s = this.mouseDownEvent;\n    if (this.moving) {\n      this._triggerEvent('move', e);\n    } else if (Math.abs(e.x - s.x) + Math.abs(e.y - s.y) > 2) {\n      // don't start unless we've moved at least 3 pixels\n      this.moving = true;\n      this._triggerEvent('start', this.mouseDownEvent);\n      this._triggerEvent('move', e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _mouseUp(e: MouseEvent) {\n    if (this.moving) {\n      this._triggerEvent('stop', e);\n    }\n    document.removeEventListener('mousemove', this._mouseMove, true);\n    document.removeEventListener('mouseup', this._mouseUp, true);\n    if (isTouch) {\n      this.el.removeEventListener('touchmove', touchmove);\n      this.el.removeEventListener('touchend', touchend);\n    }\n    delete this.moving;\n    delete this.mouseDownEvent;\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /** @internal */\n  protected _triggerEvent(name: string, event: MouseEvent): DDResizableHandle {\n    if (this.option[name]) this.option[name](event);\n    return this;\n  }\n}\n","/**\n * dd-resizable.ts 7.1.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { DDResizableHandle } from './dd-resizable-handle';\nimport { DDBaseImplement, HTMLElementExtendOpt } from './dd-base-impl';\nimport { Utils } from './utils';\nimport { DDUIData, Rect, Size } from './types';\nimport { DDManager } from './dd-manager';\n\n// import { GridItemHTMLElement } from './types'; let count = 0; // TEST\n\n// TODO: merge with DDDragOpt\nexport interface DDResizableOpt {\n  autoHide?: boolean;\n  handles?: string;\n  maxHeight?: number;\n  maxWidth?: number;\n  minHeight?: number;\n  minWidth?: number;\n  start?: (event: Event, ui: DDUIData) => void;\n  stop?: (event: Event) => void;\n  resize?: (event: Event, ui: DDUIData) => void;\n}\n\nexport class DDResizable extends DDBaseImplement implements HTMLElementExtendOpt<DDResizableOpt> {\n\n  // have to be public else complains for HTMLElementExtendOpt ?\n  public el: HTMLElement;\n  public option: DDResizableOpt;\n\n  /** @internal */\n  protected handlers: DDResizableHandle[];\n  /** @internal */\n  protected originalRect: Rect;\n  /** @internal */\n  protected temporalRect: Rect;\n  /** @internal */\n  protected scrollY: number;\n  /** @internal */\n  protected scrolled: number;\n  /** @internal */\n  protected scrollEl: HTMLElement;\n  /** @internal */\n  protected startEvent: MouseEvent;\n  /** @internal value saved in the same order as _originStyleProp[] */\n  protected elOriginStyleVal: string[];\n  /** @internal */\n  protected parentOriginStylePosition: string;\n  /** @internal */\n  protected static _originStyleProp = ['width', 'height', 'position', 'left', 'top', 'opacity', 'zIndex'];\n\n  constructor(el: HTMLElement, opts: DDResizableOpt = {}) {\n    super();\n    this.el = el;\n    this.option = opts;\n    // create var event binding so we can easily remove and still look like TS methods (unlike anonymous functions)\n    this._mouseOver = this._mouseOver.bind(this);\n    this._mouseOut = this._mouseOut.bind(this);\n    this.enable();\n    this._setupAutoHide(this.option.autoHide);\n    this._setupHandlers();\n  }\n\n  public on(event: 'resizestart' | 'resize' | 'resizestop', callback: (event: DragEvent) => void): void {\n    super.on(event, callback);\n  }\n\n  public off(event: 'resizestart' | 'resize' | 'resizestop'): void {\n    super.off(event);\n  }\n\n  public enable(): void {\n    super.enable();\n    this.el.classList.add('ui-resizable');\n    this.el.classList.remove('ui-resizable-disabled');\n    this._setupAutoHide(this.option.autoHide);\n  }\n\n  public disable(): void {\n    super.disable();\n    this.el.classList.add('ui-resizable-disabled');\n    this.el.classList.remove('ui-resizable');\n    this._setupAutoHide(false);\n  }\n\n  public destroy(): void {\n    this._removeHandlers();\n    this._setupAutoHide(false);\n    this.el.classList.remove('ui-resizable');\n    delete this.el;\n    super.destroy();\n  }\n\n  public updateOption(opts: DDResizableOpt): DDResizable {\n    let updateHandles = (opts.handles && opts.handles !== this.option.handles);\n    let updateAutoHide = (opts.autoHide && opts.autoHide !== this.option.autoHide);\n    Object.keys(opts).forEach(key => this.option[key] = opts[key]);\n    if (updateHandles) {\n      this._removeHandlers();\n      this._setupHandlers();\n    }\n    if (updateAutoHide) {\n      this._setupAutoHide(this.option.autoHide);\n    }\n    return this;\n  }\n\n  /** @internal turns auto hide on/off */\n  protected _setupAutoHide(auto: boolean): DDResizable {\n    if (auto) {\n      this.el.classList.add('ui-resizable-autohide');\n      // use mouseover and not mouseenter to get better performance and track for nested cases\n      this.el.addEventListener('mouseover', this._mouseOver);\n      this.el.addEventListener('mouseout', this._mouseOut);\n    } else {\n      this.el.classList.remove('ui-resizable-autohide');\n      this.el.removeEventListener('mouseover', this._mouseOver);\n      this.el.removeEventListener('mouseout', this._mouseOut);\n      if (DDManager.overResizeElement === this) {\n        delete DDManager.overResizeElement;\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  protected _mouseOver(e: Event) {\n    // console.log(`${count++} pre-enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    // already over a child, ignore. Ideally we just call e.stopPropagation() but see https://github.com/gridstack/gridstack.js/issues/2018\n    if (DDManager.overResizeElement || DDManager.dragElement) return;\n    DDManager.overResizeElement = this;\n    // console.log(`${count++} enter ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.remove('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  protected _mouseOut(e: Event) {\n    // console.log(`${count++} pre-leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    if (DDManager.overResizeElement !== this) return;\n    delete DDManager.overResizeElement;\n    // console.log(`${count++} leave ${(this.el as GridItemHTMLElement).gridstackNode._id}`)\n    this.el.classList.add('ui-resizable-autohide');\n  }\n\n  /** @internal */\n  protected _setupHandlers(): DDResizable {\n    let handlerDirection = this.option.handles || 'e,s,se';\n    if (handlerDirection === 'all') {\n      handlerDirection = 'n,e,s,w,se,sw,ne,nw';\n    }\n    this.handlers = handlerDirection.split(',')\n      .map(dir => dir.trim())\n      .map(dir => new DDResizableHandle(this.el, dir, {\n        start: (event: MouseEvent) => {\n          this._resizeStart(event);\n        },\n        stop: (event: MouseEvent) => {\n          this._resizeStop(event);\n        },\n        move: (event: MouseEvent) => {\n          this._resizing(event, dir);\n        }\n      }));\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStart(event: MouseEvent): DDResizable {\n    this.originalRect = this.el.getBoundingClientRect();\n    this.scrollEl = Utils.getScrollElement(this.el);\n    this.scrollY = this.scrollEl.scrollTop;\n    this.scrolled = 0;\n    this.startEvent = event;\n    this._setupHelper();\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestart', target: this.el });\n    if (this.option.start) {\n      this.option.start(ev, this._ui());\n    }\n    this.el.classList.add('ui-resizable-resizing');\n    this.triggerEvent('resizestart', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizing(event: MouseEvent, dir: string): DDResizable {\n    this.scrolled = this.scrollEl.scrollTop - this.scrollY;\n    this.temporalRect = this._getChange(event, dir);\n    this._applyChange();\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resize', target: this.el });\n    if (this.option.resize) {\n      this.option.resize(ev, this._ui());\n    }\n    this.triggerEvent('resize', ev);\n    return this;\n  }\n\n  /** @internal */\n  protected _resizeStop(event: MouseEvent): DDResizable {\n    const ev = Utils.initEvent<MouseEvent>(event, { type: 'resizestop', target: this.el });\n    if (this.option.stop) {\n      this.option.stop(ev); // Note: ui() not used by gridstack so don't pass\n    }\n    this.el.classList.remove('ui-resizable-resizing');\n    this.triggerEvent('resizestop', ev);\n    this._cleanHelper();\n    delete this.startEvent;\n    delete this.originalRect;\n    delete this.temporalRect;\n    delete this.scrollY;\n    delete this.scrolled;\n    return this;\n  }\n\n  /** @internal */\n  protected _setupHelper(): DDResizable {\n    this.elOriginStyleVal = DDResizable._originStyleProp.map(prop => this.el.style[prop]);\n    this.parentOriginStylePosition = this.el.parentElement.style.position;\n    if (window.getComputedStyle(this.el.parentElement).position.match(/static/)) {\n      this.el.parentElement.style.position = 'relative';\n    }\n    this.el.style.position = 'absolute';\n    this.el.style.opacity = '0.8';\n    return this;\n  }\n\n  /** @internal */\n  protected _cleanHelper(): DDResizable {\n    DDResizable._originStyleProp.forEach((prop, i) => {\n      this.el.style[prop] = this.elOriginStyleVal[i] || null;\n    });\n    this.el.parentElement.style.position = this.parentOriginStylePosition || null;\n    return this;\n  }\n\n  /** @internal */\n  protected _getChange(event: MouseEvent, dir: string): Rect {\n    const oEvent = this.startEvent;\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n\n    const offsetX = event.clientX - oEvent.clientX;\n    const offsetY = event.clientY - oEvent.clientY;\n\n    if (dir.indexOf('e') > -1) {\n      newRect.width += offsetX;\n    } else if (dir.indexOf('w') > -1) {\n      newRect.width -= offsetX;\n      newRect.left += offsetX;\n    }\n    if (dir.indexOf('s') > -1) {\n      newRect.height += offsetY;\n    } else if (dir.indexOf('n') > -1) {\n      newRect.height -= offsetY;\n      newRect.top += offsetY\n    }\n    const constrain = this._constrainSize(newRect.width, newRect.height);\n    if (Math.round(newRect.width) !== Math.round(constrain.width)) { // round to ignore slight round-off errors\n      if (dir.indexOf('w') > -1) {\n        newRect.left += newRect.width - constrain.width;\n      }\n      newRect.width = constrain.width;\n    }\n    if (Math.round(newRect.height) !== Math.round(constrain.height)) {\n      if (dir.indexOf('n') > -1) {\n        newRect.top += newRect.height - constrain.height;\n      }\n      newRect.height = constrain.height;\n    }\n    return newRect;\n  }\n\n  /** @internal constrain the size to the set min/max values */\n  protected _constrainSize(oWidth: number, oHeight: number): Size {\n    const maxWidth = this.option.maxWidth || Number.MAX_SAFE_INTEGER;\n    const minWidth = this.option.minWidth || oWidth;\n    const maxHeight = this.option.maxHeight || Number.MAX_SAFE_INTEGER;\n    const minHeight = this.option.minHeight || oHeight;\n    const width = Math.min(maxWidth, Math.max(minWidth, oWidth));\n    const height = Math.min(maxHeight, Math.max(minHeight, oHeight));\n    return { width, height };\n  }\n\n  /** @internal */\n  protected _applyChange(): DDResizable {\n    let containmentRect = { left: 0, top: 0, width: 0, height: 0 };\n    if (this.el.style.position === 'absolute') {\n      const containmentEl = this.el.parentElement;\n      const { left, top } = containmentEl.getBoundingClientRect();\n      containmentRect = { left, top, width: 0, height: 0 };\n    }\n    if (!this.temporalRect) return this;\n    Object.keys(this.temporalRect).forEach(key => {\n      const value = this.temporalRect[key];\n      this.el.style[key] = value - containmentRect[key] + 'px';\n    });\n    return this;\n  }\n\n  /** @internal */\n  protected _removeHandlers(): DDResizable {\n    this.handlers.forEach(handle => handle.destroy());\n    delete this.handlers;\n    return this;\n  }\n\n  /** @internal */\n  protected _ui = (): DDUIData => {\n    const containmentEl = this.el.parentElement;\n    const containmentRect = containmentEl.getBoundingClientRect();\n    const newRect = { // Note: originalRect is a complex object, not a simple Rect, so copy out.\n      width: this.originalRect.width,\n      height: this.originalRect.height + this.scrolled,\n      left: this.originalRect.left,\n      top: this.originalRect.top - this.scrolled\n    };\n    const rect = this.temporalRect || newRect;\n    return {\n      position: {\n        left: rect.left - containmentRect.left,\n        top: rect.top - containmentRect.top\n      },\n      size: {\n        width: rect.width,\n        height: rect.height\n      }\n      /* Gridstack ONLY needs position set above... keep around in case.\n      element: [this.el], // The object representing the element to be resized\n      helper: [], // TODO: not support yet - The object representing the helper that's being resized\n      originalElement: [this.el],// we don't wrap here, so simplify as this.el //The object representing the original element before it is wrapped\n      originalPosition: { // The position represented as { left, top } before the resizable is resized\n        left: this.originalRect.left - containmentRect.left,\n        top: this.originalRect.top - containmentRect.top\n      },\n      originalSize: { // The size represented as { width, height } before the resizable is resized\n        width: this.originalRect.width,\n        height: this.originalRect.height\n      }\n      */\n    };\n  }\n}\n","/**\n * touch.ts 7.1.0\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\n */\n\nimport { DDManager } from './dd-manager';\n\n/**\n * Detect touch support - Windows Surface devices and other touch devices\n * should we use this instead ? (what we had for always showing resize handles)\n * /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n */\nexport const isTouch: boolean = typeof window !== 'undefined' && typeof document !== 'undefined' &&\n( 'ontouchstart' in document\n  || 'ontouchstart' in window\n  // || !!window.TouchEvent // true on Windows 10 Chrome desktop so don't use this\n  || ((window as any).DocumentTouch && document instanceof (window as any).DocumentTouch)\n  || navigator.maxTouchPoints > 0\n  || (navigator as any).msMaxTouchPoints > 0\n);\n\n// interface TouchCoord {x: number, y: number};\n\nclass DDTouch {\n  public static touchHandled: boolean;\n  public static pointerLeaveTimeout: number;\n}\n\n/**\n* Get the x,y position of a touch event\n*/\n// function getTouchCoords(e: TouchEvent): TouchCoord {\n//   return {\n//     x: e.changedTouches[0].pageX,\n//     y: e.changedTouches[0].pageY\n//   };\n// }\n\n/**\n * Simulate a mouse event based on a corresponding touch event\n * @param {Object} e A touch event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulateMouseEvent(e: TouchEvent, simulatedType: string) {\n\n  // Ignore multi-touch events\n  if (e.touches.length > 1) return;\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const touch = e.changedTouches[0], simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    touch.screenX,    // screenX\n    touch.screenY,    // screenY\n    touch.clientX,    // clientX\n    touch.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n/**\n * Simulate a mouse event based on a corresponding Pointer event\n * @param {Object} e A pointer event\n * @param {String} simulatedType The corresponding mouse event\n */\nfunction simulatePointerMouseEvent(e: PointerEvent, simulatedType: string) {\n\n  // Prevent \"Ignored attempt to cancel a touchmove event with cancelable=false\" errors\n  if (e.cancelable) e.preventDefault();\n\n  const simulatedEvent = document.createEvent('MouseEvents');\n\n  // Initialize the simulated mouse event using the touch event's coordinates\n  simulatedEvent.initMouseEvent(\n    simulatedType,    // type\n    true,             // bubbles\n    true,             // cancelable\n    window,           // view\n    1,                // detail\n    e.screenX,    // screenX\n    e.screenY,    // screenY\n    e.clientX,    // clientX\n    e.clientY,    // clientY\n    false,            // ctrlKey\n    false,            // altKey\n    false,            // shiftKey\n    false,            // metaKey\n    0,                // button\n    null              // relatedTarget\n  );\n\n  // Dispatch the simulated event to the target element\n  e.target.dispatchEvent(simulatedEvent);\n}\n\n\n/**\n * Handle the touchstart events\n * @param {Object} e The widget element's touchstart event\n */\nexport function touchstart(e: TouchEvent) {\n  // Ignore the event if another widget is already being handled\n  if (DDTouch.touchHandled) return;  DDTouch.touchHandled = true;\n\n  // Simulate the mouse events\n  // simulateMouseEvent(e, 'mouseover');\n  // simulateMouseEvent(e, 'mousemove');\n  simulateMouseEvent(e, 'mousedown');\n}\n\n/**\n * Handle the touchmove events\n * @param {Object} e The document's touchmove event\n */\nexport function touchmove(e: TouchEvent) {\n  // Ignore event if not handled by us\n  if (!DDTouch.touchHandled)  return;\n\n  simulateMouseEvent(e, 'mousemove');\n}\n\n/**\n * Handle the touchend events\n * @param {Object} e The document's touchend event\n */\nexport function touchend(e: TouchEvent) {\n\n  // Ignore event if not handled\n  if (!DDTouch.touchHandled) return;\n\n  // cancel delayed leave event when we release on ourself which happens BEFORE we get this!\n  if (DDTouch.pointerLeaveTimeout) {\n    window.clearTimeout(DDTouch.pointerLeaveTimeout);\n    delete DDTouch.pointerLeaveTimeout;\n  }\n\n  const wasDragging = !!DDManager.dragElement;\n\n  // Simulate the mouseup event\n  simulateMouseEvent(e, 'mouseup');\n  // simulateMouseEvent(event, 'mouseout');\n\n  // If the touch interaction did not move, it should trigger a click\n  if (!wasDragging) {\n    simulateMouseEvent(e, 'click');\n  }\n\n  // Unset the flag to allow other widgets to inherit the touch event\n  DDTouch.touchHandled = false;\n}\n\n/**\n * Note we don't get touchenter/touchleave (which are deprecated)\n * see https://stackoverflow.com/questions/27908339/js-touch-equivalent-for-mouseenter\n * so instead of PointerEvent to still get enter/leave and send the matching mouse event.\n */\nexport function pointerdown(e: PointerEvent) {\n  (e.target as HTMLElement).releasePointerCapture(e.pointerId) // <- Important!\n}\n\nexport function pointerenter(e: PointerEvent) {\n  // ignore the initial one we get on pointerdown on ourself\n  if (!DDManager.dragElement) {\n    // console.log('pointerenter ignored');\n    return;\n  }\n  // console.log('pointerenter');\n  simulatePointerMouseEvent(e, 'mouseenter');\n}\n\nexport function pointerleave(e: PointerEvent) {\n  // ignore the leave on ourself we get before releasing the mouse over ourself\n  // by delaying sending the event and having the up event cancel us\n  if (!DDManager.dragElement) {\n    // console.log('pointerleave ignored');\n    return;\n  }\n  DDTouch.pointerLeaveTimeout = window.setTimeout(() => {\n    delete DDTouch.pointerLeaveTimeout;\n    // console.log('pointerleave delayed');\n    simulatePointerMouseEvent(e, 'mouseleave');\n  }, 10);\n}\n\n","/**\n * gridstack-engine.ts 7.1.0\n * Copyright (c) 2021-2022 Alain Dumesny - see GridStack root license\n */\n\nimport { Utils } from './utils';\nimport { GridStackNode, ColumnOptions, GridStackPosition, GridStackMoveOpts, GridStackOptions } from './types';\n\n/** callback to update the DOM attributes since this class is generic (no HTML or other info) for items that changed - see _notify() */\ntype OnChangeCB = (nodes: GridStackNode[]) => void;\n\n/** options used during creation - similar to GridStackOptions */\nexport interface GridStackEngineOptions {\n  column?: number;\n  maxRow?: number;\n  float?: boolean;\n  nodes?: GridStackNode[];\n  onChange?: OnChangeCB;\n}\n\n/**\n * Defines the GridStack engine that does most no DOM grid manipulation.\n * See GridStack methods and vars for descriptions.\n *\n * NOTE: values should not be modified directly - call the main GridStack API instead\n */\nexport class GridStackEngine {\n  public column: number;\n  public maxRow: number;\n  public nodes: GridStackNode[];\n  public addedNodes: GridStackNode[] = [];\n  public removedNodes: GridStackNode[] = [];\n  public batchMode: boolean;\n  /** @internal callback to update the DOM attributes */\n  protected onChange: OnChangeCB;\n  /** @internal */\n  protected _float: boolean;\n  /** @internal */\n  protected _prevFloat: boolean;\n  /** @internal cached layouts of difference column count so we can restore back (eg 12 -> 1 -> 12) */\n  protected _layouts?: GridStackNode[][]; // maps column # to array of values nodes\n  /** @internal true while we are resizing widgets during column resize to skip certain parts */\n  protected _inColumnResize: boolean;\n  /** @internal true if we have some items locked */\n  protected _hasLocked: boolean;\n  /** @internal unique global internal _id counter NOT starting at 0 */\n  public static _idSeq = 1;\n\n  public constructor(opts: GridStackEngineOptions = {}) {\n    this.column = opts.column || 12;\n    this.maxRow = opts.maxRow;\n    this._float = opts.float;\n    this.nodes = opts.nodes || [];\n    this.onChange = opts.onChange;\n  }\n\n  public batchUpdate(flag = true): GridStackEngine {\n    if (!!this.batchMode === flag) return this;\n    this.batchMode = flag;\n    if (flag) {\n      this._prevFloat = this._float;\n      this._float = true; // let things go anywhere for now... will restore and possibly reposition later\n      this.saveInitial(); // since begin update (which is called multiple times) won't do this\n    } else {\n      this._float = this._prevFloat;\n      delete this._prevFloat;\n      this._packNodes()._notify();\n    }\n    return this;\n  }\n\n  // use entire row for hitting area (will use bottom reverse sorted first) if we not actively moving DOWN and didn't already skip\n  protected _useEntireRowArea(node: GridStackNode, nn: GridStackPosition): boolean {\n    return !this.float && !this._hasLocked && (!node._moving || node._skipDown || nn.y <= node.y);\n  }\n\n  /** @internal fix collision on given 'node', going to given new location 'nn', with optional 'collide' node already found.\n   * return true if we moved. */\n  protected _fixCollisions(node: GridStackNode, nn = node, collide?: GridStackNode, opt: GridStackMoveOpts = {}): boolean {\n    this.sortNodes(-1); // from last to first, so recursive collision move items in the right order\n\n    collide = collide || this.collide(node, nn); // REAL area collide for swap and skip if none...\n    if (!collide) return false;\n\n    // swap check: if we're actively moving in gravity mode, see if we collide with an object the same size\n    if (node._moving && !opt.nested && !this.float) {\n      if (this.swap(node, collide)) return true;\n    }\n\n    // during while() collisions MAKE SURE to check entire row so larger items don't leap frog small ones (push them all down starting last in grid)\n    let area = nn;\n    if (this._useEntireRowArea(node, nn)) {\n      area = {x: 0, w: this.column, y: nn.y, h: nn.h};\n      collide = this.collide(node, area, opt.skip); // force new hit\n    }\n\n    let didMove = false;\n    let newOpt: GridStackMoveOpts = {nested: true, pack: false};\n    while (collide = collide || this.collide(node, area, opt.skip)) { // could collide with more than 1 item... so repeat for each\n      let moved: boolean;\n      // if colliding with a locked item OR moving down with top gravity (and collide could move up) -> skip past the collide,\n      // but remember that skip down so we only do this once (and push others otherwise).\n      if (collide.locked || node._moving && !node._skipDown && nn.y > node.y && !this.float &&\n        // can take space we had, or before where we're going\n        (!this.collide(collide, {...collide, y: node.y}, node) || !this.collide(collide, {...collide, y: nn.y - collide.h}, node))) {\n        node._skipDown = (node._skipDown || nn.y > node.y);\n        moved = this.moveNode(node, {...nn, y: collide.y + collide.h, ...newOpt});\n        if (collide.locked && moved) {\n          Utils.copyPos(nn, node); // moving after lock become our new desired location\n        } else if (!collide.locked && moved && opt.pack) {\n          // we moved after and will pack: do it now and keep the original drop location, but past the old collide to see what else we might push way\n          this._packNodes();\n          nn.y = collide.y + collide.h;\n          Utils.copyPos(node, nn);\n        }\n        didMove = didMove || moved;\n      } else {\n        // move collide down *after* where we will be, ignoring where we are now (don't collide with us)\n        moved = this.moveNode(collide, {...collide, y: nn.y + nn.h, skip: node, ...newOpt});\n      }\n      if (!moved) { return didMove; } // break inf loop if we couldn't move after all (ex: maxRow, fixed)\n      collide = undefined;\n    }\n    return didMove;\n  }\n\n  /** return the nodes that intercept the given node. Optionally a different area can be used, as well as a second node to skip */\n  public collide(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode {\n    return this.nodes.find(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n  public collideAll(skip: GridStackNode, area = skip, skip2?: GridStackNode): GridStackNode[] {\n    return this.nodes.filter(n => n !== skip && n !== skip2 && Utils.isIntercepted(n, area));\n  }\n\n  /** does a pixel coverage collision based on where we started, returning the node that has the most coverage that is >50% mid line */\n  protected directionCollideCoverage(node: GridStackNode, o: GridStackMoveOpts, collides: GridStackNode[]): GridStackNode {\n    if (!o.rect || !node._rect) return;\n    let r0 = node._rect; // where started\n    let r = {...o.rect}; // where we are\n\n    // update dragged rect to show where it's coming from (above or below, etc...)\n    if (r.y > r0.y) {\n      r.h += r.y - r0.y;\n      r.y = r0.y;\n    } else {\n      r.h += r0.y - r.y;\n    }\n    if (r.x > r0.x) {\n      r.w += r.x - r0.x;\n      r.x = r0.x;\n    } else {\n      r.w += r0.x - r.x;\n    }\n\n    let collide: GridStackNode;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let r2 = n._rect; // overlapping target\n      let yOver = Number.MAX_VALUE, xOver = Number.MAX_VALUE, overMax = 0.5; // need >50%\n      // depending on which side we started from, compute the overlap % of coverage\n      // (ex: from above/below we only compute the max horizontal line coverage)\n      if (r0.y < r2.y) { // from above\n        yOver = ((r.y + r.h) - r2.y) / r2.h;\n      } else if (r0.y+r0.h > r2.y+r2.h) { // from below\n        yOver = ((r2.y + r2.h) - r.y) / r2.h;\n      }\n      if (r0.x < r2.x) { // from the left\n        xOver = ((r.x + r.w) - r2.x) / r2.w;\n      } else if (r0.x+r0.w > r2.x+r2.w) { // from the right\n        xOver = ((r2.x + r2.w) - r.x) / r2.w;\n      }\n      let over = Math.min(xOver, yOver);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    o.collide = collide; // save it so we don't have to find it again\n    return collide;\n  }\n\n  /** does a pixel coverage returning the node that has the most coverage by area */\n  /*\n  protected collideCoverage(r: GridStackPosition, collides: GridStackNode[]): {collide: GridStackNode, over: number} {\n    let collide: GridStackNode;\n    let overMax = 0;\n    collides.forEach(n => {\n      if (n.locked || !n._rect) return;\n      let over = Utils.areaIntercept(r, n._rect);\n      if (over > overMax) {\n        overMax = over;\n        collide = n;\n      }\n    });\n    return {collide, over: overMax};\n  }\n  */\n\n  /** called to cache the nodes pixel rectangles used for collision detection during drag */\n  public cacheRects(w: number, h: number, top: number, right: number, bottom: number, left: number): GridStackEngine\n  {\n    this.nodes.forEach(n =>\n      n._rect = {\n        y: n.y * h + top,\n        x: n.x * w + left,\n        w: n.w * w - left - right,\n        h: n.h * h - top - bottom\n      }\n    );\n    return this;\n  }\n\n  /** called to possibly swap between 2 nodes (same size or column, not locked, touching), returning true if successful */\n  public swap(a: GridStackNode, b: GridStackNode): boolean {\n    if (!b || b.locked || !a || a.locked) return false;\n\n    function _doSwap(): true { // assumes a is before b IFF they have different height (put after rather than exact swap)\n      let x = b.x, y = b.y;\n      b.x = a.x; b.y = a.y; // b -> a position\n      if (a.h != b.h) {\n        a.x = x; a.y = b.y + b.h; // a -> goes after b\n      } else if (a.w != b.w) {\n        a.x = b.x + b.w; a.y = y; // a -> goes after b\n      } else {\n        a.x = x; a.y = y; // a -> old b position\n      }\n      a._dirty = b._dirty = true;\n      return true;\n    }\n    let touching: boolean; // remember if we called it (vs undefined)\n\n    // same size and same row or column, and touching\n    if (a.w === b.w && a.h === b.h && (a.x === b.x || a.y === b.y) && (touching = Utils.isTouching(a, b)))\n      return _doSwap();\n    if (touching === false) return; // IFF ran test and fail, bail out\n\n    // check for taking same columns (but different height) and touching\n    if (a.w === b.w && a.x === b.x && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.y < a.y) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    if (touching === false) return;\n\n    // check if taking same row (but different width) and touching\n    if (a.h === b.h && a.y === b.y && (touching || (touching = Utils.isTouching(a, b)))) {\n      if (b.x < a.x) { let t = a; a = b; b = t; } // swap a <-> b vars so a is first\n      return _doSwap();\n    }\n    return false;\n  }\n\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\n    let nn: GridStackNode = {x: x || 0, y: y || 0, w: w || 1, h: h || 1};\n    return !this.collide(nn);\n  }\n\n  /** re-layout grid items to reclaim any empty space */\n  public compact(): GridStackEngine {\n    if (this.nodes.length === 0) return this;\n    this.batchUpdate()\n      .sortNodes();\n    let copyNodes = this.nodes;\n    this.nodes = []; // pretend we have no nodes to conflict layout to start with...\n    copyNodes.forEach(node => {\n      if (!node.locked) {\n        node.autoPosition = true;\n      }\n      this.addNode(node, false); // 'false' for add event trigger\n      node._dirty = true; // will force attr update\n    });\n    return this.batchUpdate(false);\n  }\n\n  /** enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html) */\n  public set float(val: boolean) {\n    if (this._float === val) return;\n    this._float = val || false;\n    if (!val) {\n      this._packNodes()._notify();\n    }\n  }\n\n  /** float getter method */\n  public get float(): boolean { return this._float || false; }\n\n  /** sort the nodes array from first to last, or reverse. Called during collision/placement to force an order */\n  public sortNodes(dir?: -1 | 1): GridStackEngine {\n    this.nodes = Utils.sort(this.nodes, dir, this.column);\n    return this;\n  }\n\n  /** @internal called to top gravity pack the items back OR revert back to original Y positions when floating */\n  protected _packNodes(): GridStackEngine {\n    if (this.batchMode) { return this; }\n    this.sortNodes(); // first to last\n\n    if (this.float) {\n      // restore original Y pos\n      this.nodes.forEach(n => {\n        if (n._updating || n._orig === undefined || n.y === n._orig.y) return;\n        let newY = n.y;\n        while (newY > n._orig.y) {\n          --newY;\n          let collide = this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!collide) {\n            n._dirty = true;\n            n.y = newY;\n          }\n        }\n      });\n    } else {\n      // top gravity pack\n      this.nodes.forEach((n, i) => {\n        if (n.locked) return;\n        while (n.y > 0) {\n          let newY = i === 0 ? 0 : n.y - 1;\n          let canBeMoved = i === 0 || !this.collide(n, {x: n.x, y: newY, w: n.w, h: n.h});\n          if (!canBeMoved) break;\n          // Note: must be dirty (from last position) for GridStack::OnChange CB to update positions\n          // and move items back. The user 'change' CB should detect changes from the original\n          // starting position instead.\n          n._dirty = (n.y !== newY);\n          n.y = newY;\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * given a random node, makes sure it's coordinates/values are valid in the current grid\n   * @param node to adjust\n   * @param resizing if out of bound, resize down or move into the grid to fit ?\n   */\n  public prepareNode(node: GridStackNode, resizing?: boolean): GridStackNode {\n    node = node || {};\n    node._id = node._id || GridStackEngine._idSeq++;\n\n    // if we're missing position, have the grid position us automatically (before we set them to 0,0)\n    if (node.x === undefined || node.y === undefined || node.x === null || node.y === null) {\n      node.autoPosition = true;\n    }\n\n    // assign defaults for missing required fields\n    let defaults: GridStackNode = { x: 0, y: 0, w: 1, h: 1};\n    Utils.defaults(node, defaults);\n\n    if (!node.autoPosition) { delete node.autoPosition; }\n    if (!node.noResize) { delete node.noResize; }\n    if (!node.noMove) { delete node.noMove; }\n\n    // check for NaN (in case messed up strings were passed. can't do parseInt() || defaults.x above as 0 is valid #)\n    if (typeof node.x == 'string')      { node.x = Number(node.x); }\n    if (typeof node.y == 'string')      { node.y = Number(node.y); }\n    if (typeof node.w == 'string')  { node.w = Number(node.w); }\n    if (typeof node.h == 'string') { node.h = Number(node.h); }\n    if (isNaN(node.x))      { node.x = defaults.x; node.autoPosition = true; }\n    if (isNaN(node.y))      { node.y = defaults.y; node.autoPosition = true; }\n    if (isNaN(node.w))  { node.w = defaults.w; }\n    if (isNaN(node.h)) { node.h = defaults.h; }\n\n    return this.nodeBoundFix(node, resizing);\n  }\n\n  /** part2 of preparing a node to fit inside our grid - checks for x,y,w from grid dimensions */\n  public nodeBoundFix(node: GridStackNode, resizing?: boolean): GridStackNode {\n\n    let before = node._orig || Utils.copyPos({}, node);\n\n    if (node.maxW) { node.w = Math.min(node.w, node.maxW); }\n    if (node.maxH) { node.h = Math.min(node.h, node.maxH); }\n    if (node.minW && node.minW <= this.column) { node.w = Math.max(node.w, node.minW); }\n    if (node.minH) { node.h = Math.max(node.h, node.minH); }\n\n    // if user loaded a larger than allowed widget for current # of columns (or force 1 column mode),\n    // remember it's position & width so we can restore back (1 -> 12 column) #1655 #1985\n    // IFF we're not in the middle of column resizing!\n    const saveOrig = this.column === 1 || node.x + node.w > this.column;\n    if (saveOrig && this.column < 12 && !this._inColumnResize && !node.autoPosition && node._id && this.findCacheLayout(node, 12) === -1) {\n      let copy = {...node}; // need _id + positions\n      copy.x = Math.min(11, copy.x);\n      copy.w = Math.min(12, copy.w);\n      this.cacheOneLayout(copy, 12);\n    }\n\n    if (node.w > this.column) {\n      node.w = this.column;\n    } else if (node.w < 1) {\n      node.w = 1;\n    }\n\n    if (this.maxRow && node.h > this.maxRow) {\n      node.h = this.maxRow;\n    } else if (node.h < 1) {\n      node.h = 1;\n    }\n\n    if (node.x < 0) {\n      node.x = 0;\n    }\n    if (node.y < 0) {\n      node.y = 0;\n    }\n\n    if (node.x + node.w > this.column) {\n      if (resizing) {\n        node.w = this.column - node.x;\n      } else {\n        node.x = this.column - node.w;\n      }\n    }\n    if (this.maxRow && node.y + node.h > this.maxRow) {\n      if (resizing) {\n        node.h = this.maxRow - node.y;\n      } else {\n        node.y = this.maxRow - node.h;\n      }\n    }\n\n    if (!Utils.samePos(node, before)) {\n      node._dirty = true;\n    }\n\n    return node;\n  }\n\n  /** returns a list of modified nodes from their original values */\n  public getDirtyNodes(verify?: boolean): GridStackNode[] {\n    // compare original x,y,w,h instead as _dirty can be a temporary state\n    if (verify) {\n      return this.nodes.filter(n => n._dirty && !Utils.samePos(n, n._orig));\n    }\n    return this.nodes.filter(n => n._dirty);\n  }\n\n  /** @internal call this to call onChange callback with dirty nodes so DOM can be updated */\n  protected _notify(removedNodes?: GridStackNode[]): GridStackEngine {\n    if (this.batchMode || !this.onChange) return this;\n    let dirtyNodes = (removedNodes || []).concat(this.getDirtyNodes());\n    this.onChange(dirtyNodes);\n    return this;\n  }\n\n  /** @internal remove dirty and last tried info */\n  public cleanNodes(): GridStackEngine {\n    if (this.batchMode) return this;\n    this.nodes.forEach(n => {\n      delete n._dirty;\n      delete n._lastTried;\n    });\n    return this;\n  }\n\n  /** @internal called to save initial position/size to track real dirty state.\n   * Note: should be called right after we call change event (so next API is can detect changes)\n   * as well as right before we start move/resize/enter (so we can restore items to prev values) */\n  public saveInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      n._orig = Utils.copyPos({}, n);\n      delete n._dirty;\n    });\n    this._hasLocked = this.nodes.some(n => n.locked);\n    return this;\n  }\n\n  /** @internal restore all the nodes back to initial values (called when we leave) */\n  public restoreInitial(): GridStackEngine {\n    this.nodes.forEach(n => {\n      if (Utils.samePos(n, n._orig)) return;\n      Utils.copyPos(n, n._orig);\n      n._dirty = true;\n    });\n    this._notify();\n    return this;\n  }\n\n  /** find the first available empty spot for the given node width/height, updating the x,y attributes. return true if found */\n  public findEmptyPosition(node: GridStackNode): boolean {\n    this.sortNodes();\n    let found = false;\n    for (let i = 0; !found; ++i) {\n      let x = i % this.column;\n      let y = Math.floor(i / this.column);\n      if (x + node.w > this.column) {\n        continue;\n      }\n      let box = {x, y, w: node.w, h: node.h};\n      if (!this.nodes.find(n => Utils.isIntercepted(box, n))) {\n        node.x = x;\n        node.y = y;\n        found = true;\n      }\n    }\n    return found;\n  }\n\n  /** call to add the given node to our list, fixing collision and re-packing */\n  public addNode(node: GridStackNode, triggerAddEvent = false): GridStackNode {\n    let dup = this.nodes.find(n => n._id === node._id);\n    if (dup) return dup; // prevent inserting twice! return it instead.\n\n    // skip prepareNode if we're in middle of column resize (not new) but do check for bounds!\n    node = this._inColumnResize ? this.nodeBoundFix(node) : this.prepareNode(node);\n    delete node._temporaryRemoved;\n    delete node._removeDOM;\n\n    if (node.autoPosition && this.findEmptyPosition(node)) {\n      delete node.autoPosition; // found our slot\n    }\n\n    this.nodes.push(node);\n    if (triggerAddEvent) { this.addedNodes.push(node); }\n\n    this._fixCollisions(node);\n    if (!this.batchMode) { this._packNodes()._notify(); }\n    return node;\n  }\n\n  public removeNode(node: GridStackNode, removeDOM = true, triggerEvent = false): GridStackEngine {\n    if (!this.nodes.find(n => n === node)) {\n      // TEST console.log(`Error: GridStackEngine.removeNode() node._id=${node._id} not found!`)\n      return this;\n    }\n    if (triggerEvent) { // we wait until final drop to manually track removed items (rather than during drag)\n      this.removedNodes.push(node);\n    }\n    if (removeDOM) node._removeDOM = true; // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    // don't use 'faster' .splice(findIndex(),1) in case node isn't in our list, or in multiple times.\n    this.nodes = this.nodes.filter(n => n !== node);\n    return this._packNodes()\n      ._notify([node]);\n  }\n\n  public removeAll(removeDOM = true): GridStackEngine {\n    delete this._layouts;\n    if (this.nodes.length === 0) return this;\n    removeDOM && this.nodes.forEach(n => n._removeDOM = true); // let CB remove actual HTML (used to set _id to null, but then we loose layout info)\n    this.removedNodes = this.nodes;\n    this.nodes = [];\n    return this._notify(this.removedNodes);\n  }\n\n  /** checks if item can be moved (layout constrain) vs moveNode(), returning true if was able to move.\n   * In more complicated cases (maxRow) it will attempt at moving the item and fixing\n   * others in a clone first, then apply those changes if still within specs. */\n  public moveNodeCheck(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    // if (node.locked) return false;\n    if (!this.changedPosConstrain(node, o)) return false;\n    o.pack = true;\n\n    // simpler case: move item directly...\n    if (!this.maxRow) {\n      return this.moveNode(node, o);\n    }\n\n    // complex case: create a clone with NO maxRow (will check for out of bounds at the end)\n    let clonedNode: GridStackNode;\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {\n        if (n === node) {\n          clonedNode = {...n};\n          return clonedNode;\n        }\n        return {...n};\n      })\n    });\n    if (!clonedNode) return false;\n\n    // check if we're covering 50% collision and could move\n    let canMove = clone.moveNode(clonedNode, o) && clone.getRow() <= this.maxRow;\n    // else check if we can force a swap (float=true, or different shapes) on non-resize\n    if (!canMove && !o.resizing && o.collide) {\n      let collide = o.collide.el.gridstackNode; // find the source node the clone collided with at 50%\n      if (this.swap(node, collide)) { // swaps and mark dirty\n        this._notify();\n        return true;\n      }\n    }\n    if (!canMove) return false;\n\n    // if clone was able to move, copy those mods over to us now instead of caller trying to do this all over!\n    // Note: we can't use the list directly as elements and other parts point to actual node, so copy content\n    clone.nodes.filter(n => n._dirty).forEach(c => {\n      let n = this.nodes.find(a => a._id === c._id);\n      if (!n) return;\n      Utils.copyPos(n, c);\n      n._dirty = true;\n    });\n    this._notify();\n    return true;\n  }\n\n  /** return true if can fit in grid height constrain only (always true if no maxRow) */\n  public willItFit(node: GridStackNode): boolean {\n    delete node._willFitPos;\n    if (!this.maxRow) return true;\n    // create a clone with NO maxRow and check if still within size\n    let clone = new GridStackEngine({\n      column: this.column,\n      float: this.float,\n      nodes: this.nodes.map(n => {return {...n}})\n    });\n    let n = {...node}; // clone node so we don't mod any settings on it but have full autoPosition and min/max as well! #1687\n    this.cleanupNode(n);\n    delete n.el; delete n._id; delete n.content; delete n.grid;\n    clone.addNode(n);\n    if (clone.getRow() <= this.maxRow) {\n      node._willFitPos = Utils.copyPos({}, n);\n      return true;\n    }\n    return false;\n  }\n\n  /** true if x,y or w,h are different after clamping to min/max */\n  public changedPosConstrain(node: GridStackNode, p: GridStackPosition): boolean {\n    // first make sure w,h are set for caller\n    p.w = p.w || node.w;\n    p.h = p.h || node.h;\n    if (node.x !== p.x || node.y !== p.y) return true;\n    // check constrained w,h\n    if (node.maxW) { p.w = Math.min(p.w, node.maxW); }\n    if (node.maxH) { p.h = Math.min(p.h, node.maxH); }\n    if (node.minW) { p.w = Math.max(p.w, node.minW); }\n    if (node.minH) { p.h = Math.max(p.h, node.minH); }\n    return (node.w !== p.w || node.h !== p.h);\n  }\n\n  /** return true if the passed in node was actually moved (checks for no-op and locked) */\n  public moveNode(node: GridStackNode, o: GridStackMoveOpts): boolean {\n    if (!node || /*node.locked ||*/ !o) return false;\n    let wasUndefinedPack: boolean;\n    if (o.pack === undefined) {\n      wasUndefinedPack = o.pack = true;\n    }\n\n    // constrain the passed in values and check if we're still changing our node\n    if (typeof o.x !== 'number') { o.x = node.x; }\n    if (typeof o.y !== 'number') { o.y = node.y; }\n    if (typeof o.w !== 'number') { o.w = node.w; }\n    if (typeof o.h !== 'number') { o.h = node.h; }\n    let resizing = (node.w !== o.w || node.h !== o.h);\n    let nn: GridStackNode = Utils.copyPos({}, node, true); // get min/max out first, then opt positions next\n    Utils.copyPos(nn, o);\n    nn = this.nodeBoundFix(nn, resizing);\n    Utils.copyPos(o, nn);\n\n    if (Utils.samePos(node, o)) return false;\n    let prevPos: GridStackPosition = Utils.copyPos({}, node);\n\n    // check if we will need to fix collision at our new location\n    let collides = this.collideAll(node, nn, o.skip);\n    let needToMove = true;\n    if (collides.length) {\n      let activeDrag = node._moving && !o.nested;\n      // check to make sure we actually collided over 50% surface area while dragging\n      let collide = activeDrag ? this.directionCollideCoverage(node, o, collides) : collides[0];\n      // if we're enabling creation of sub-grids on the fly, see if we're covering 80% of either one, if we didn't already do that\n      if (activeDrag && collide && node.grid?.opts?.subGridDynamic && !node.grid._isTemp) {\n        let over = Utils.areaIntercept(o.rect, collide._rect);\n        let a1 = Utils.area(o.rect);\n        let a2 = Utils.area(collide._rect);\n        let perc = over / (a1 < a2 ? a1 : a2);\n        if (perc > .8) {\n          collide.grid.makeSubGrid(collide.el, undefined, node);\n          collide = undefined;\n        }\n      }\n\n      if (collide) {\n        needToMove = !this._fixCollisions(node, nn, collide, o); // check if already moved...\n      } else {\n        needToMove = false; // we didn't cover >50% for a move, skip...\n        if (wasUndefinedPack) delete o.pack;\n      }\n    }\n\n    // now move (to the original ask vs the collision version which might differ) and repack things\n    if (needToMove) {\n      node._dirty = true;\n      Utils.copyPos(node, nn);\n    }\n    if (o.pack) {\n      this._packNodes()\n        ._notify();\n    }\n    return !Utils.samePos(node, prevPos); // pack might have moved things back\n  }\n\n  public getRow(): number {\n    return this.nodes.reduce((row, n) => Math.max(row, n.y + n.h), 0);\n  }\n\n  public beginUpdate(node: GridStackNode): GridStackEngine {\n    if (!node._updating) {\n      node._updating = true;\n      delete node._skipDown;\n      if (!this.batchMode) this.saveInitial();\n    }\n    return this;\n  }\n\n  public endUpdate(): GridStackEngine {\n    let n = this.nodes.find(n => n._updating);\n    if (n) {\n      delete n._updating;\n      delete n._skipDown;\n    }\n    return this;\n  }\n\n  /** saves a copy of the largest column layout (eg 12 even when rendering oneColumnMode) so we don't loose orig layout,\n   * returning a list of widgets for serialization */\n  public save(saveElement = true): GridStackNode[] {\n    // use the highest layout for any saved info so we can have full detail on reload #1849\n    let len = this._layouts?.length;\n    let layout = len && this.column !== (len - 1) ? this._layouts[len - 1] : null;\n    let list: GridStackNode[] = [];\n    this.sortNodes();\n    this.nodes.forEach(n => {\n      let wl = layout?.find(l => l._id === n._id);\n      let w: GridStackNode = {...n};\n      // use layout info instead if set\n      if (wl) { w.x = wl.x; w.y = wl.y; w.w = wl.w; }\n      Utils.removeInternalForSave(w, !saveElement);\n      list.push(w);\n    });\n    return list;\n  }\n\n  /** @internal called whenever a node is added or moved - updates the cached layouts */\n  public layoutsNodesChange(nodes: GridStackNode[]): GridStackEngine {\n    if (!this._layouts || this._inColumnResize) return this;\n    // remove smaller layouts - we will re-generate those on the fly... larger ones need to update\n    this._layouts.forEach((layout, column) => {\n      if (!layout || column === this.column) return this;\n      if (column < this.column) {\n        this._layouts[column] = undefined;\n      }\n      else {\n        // we save the original x,y,w (h isn't cached) to see what actually changed to propagate better.\n        // NOTE: we don't need to check against out of bound scaling/moving as that will be done when using those cache values. #1785\n        let ratio = column / this.column;\n        nodes.forEach(node => {\n          if (!node._orig) return; // didn't change (newly added ?)\n          let n = layout.find(l => l._id === node._id);\n          if (!n) return; // no cache for new nodes. Will use those values.\n          // Y changed, push down same amount\n          // TODO: detect doing item 'swaps' will help instead of move (especially in 1 column mode)\n          if (node.y !== node._orig.y) {\n            n.y += (node.y - node._orig.y);\n          }\n          // X changed, scale from new position\n          if (node.x !== node._orig.x) {\n            n.x = Math.round(node.x * ratio);\n          }\n          // width changed, scale from new width\n          if (node.w !== node._orig.w) {\n            n.w = Math.round(node.w * ratio);\n          }\n          // ...height always carries over from cache\n        });\n      }\n    });\n    return this;\n  }\n\n  /**\n   * @internal Called to scale the widget width & position up/down based on the column change.\n   * Note we store previous layouts (especially original ones) to make it possible to go\n   * from say 12 -> 1 -> 12 and get back to where we were.\n   *\n   * @param prevColumn previous number of columns\n   * @param column  new column number\n   * @param nodes different sorted list (ex: DOM order) instead of current list\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\n   */\n  public updateNodeWidths(prevColumn: number, column: number, nodes: GridStackNode[], layout: ColumnOptions = 'moveScale'): GridStackEngine {\n    if (!this.nodes.length || !column || prevColumn === column) return this;\n\n    // cache the current layout in case they want to go back (like 12 -> 1 -> 12) as it requires original data\n    this.cacheLayout(this.nodes, prevColumn);\n    this.batchUpdate(); // do this EARLY as it will call saveInitial() so we can detect where we started for _dirty and collision\n    let newNodes: GridStackNode[] = [];\n\n    // if we're going to 1 column and using DOM order rather than default sorting, then generate that layout\n    let domOrder = false;\n    if (column === 1 && nodes?.length) {\n      domOrder = true;\n      let top = 0;\n      nodes.forEach(n => {\n        n.x = 0;\n        n.w = 1;\n        n.y = Math.max(n.y, top);\n        top = n.y + n.h;\n      });\n      newNodes = nodes;\n      nodes = [];\n    } else {\n      nodes = Utils.sort(this.nodes, -1, prevColumn); // current column reverse sorting so we can insert last to front (limit collision)\n    }\n\n    // see if we have cached previous layout IFF we are going up in size (restore) otherwise always\n    // generate next size down from where we are (looks more natural as you gradually size down).\n    let cacheNodes: GridStackNode[] = [];\n    if (column > prevColumn) {\n      cacheNodes = this._layouts[column] || [];\n      // ...if not, start with the largest layout (if not already there) as down-scaling is more accurate\n      // by pretending we came from that larger column by assigning those values as starting point\n      let lastIndex = this._layouts.length - 1;\n      if (!cacheNodes.length && prevColumn !== lastIndex && this._layouts[lastIndex]?.length) {\n        prevColumn = lastIndex;\n        this._layouts[lastIndex].forEach(cacheNode => {\n          let n = nodes.find(n => n._id === cacheNode._id);\n          if (n) {\n            // still current, use cache info positions\n            n.x = cacheNode.x;\n            n.y = cacheNode.y;\n            n.w = cacheNode.w;\n          }\n        });\n      }\n    }\n\n    // if we found cache re-use those nodes that are still current\n    cacheNodes.forEach(cacheNode => {\n      let j = nodes.findIndex(n => n._id === cacheNode._id);\n      if (j !== -1) {\n        // still current, use cache info positions\n        nodes[j].x = cacheNode.x;\n        nodes[j].y = cacheNode.y;\n        nodes[j].w = cacheNode.w;\n        newNodes.push(nodes[j]);\n        nodes.splice(j, 1);\n      }\n    });\n    // ...and add any extra non-cached ones\n    if (nodes.length) {\n      if (typeof layout === 'function') {\n        layout(column, prevColumn, newNodes, nodes);\n      } else if (!domOrder) {\n        let ratio = column / prevColumn;\n        let move = (layout === 'move' || layout === 'moveScale');\n        let scale = (layout === 'scale' || layout === 'moveScale');\n        nodes.forEach(node => {\n          // NOTE: x + w could be outside of the grid, but addNode() below will handle that\n          node.x = (column === 1 ? 0 : (move ? Math.round(node.x * ratio) : Math.min(node.x, column - 1)));\n          node.w = ((column === 1 || prevColumn === 1) ? 1 :\n            scale ? (Math.round(node.w * ratio) || 1) : (Math.min(node.w, column)));\n          newNodes.push(node);\n        });\n        nodes = [];\n      }\n    }\n\n    // finally re-layout them in reverse order (to get correct placement)\n    if (!domOrder) newNodes = Utils.sort(newNodes, -1, column);\n    this._inColumnResize = true; // prevent cache update\n    this.nodes = []; // pretend we have no nodes to start with (add() will use same structures) to simplify layout\n    newNodes.forEach(node => {\n      this.addNode(node, false); // 'false' for add event trigger\n      delete node._orig; // make sure the commit doesn't try to restore things back to original\n    });\n    this.batchUpdate(false);\n    delete this._inColumnResize;\n    return this;\n  }\n\n  /**\n   * call to cache the given layout internally to the given location so we can restore back when column changes size\n   * @param nodes list of nodes\n   * @param column corresponding column index to save it under\n   * @param clear if true, will force other caches to be removed (default false)\n   */\n  public cacheLayout(nodes: GridStackNode[], column: number, clear = false): GridStackEngine {\n    let copy: GridStackNode[] = [];\n    nodes.forEach((n, i) => {\n      n._id = n._id || GridStackEngine._idSeq++; // make sure we have an id in case this is new layout, else re-use id already set\n      copy[i] = {x: n.x, y: n.y, w: n.w, _id: n._id} // only thing we change is x,y,w and id to find it back\n    });\n    this._layouts = clear ? [] : this._layouts || []; // use array to find larger quick\n    this._layouts[column] = copy;\n    return this;\n  }\n\n  /**\n   * call to cache the given node layout internally to the given location so we can restore back when column changes size\n   * @param node single node to cache\n   * @param column corresponding column index to save it under\n   */\n  public cacheOneLayout(n: GridStackNode, column: number): GridStackEngine {\n    n._id = n._id || GridStackEngine._idSeq++;\n    let layout: GridStackNode = {x: n.x, y: n.y, w: n.w, _id: n._id}\n    this._layouts = this._layouts || [];\n    this._layouts[column] = this._layouts[column] || [];\n    let index = this.findCacheLayout(n, column);\n    if (index === -1)\n      this._layouts[column].push(layout);\n    else\n      this._layouts[column][index] = layout;\n    return this;\n  }\n\n  protected findCacheLayout(n: GridStackNode, column: number): number {\n    return this._layouts?.[column]?.findIndex(l => l._id === n._id) ?? -1;\n  }\n\n\n  /** called to remove all internal values but the _id */\n  public cleanupNode(node: GridStackNode): GridStackEngine {\n    for (let prop in node) {\n      if (prop[0] === '_' && prop !== '_id') delete node[prop];\n    }\n    return this;\n  }\n}\n","/*!\r\n * GridStack 7.1.0\r\n * https://gridstackjs.com/\r\n *\r\n * Copyright (c) 2021-2022 Alain Dumesny\r\n * see root license https://github.com/gridstack/gridstack.js/tree/master/LICENSE\r\n */\r\nimport { GridStackEngine } from './gridstack-engine';\r\nimport { Utils, HeightData, obsolete } from './utils';\r\nimport { gridDefaults, ColumnOptions, GridItemHTMLElement, GridStackElement, GridStackEventHandlerCallback,\r\n  GridStackNode, GridStackWidget, numberOrString, DDUIData, DDDragInOpt, GridStackPosition, GridStackOptions } from './types';\r\n\r\n// export all dependent file as well to make it easier for users to just import the main file\r\nexport * from './types';\r\nexport * from './utils';\r\nexport * from './gridstack-engine';\r\n\r\nexport interface GridHTMLElement extends HTMLElement {\r\n  gridstack?: GridStack; // grid's parent DOM element points back to grid class\r\n}\r\n/** list of possible events, or space separated list of them */\r\nexport type GridStackEvent = 'added' | 'change' | 'disable' | 'drag' | 'dragstart' | 'dragstop' | 'dropped' |\r\n  'enable' | 'removed' | 'resize' | 'resizestart' | 'resizestop' | string;\r\n\r\n/** Defines the coordinates of an object */\r\nexport interface MousePosition {\r\n  top: number;\r\n  left: number;\r\n}\r\n\r\n/** Defines the position of a cell inside the grid*/\r\nexport interface CellPosition {\r\n  x: number;\r\n  y: number;\r\n}\r\n\r\n/** optional function called during load() to callback the user on new added/remove items */\r\nexport type AddRemoveFcn = (g: GridStack, w: GridStackWidget, add: boolean) => GridItemHTMLElement;\r\n\r\ninterface GridCSSStyleSheet extends CSSStyleSheet {\r\n  _max?: number; // internal tracker of the max # of rows we created\r\n}\r\n\r\n/**\r\n * Main gridstack class - you will need to call `GridStack.init()` first to initialize your grid.\r\n * Note: your grid elements MUST have the following classes for the CSS layout to work:\r\n * @example\r\n * <div class=\"grid-stack\">\r\n *   <div class=\"grid-stack-item\">\r\n *     <div class=\"grid-stack-item-content\">Item 1</div>\r\n *   </div>\r\n * </div>\r\n */\r\nexport class GridStack {\r\n\r\n  /**\r\n   * initializing the HTML element, or selector string, into a grid will return the grid. Calling it again will\r\n   * simply return the existing instance (ignore any passed options). There is also an initAll() version that support\r\n   * multiple grids initialization at once. Or you can use addGrid() to create the entire grid from JSON.\r\n   * @param options grid options (optional)\r\n   * @param elOrString element or CSS selector (first one used) to convert to a grid (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   *\r\n   * Note: the HTMLElement (of type GridHTMLElement) will store a `gridstack: GridStack` value that can be retrieve later\r\n   * let grid = document.querySelector('.grid-stack').gridstack;\r\n   */\r\n  public static init(options: GridStackOptions = {}, elOrString: GridStackElement = '.grid-stack'): GridStack {\r\n    let el = GridStack.getGridElement(elOrString);\r\n    if (!el) {\r\n      if (typeof elOrString === 'string') {\r\n        console.error('GridStack.initAll() no grid was found with selector \"' + elOrString + '\" - element missing or wrong selector ?' +\r\n        '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n      } else {\r\n        console.error('GridStack.init() no grid element was passed.');\r\n      }\r\n      return null;\r\n    }\r\n    if (!el.gridstack) {\r\n      el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n    }\r\n    return el.gridstack\r\n  }\r\n\r\n  /**\r\n   * Will initialize a list of elements (given a selector) and return an array of grids.\r\n   * @param options grid options (optional)\r\n   * @param selector elements selector to convert to grids (default to '.grid-stack' class selector)\r\n   *\r\n   * @example\r\n   * let grids = GridStack.initAll();\r\n   * grids.forEach(...)\r\n   */\r\n  public static initAll(options: GridStackOptions = {}, selector = '.grid-stack'): GridStack[] {\r\n    let grids: GridStack[] = [];\r\n    GridStack.getGridElements(selector).forEach(el => {\r\n      if (!el.gridstack) {\r\n        el.gridstack = new GridStack(el, Utils.cloneDeep(options));\r\n        delete options.dragIn; delete options.dragInOptions; // only need to be done once (really a static global thing, not per grid)\r\n      }\r\n      grids.push(el.gridstack);\r\n    });\r\n    if (grids.length === 0) {\r\n      console.error('GridStack.initAll() no grid was found with selector \"' + selector + '\" - element missing or wrong selector ?' +\r\n      '\\nNote: \".grid-stack\" is required for proper CSS styling and drag/drop, and is the default selector.');\r\n    }\r\n    return grids;\r\n  }\r\n\r\n  /**\r\n   * call to create a grid with the given options, including loading any children from JSON structure. This will call GridStack.init(), then\r\n   * grid.load() on any passed children (recursively). Great alternative to calling init() if you want entire grid to come from\r\n   * JSON serialized data, including options.\r\n   * @param parent HTML element parent to the grid\r\n   * @param opt grids options used to initialize the grid, and list of children\r\n   */\r\n  public static addGrid(parent: HTMLElement, opt: GridStackOptions = {}): GridStack {\r\n    if (!parent) return null;\r\n\r\n    // create the grid element, but check if the passed 'parent' already has grid styling and should be used instead\r\n    let el = parent;\r\n    if (!parent.classList.contains('grid-stack')) {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack ${opt.class || ''}\"></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n      parent.appendChild(el);\r\n    }\r\n\r\n    // create grid class and load any children\r\n    let grid = GridStack.init(opt, el);\r\n    if (grid.opts.children) {\r\n      let children = grid.opts.children;\r\n      delete grid.opts.children;\r\n      grid.load(children);\r\n    }\r\n    return grid;\r\n  }\r\n\r\n  /** call this method to register your engine instead of the default one.\r\n   * See instead `GridStackOptions.engineClass` if you only need to\r\n   * replace just one instance.\r\n   */\r\n  static registerEngine(engineClass: typeof GridStackEngine) {\r\n    GridStack.engineClass = engineClass;\r\n  }\r\n\r\n  /** scoping so users can call GridStack.Utils.sort() for example */\r\n  public static Utils = Utils;\r\n\r\n  /** scoping so users can call new GridStack.Engine(12) for example */\r\n  public static Engine = GridStackEngine;\r\n\r\n  /** the HTML element tied to this grid after it's been initialized */\r\n  public el: GridHTMLElement;\r\n\r\n  /** engine used to implement non DOM grid functionality */\r\n  public engine: GridStackEngine;\r\n\r\n  /** grid options - public for classes to access, but use methods to modify! */\r\n  public opts: GridStackOptions;\r\n\r\n  /** point to a parent grid item if we're nested (inside a grid-item in between 2 Grids) */\r\n  public parentGridItem?: GridStackNode;\r\n\r\n  protected static engineClass: typeof GridStackEngine;\r\n\r\n  /** @internal unique class name for our generated CSS style sheet */\r\n  protected _styleSheetClass?: string;\r\n  /** @internal true if we got created by drag over gesture, so we can removed on drag out (temporary) */\r\n  public _isTemp?: boolean;\r\n\r\n\r\n  /** @internal create placeholder DIV as needed */\r\n  public get placeholder(): HTMLElement {\r\n    if (!this._placeholder) {\r\n      let placeholderChild = document.createElement('div'); // child so padding match item-content\r\n      placeholderChild.className = 'placeholder-content';\r\n      if (this.opts.placeholderText) {\r\n        placeholderChild.innerHTML = this.opts.placeholderText;\r\n      }\r\n      this._placeholder = document.createElement('div');\r\n      this._placeholder.classList.add(this.opts.placeholderClass, gridDefaults.itemClass, this.opts.itemClass);\r\n      this.placeholder.appendChild(placeholderChild);\r\n    }\r\n    return this._placeholder;\r\n  }\r\n  /** @internal */\r\n  protected _placeholder: HTMLElement;\r\n  /** @internal */\r\n  protected _prevColumn: number;\r\n  /** @internal prevent cached layouts from being updated when loading into small column layouts */\r\n  protected _ignoreLayoutsNodeChange: boolean;\r\n  /** @internal */\r\n  public _gsEventHandler = {};\r\n  /** @internal */\r\n  protected _styles: GridCSSStyleSheet;\r\n  /** @internal flag to keep cells square during resize */\r\n  protected _isAutoCellHeight: boolean;\r\n  /** @internal track event binding to window resize so we can remove */\r\n  protected _windowResizeBind: () => void;\r\n  /** @internal limit auto cell resizing method */\r\n  protected _cellHeightThrottle: () => void;\r\n  /** @internal true when loading items to insert first rather than append */\r\n  protected _insertNotAppend: boolean;\r\n  /** @internal extra row added when dragging at the bottom of the grid */\r\n  protected _extraDragRow = 0;\r\n  /** @internal true if nested grid should get column count from our width */\r\n  protected _autoColumn?: boolean;\r\n\r\n  /**\r\n   * Construct a grid item from the given element and options\r\n   * @param el\r\n   * @param opts\r\n   */\r\n  public constructor(el: GridHTMLElement, opts: GridStackOptions = {}) {\r\n    this.el = el; // exposed HTML element to the user\r\n    opts = opts || {}; // handles null/undefined/0\r\n\r\n    // if row property exists, replace minRow and maxRow instead\r\n    if (opts.row) {\r\n      opts.minRow = opts.maxRow = opts.row;\r\n      delete opts.row;\r\n    }\r\n    let rowAttr = Utils.toNumber(el.getAttribute('gs-row'));\r\n\r\n    // flag only valid in sub-grids (handled by parent, not here)\r\n    if (opts.column === 'auto') {\r\n      delete opts.column;\r\n    }\r\n    // 'minWidth' legacy support in 5.1\r\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\r\n    let anyOpts = opts as any;\r\n    if (anyOpts.minWidth !== undefined) {\r\n      opts.oneColumnSize = opts.oneColumnSize || anyOpts.minWidth;\r\n      delete anyOpts.minWidth;\r\n    }\r\n    // save original setting so we can restore on save\r\n    if (opts.alwaysShowResizeHandle !== undefined) {\r\n      (opts as any)._alwaysShowResizeHandle = opts.alwaysShowResizeHandle;\r\n    }\r\n\r\n    // elements DOM attributes override any passed options (like CSS style) - merge the two together\r\n    let defaults: GridStackOptions = {...Utils.cloneDeep(gridDefaults),\r\n      column: Utils.toNumber(el.getAttribute('gs-column')) || gridDefaults.column,\r\n      minRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-min-row')) || gridDefaults.minRow,\r\n      maxRow: rowAttr ? rowAttr : Utils.toNumber(el.getAttribute('gs-max-row')) || gridDefaults.maxRow,\r\n      staticGrid: Utils.toBool(el.getAttribute('gs-static')) || gridDefaults.staticGrid,\r\n      draggable: {\r\n        handle: (opts.handleClass ? '.' + opts.handleClass : (opts.handle ? opts.handle : '')) || gridDefaults.draggable.handle,\r\n      },\r\n      removableOptions: {\r\n        accept: opts.itemClass ? '.' + opts.itemClass : gridDefaults.removableOptions.accept,\r\n      },\r\n    };\r\n    if (el.getAttribute('gs-animate')) { // default to true, but if set to false use that instead\r\n      defaults.animate = Utils.toBool(el.getAttribute('gs-animate'))\r\n    }\r\n\r\n    this.opts = Utils.defaults(opts, defaults);\r\n    opts = null; // make sure we use this.opts instead\r\n    this._initMargin(); // part of settings defaults...\r\n\r\n    // Now check if we're loading into 1 column mode FIRST so we don't do un-necessary work (like cellHeight = width / 12 then go 1 column)\r\n    if (this.opts.column !== 1 && !this.opts.disableOneColumnMode && this._widthOrContainer() <= this.opts.oneColumnSize) {\r\n      this._prevColumn = this.getColumn();\r\n      this.opts.column = 1;\r\n    }\r\n\r\n    if (this.opts.rtl === 'auto') {\r\n      this.opts.rtl = (el.style.direction === 'rtl');\r\n    }\r\n    if (this.opts.rtl) {\r\n      this.el.classList.add('grid-stack-rtl');\r\n    }\r\n\r\n    // check if we're been nested, and if so update our style and keep pointer around (used during save)\r\n    let parentGridItem = (Utils.closestUpByClass(this.el, gridDefaults.itemClass) as GridItemHTMLElement)?.gridstackNode;\r\n    if (parentGridItem) {\r\n      parentGridItem.subGrid = this;\r\n      this.parentGridItem = parentGridItem;\r\n      this.el.classList.add('grid-stack-nested');\r\n      parentGridItem.el.classList.add('grid-stack-sub-grid');\r\n    }\r\n\r\n    this._isAutoCellHeight = (this.opts.cellHeight === 'auto');\r\n    if (this._isAutoCellHeight || this.opts.cellHeight === 'initial') {\r\n      // make the cell content square initially (will use resize/column event to keep it square)\r\n      this.cellHeight(undefined, false);\r\n    } else {\r\n      // append unit if any are set\r\n      if (typeof this.opts.cellHeight == 'number' && this.opts.cellHeightUnit && this.opts.cellHeightUnit !== gridDefaults.cellHeightUnit) {\r\n        this.opts.cellHeight = this.opts.cellHeight + this.opts.cellHeightUnit;\r\n        delete this.opts.cellHeightUnit;\r\n      }\r\n      this.cellHeight(this.opts.cellHeight, false);\r\n    }\r\n\r\n    // see if we need to adjust auto-hide\r\n    if (this.opts.alwaysShowResizeHandle === 'mobile') {\r\n      this.opts.alwaysShowResizeHandle = isTouch;\r\n    }\r\n\r\n    this._styleSheetClass = 'grid-stack-instance-' + GridStackEngine._idSeq++;\r\n    this.el.classList.add(this._styleSheetClass);\r\n\r\n    this._setStaticClass();\r\n\r\n    let engineClass = this.opts.engineClass || GridStack.engineClass || GridStackEngine;\r\n    this.engine = new engineClass({\r\n      column: this.getColumn(),\r\n      float: this.opts.float,\r\n      maxRow: this.opts.maxRow,\r\n      onChange: (cbNodes) => {\r\n        let maxH = 0;\r\n        this.engine.nodes.forEach(n => { maxH = Math.max(maxH, n.y + n.h) });\r\n        cbNodes.forEach(n => {\r\n          let el = n.el;\r\n          if (!el) return;\r\n          if (n._removeDOM) {\r\n            if (el) el.remove();\r\n            delete n._removeDOM;\r\n          } else {\r\n            this._writePosAttr(el, n);\r\n          }\r\n        });\r\n        this._updateStyles(false, maxH); // false = don't recreate, just append if need be\r\n      }\r\n    });\r\n\r\n    if (this.opts.auto) {\r\n      this.batchUpdate(); // prevent in between re-layout #1535 TODO: this only set float=true, need to prevent collision check...\r\n      let elements: {el: HTMLElement; i: number}[] = [];\r\n      let column = this.getColumn();\r\n      if (column === 1 && this._prevColumn) column = this._prevColumn; // do 12 column when reading into 1 column mode\r\n      this.getGridItems().forEach(el => { // get dom elements (not nodes yet)\r\n        let x = parseInt(el.getAttribute('gs-x'));\r\n        let y = parseInt(el.getAttribute('gs-y'));\r\n        elements.push({\r\n          el,\r\n          // if x,y are missing (autoPosition) add them to end of list - but keep their respective DOM order\r\n          i: (Number.isNaN(x) ? 1000 : x) + (Number.isNaN(y) ? 1000 : y) * column\r\n        });\r\n      });\r\n      elements.sort((a, b) => b.i - a.i).forEach(e => this._prepareElement(e.el)); // revert sort so lowest item wins\r\n      this.batchUpdate(false);\r\n    }\r\n\r\n    this.setAnimation(this.opts.animate);\r\n\r\n    this._updateStyles();\r\n    if (this.opts.column != 12) {\r\n      this.el.classList.add('grid-stack-' + this.opts.column);\r\n    }\r\n\r\n    // legacy support to appear 'per grid` options when really global.\r\n    if (this.opts.dragIn) GridStack.setupDragIn(this.opts.dragIn, this.opts.dragInOptions);\r\n    delete this.opts.dragIn;\r\n    delete this.opts.dragInOptions;\r\n\r\n    // dynamic grids require pausing during drag to detect over to nest vs push\r\n    if (this.opts.subGridDynamic && !DDManager.pauseDrag) DDManager.pauseDrag = true;\r\n    if (this.opts.draggable?.pause !== undefined) DDManager.pauseDrag = this.opts.draggable.pause;\r\n\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this._updateWindowResizeEvent();\r\n  }\r\n\r\n  /**\r\n   * add a new widget and returns it.\r\n   *\r\n   * Widget will be always placed even if result height is more than actual grid height.\r\n   * You need to use `willItFit()` before calling addWidget for additional check.\r\n   * See also `makeWidget()`.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.addWidget({w: 3, content: 'hello'});\r\n   * grid.addWidget('<div class=\"grid-stack-item\"><div class=\"grid-stack-item-content\">hello</div></div>', {w: 3});\r\n   *\r\n   * @param el  GridStackWidget (which can have content string as well), html element, or string definition to add\r\n   * @param options widget position/size options (optional, and ignore if first param is already option) - see GridStackWidget\r\n   */\r\n  public addWidget(els?: GridStackWidget | GridStackElement, options?: GridStackWidget): GridItemHTMLElement {\r\n    function isGridStackWidget(w: GridStackWidget): w is GridStackWidget { // https://medium.com/ovrsea/checking-the-type-of-an-object-in-typescript-the-type-guards-24d98d9119b0\r\n      return w.x !== undefined || w.y !== undefined || w.w !== undefined || w.h !== undefined || w.content !== undefined ? true : false;\r\n    }\r\n\r\n    let el: HTMLElement;\r\n    if (typeof els === 'string') {\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = els;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else if (arguments.length === 0 || arguments.length === 1 && isGridStackWidget(els)) {\r\n      let content = els ? (els as GridStackWidget).content || '' : '';\r\n      options = els;\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item ${this.opts.itemClass || ''}\"><div class=\"grid-stack-item-content\">${content}</div></div>`;\r\n      el = doc.body.children[0] as HTMLElement;\r\n    } else {\r\n      el = els as HTMLElement;\r\n    }\r\n\r\n    // Tempting to initialize the passed in opt with default and valid values, but this break knockout demos\r\n    // as the actual value are filled in when _prepareElement() calls el.getAttribute('gs-xyz) before adding the node.\r\n    // So make sure we load any DOM attributes that are not specified in passed in options (which override)\r\n    let domAttr = this._readAttr(el);\r\n    options = Utils.cloneDeep(options) || {};  // make a copy before we modify in case caller re-uses it\r\n    Utils.defaults(options, domAttr);\r\n    let node = this.engine.prepareNode(options);\r\n    this._writeAttr(el, options);\r\n\r\n    if (this._insertNotAppend) {\r\n      this.el.prepend(el);\r\n    } else {\r\n      this.el.appendChild(el);\r\n    }\r\n\r\n    // similar to makeWidget() that doesn't read attr again and worse re-create a new node and loose any _id\r\n    this._prepareElement(el, true, options);\r\n    this._updateContainerHeight();\r\n\r\n    // see if there is a sub-grid to create too\r\n    if (node.subGrid) {\r\n      this.makeSubGrid(node.el, undefined, undefined, false);\r\n    }\r\n\r\n    // if we're adding an item into 1 column (_prevColumn is set only when going to 1) make sure\r\n    // we don't override the larger 12 column layout that was already saved. #1985\r\n    if (this._prevColumn && this.opts.column === 1) {\r\n      this._ignoreLayoutsNodeChange = true;\r\n    }\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Convert an existing gridItem element into a sub-grid with the given (optional) options, else inherit them\r\n   * from the parent subGrid options.\r\n   * @param el gridItem element to convert\r\n   * @param ops (optional) sub-grid options, else default to node, then parent settings, else defaults\r\n   * @param nodeToAdd (optional) node to add to the newly created sub grid (used when dragging over existing regular item)\r\n   * @returns newly created grid\r\n   */\r\n  public makeSubGrid(el: GridItemHTMLElement, ops?: GridStackOptions, nodeToAdd?: GridStackNode, saveContent = true): GridStack {\r\n    let node = el.gridstackNode;\r\n    if (!node) {\r\n      node = this.makeWidget(el).gridstackNode;\r\n    }\r\n    if ((node.subGrid as GridStack)?.el) return node.subGrid as GridStack; // already done\r\n\r\n    ops = Utils.cloneDeep(ops || node.subGrid as GridStackOptions || {...this.opts.subGrid, children: undefined});\r\n    ops.subGrid = Utils.cloneDeep(ops); // carry nesting settings to next one down\r\n    node.subGrid = ops;\r\n\r\n    // if column special case it set, remember that flag and set default\r\n    let autoColumn: boolean;\r\n    if (ops.column === 'auto') {\r\n      autoColumn = true;\r\n      ops.column = Math.max(node.w || 1, nodeToAdd?.w || 1);\r\n      ops.disableOneColumnMode = true; // driven by parent\r\n    }\r\n\r\n    // if we're converting an existing full item, move over the content to be the first sub item in the new grid\r\n    let content = node.el.querySelector('.grid-stack-item-content') as HTMLElement;\r\n    let newItem: HTMLElement;\r\n    let newItemOpt: GridStackNode;\r\n    if (saveContent) {\r\n      this._removeDD(node.el); // remove D&D since it's set on content div\r\n      let doc = document.implementation.createHTMLDocument(''); // IE needs a param\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item\"></div>`;\r\n      newItem = doc.body.children[0] as HTMLElement;\r\n      newItem.appendChild(content);\r\n      newItemOpt = {...node, x:0, y:0};\r\n      Utils.removeInternalForSave(newItemOpt);\r\n      delete newItemOpt.subGrid;\r\n      if (node.content) {\r\n        newItemOpt.content = node.content;\r\n        delete node.content;\r\n      }\r\n      doc.body.innerHTML = `<div class=\"grid-stack-item-content\"></div>`;\r\n      content = doc.body.children[0] as HTMLElement;\r\n      node.el.appendChild(content);\r\n      this._prepareDragDropByNode(node); // ... and restore original D&D\r\n    }\r\n\r\n    // if we're adding an additional item, make the container large enough to have them both\r\n    if (nodeToAdd) {\r\n      let w = autoColumn ? ops.column : node.w;\r\n      let h = node.h + nodeToAdd.h;\r\n      let style = node.el.style;\r\n      style.transition = 'none'; // show up instantly so we don't see scrollbar with nodeToAdd\r\n      this.update(node.el, {w, h});\r\n      setTimeout(() =>  style.transition = null); // recover animation\r\n    }\r\n\r\n    let subGrid = node.subGrid = GridStack.addGrid(content, ops);\r\n    if (nodeToAdd?._moving) subGrid._isTemp = true; // prevent re-nesting as we add over\r\n    if (autoColumn) subGrid._autoColumn = true;\r\n\r\n    // add the original content back as a child of hte newly created grid\r\n    if (saveContent) {\r\n      subGrid.addWidget(newItem, newItemOpt);\r\n    }\r\n\r\n    // now add any additional node\r\n    if (nodeToAdd) {\r\n      if (nodeToAdd._moving) {\r\n        // create an artificial event even for the just created grid to receive this item\r\n        window.setTimeout(() => Utils.simulateMouseEvent(nodeToAdd._event, 'mouseenter', subGrid.el), 0);\r\n      } else {\r\n        subGrid.addWidget(node.el, node);\r\n      }\r\n    }\r\n    return subGrid;\r\n  }\r\n\r\n  /**\r\n   * called when an item was converted into a nested grid to accommodate a dragged over item, but then item leaves - return back\r\n   * to the original grid-item. Also called to remove empty sub-grids when last item is dragged out (since re-creating is simple)\r\n   */\r\n  public removeAsSubGrid(nodeThatRemoved?: GridStackNode): void {\r\n    let pGrid = this.parentGridItem?.grid;\r\n    if (!pGrid) return;\r\n\r\n    pGrid.batchUpdate();\r\n    pGrid.removeWidget(this.parentGridItem.el, true, true);\r\n    this.engine.nodes.forEach(n => {\r\n      // migrate any children over and offsetting by our location\r\n      n.x += this.parentGridItem.x;\r\n      n.y += this.parentGridItem.y;\r\n      pGrid.addWidget(n.el, n);\r\n    });\r\n    pGrid.batchUpdate(false);\r\n    delete this.parentGridItem;\r\n\r\n    // create an artificial event for the original grid now that this one is gone (got a leave, but won't get enter)\r\n    if (nodeThatRemoved) {\r\n      window.setTimeout(() => Utils.simulateMouseEvent(nodeThatRemoved._event, 'mouseenter', pGrid.el), 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n  /**\r\n   * saves the current layout returning a list of widgets for serialization which might include any nested grids.\r\n   * @param saveContent if true (default) the latest html inside .grid-stack-content will be saved to GridStackWidget.content field, else it will\r\n   * be removed.\r\n   * @param saveGridOpt if true (default false), save the grid options itself, so you can call the new GridStack.addGrid()\r\n   * to recreate everything from scratch. GridStackOptions.children would then contain the widget list instead.\r\n   * @returns list of widgets or full grid option, including .children list of widgets\r\n   */\r\n  public save(saveContent = true, saveGridOpt = false): GridStackWidget[] | GridStackOptions {\r\n    // return copied nodes we can modify at will...\r\n    let list = this.engine.save(saveContent);\r\n\r\n    // check for HTML content and nested grids\r\n    list.forEach(n => {\r\n      if (saveContent && n.el && !n.subGrid) { // sub-grid are saved differently, not plain content\r\n        let sub = n.el.querySelector('.grid-stack-item-content');\r\n        n.content = sub ? sub.innerHTML : undefined;\r\n        if (!n.content) delete n.content;\r\n      } else {\r\n        if (!saveContent) { delete n.content; }\r\n        // check for nested grid\r\n        if (n.subGrid) {\r\n          n.subGrid = (n.subGrid as GridStack).save(saveContent, true) as GridStackOptions;\r\n        }\r\n      }\r\n      delete n.el;\r\n    });\r\n\r\n    // check if save entire grid options (needed for recursive) + children...\r\n    if (saveGridOpt) {\r\n      let o: GridStackOptions = Utils.cloneDeep(this.opts);\r\n      // delete default values that will be recreated on launch\r\n      if (o.marginBottom === o.marginTop && o.marginRight === o.marginLeft && o.marginTop === o.marginRight) {\r\n        o.margin = o.marginTop;\r\n        delete o.marginTop; delete o.marginRight; delete o.marginBottom; delete o.marginLeft;\r\n      }\r\n      if (o.rtl === (this.el.style.direction === 'rtl')) { o.rtl = 'auto' }\r\n      if (this._isAutoCellHeight) {\r\n        o.cellHeight = 'auto'\r\n      }\r\n      if (this._autoColumn) {\r\n        o.column = 'auto';\r\n        delete o.disableOneColumnMode;\r\n      }\r\n      const origShow = (o as any)._alwaysShowResizeHandle;\r\n      delete (o as any)._alwaysShowResizeHandle;\r\n      if (origShow !== undefined) {\r\n        o.alwaysShowResizeHandle = origShow;\r\n      } else {\r\n        delete o.alwaysShowResizeHandle;\r\n      }\r\n      Utils.removeInternalAndSame(o, gridDefaults);\r\n      o.children = list;\r\n      return o;\r\n    }\r\n\r\n    return list;\r\n  }\r\n\r\n  /**\r\n   * load the widgets from a list. This will call update() on each (matching by id) or add/remove widgets that are not there.\r\n   *\r\n   * @param layout list of widgets definition to update/create\r\n   * @param addAndRemove boolean (default true) or callback method can be passed to control if and how missing widgets can be added/removed, giving\r\n   * the user control of insertion.\r\n   *\r\n   * @example\r\n   * see http://gridstackjs.com/demo/serialization.html\r\n   **/\r\n  public load(layout: GridStackWidget[], addAndRemove: boolean | AddRemoveFcn = true): GridStack {\r\n    let items = GridStack.Utils.sort([...layout], -1, this._prevColumn || this.getColumn()); // make copy before we mod/sort\r\n    this._insertNotAppend = true; // since create in reverse order...\r\n\r\n    // if we're loading a layout into for example 1 column (_prevColumn is set only when going to 1) and items don't fit, make sure to save\r\n    // the original wanted layout so we can scale back up correctly #1471\r\n    if (this._prevColumn && this._prevColumn !== this.opts.column && items.some(n => (n.x + n.w) > this.opts.column)) {\r\n      this._ignoreLayoutsNodeChange = true; // skip layout update\r\n      this.engine.cacheLayout(items, this._prevColumn, true);\r\n    }\r\n\r\n    let removed: GridStackNode[] = [];\r\n    this.batchUpdate();\r\n\r\n    // see if any items are missing from new layout and need to be removed first\r\n    if (addAndRemove) {\r\n      let copyNodes = [...this.engine.nodes]; // don't loop through array you modify\r\n      copyNodes.forEach(n => {\r\n        let item = items.find(w => n.id === w.id);\r\n        if (!item) {\r\n          if (typeof(addAndRemove) === 'function') {\r\n            addAndRemove(this, n, false);\r\n          } else {\r\n            removed.push(n); // batch keep track\r\n            this.removeWidget(n.el, true, false);\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    // now add/update the widgets\r\n    items.forEach(w => {\r\n      let item = (w.id || w.id === 0) ? this.engine.nodes.find(n => n.id === w.id) : undefined;\r\n      if (item) {\r\n        this.update(item.el, w);\r\n        if (w.subGrid && (w.subGrid as GridStackOptions).children) { // update any sub grid as well\r\n          let sub = item.el.querySelector('.grid-stack') as GridHTMLElement;\r\n          if (sub && sub.gridstack) {\r\n            sub.gridstack.load((w.subGrid as GridStackOptions).children); // TODO: support updating grid options ?\r\n            this._insertNotAppend = true; // got reset by above call\r\n          }\r\n        }\r\n      } else if (addAndRemove) {\r\n        if (typeof(addAndRemove) === 'function') {\r\n          w = addAndRemove(this, w, true).gridstackNode;\r\n        } else {\r\n          w = this.addWidget(w).gridstackNode;\r\n        }\r\n      }\r\n    });\r\n\r\n    this.engine.removedNodes = removed;\r\n    this.batchUpdate(false);\r\n\r\n    // after commit, clear that flag\r\n    delete this._ignoreLayoutsNodeChange;\r\n    delete this._insertNotAppend;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * use before calling a bunch of `addWidget()` to prevent un-necessary relayouts in between (more efficient)\r\n   * and get a single event callback. You will see no changes until `batchUpdate(false)` is called.\r\n   */\r\n  public batchUpdate(flag = true): GridStack {\r\n    this.engine.batchUpdate(flag);\r\n    if (!flag) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerAddEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Gets current cell height.\r\n   */\r\n  public getCellHeight(forcePixel = false): number {\r\n    if (this.opts.cellHeight && this.opts.cellHeight !== 'auto' &&\r\n       (!forcePixel || !this.opts.cellHeightUnit || this.opts.cellHeightUnit === 'px')) {\r\n      return this.opts.cellHeight as number;\r\n    }\r\n    // else get first cell height\r\n    let el = this.el.querySelector('.' + this.opts.itemClass) as HTMLElement;\r\n    if (el) {\r\n      let height = Utils.toNumber(el.getAttribute('gs-h'));\r\n      return Math.round(el.offsetHeight / height);\r\n    }\r\n    // else do entire grid and # of rows (but doesn't work if min-height is the actual constrain)\r\n    let rows = parseInt(this.el.getAttribute('gs-current-row'));\r\n    return rows ? Math.round(this.el.getBoundingClientRect().height / rows) : this.opts.cellHeight as number;\r\n  }\r\n\r\n  /**\r\n   * Update current cell height - see `GridStackOptions.cellHeight` for format.\r\n   * This method rebuilds an internal CSS style sheet.\r\n   * Note: You can expect performance issues if call this method too often.\r\n   *\r\n   * @param val the cell height. If not passed (undefined), cells content will be made square (match width minus margin),\r\n   * if pass 0 the CSS will be generated by the application instead.\r\n   * @param update (Optional) if false, styles will not be updated\r\n   *\r\n   * @example\r\n   * grid.cellHeight(100); // same as 100px\r\n   * grid.cellHeight('70px');\r\n   * grid.cellHeight(grid.cellWidth() * 1.2);\r\n   */\r\n  public cellHeight(val?: numberOrString, update = true): GridStack {\r\n\r\n    // if not called internally, check if we're changing mode\r\n    if (update && val !== undefined) {\r\n      if (this._isAutoCellHeight !== (val === 'auto')) {\r\n        this._isAutoCellHeight = (val === 'auto');\r\n        this._updateWindowResizeEvent();\r\n      }\r\n    }\r\n    if (val === 'initial' || val === 'auto') { val = undefined; }\r\n\r\n    // make item content be square\r\n    if (val === undefined) {\r\n      let marginDiff = - (this.opts.marginRight as number) - (this.opts.marginLeft as number)\r\n        + (this.opts.marginTop as number) + (this.opts.marginBottom as number);\r\n      val = this.cellWidth() + marginDiff;\r\n    }\r\n\r\n    let data = Utils.parseHeight(val);\r\n    if (this.opts.cellHeightUnit === data.unit && this.opts.cellHeight === data.h) {\r\n      return this;\r\n    }\r\n    this.opts.cellHeightUnit = data.unit;\r\n    this.opts.cellHeight = data.h;\r\n\r\n    if (update) {\r\n      this._updateStyles(true); // true = force re-create for current # of rows\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** Gets current cell width. */\r\n  public cellWidth(): number {\r\n    return this._widthOrContainer() / this.getColumn();\r\n  }\r\n  /** return our expected width (or parent) for 1 column check */\r\n  protected _widthOrContainer(): number {\r\n    // use `offsetWidth` or `clientWidth` (no scrollbar) ?\r\n    // https://stackoverflow.com/questions/21064101/understanding-offsetwidth-clientwidth-scrollwidth-and-height-respectively\r\n    return (this.el.clientWidth || this.el.parentElement.clientWidth || window.innerWidth);\r\n  }\r\n\r\n  /** re-layout grid items to reclaim any empty space */\r\n  public compact(): GridStack {\r\n    this.engine.compact();\r\n    this._triggerChangeEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * set the number of columns in the grid. Will update existing widgets to conform to new number of columns,\r\n   * as well as cache the original layout so you can revert back to previous positions without loss.\r\n   * Requires `gridstack-extra.css` or `gridstack-extra.min.css` for [2-11],\r\n   * else you will need to generate correct CSS (see https://github.com/gridstack/gridstack.js#change-grid-columns)\r\n   * @param column - Integer > 0 (default 12).\r\n   * @param layout specify the type of re-layout that will happen (position, size, etc...).\r\n   * Note: items will never be outside of the current column boundaries. default (moveScale). Ignored for 1 column\r\n   */\r\n  public column(column: number, layout: ColumnOptions = 'moveScale'): GridStack {\r\n    if (column < 1 || this.opts.column === column) return this;\r\n    let oldColumn = this.getColumn();\r\n\r\n    // if we go into 1 column mode (which happens if we're sized less than minW unless disableOneColumnMode is on)\r\n    // then remember the original columns so we can restore.\r\n    if (column === 1) {\r\n      this._prevColumn = oldColumn;\r\n    } else {\r\n      delete this._prevColumn;\r\n    }\r\n\r\n    this.el.classList.remove('grid-stack-' + oldColumn);\r\n    this.el.classList.add('grid-stack-' + column);\r\n    this.opts.column = this.engine.column = column;\r\n\r\n    // update the items now - see if the dom order nodes should be passed instead (else default to current list)\r\n    let domNodes: GridStackNode[];\r\n    if (column === 1 && this.opts.oneColumnModeDomSort) {\r\n      domNodes = [];\r\n      this.getGridItems().forEach(el => { // get dom elements in order\r\n        if (el.gridstackNode) { domNodes.push(el.gridstackNode); }\r\n      });\r\n      if (!domNodes.length) { domNodes = undefined; }\r\n    }\r\n    this.engine.updateNodeWidths(oldColumn, column, domNodes, layout);\r\n    if (this._isAutoCellHeight) this.cellHeight();\r\n\r\n    // and trigger our event last...\r\n    this._ignoreLayoutsNodeChange = true; // skip layout update\r\n    this._triggerChangeEvent();\r\n    delete this._ignoreLayoutsNodeChange;\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the number of columns in the grid (default 12)\r\n   */\r\n  public getColumn(): number {\r\n    return this.opts.column as number;\r\n  }\r\n\r\n  /** returns an array of grid HTML elements (no placeholder) - used to iterate through our children in DOM order */\r\n  public getGridItems(): GridItemHTMLElement[] {\r\n    return Array.from(this.el.children)\r\n      .filter((el: HTMLElement) => el.matches('.' + this.opts.itemClass) && !el.matches('.' + this.opts.placeholderClass)) as GridItemHTMLElement[];\r\n  }\r\n\r\n  /**\r\n   * Destroys a grid instance. DO NOT CALL any methods or access any vars after this as it will free up members.\r\n   * @param removeDOM if `false` grid and items HTML elements will not be removed from the DOM (Optional. Default `true`).\r\n   */\r\n  public destroy(removeDOM = true): GridStack {\r\n    if (!this.el) return; // prevent multiple calls\r\n    this._updateWindowResizeEvent(true);\r\n    this.setStatic(true, false); // permanently removes DD but don't set CSS class (we're going away)\r\n    this.setAnimation(false);\r\n    if (!removeDOM) {\r\n      this.removeAll(removeDOM);\r\n      this.el.classList.remove(this._styleSheetClass);\r\n    } else {\r\n      this.el.parentNode.removeChild(this.el);\r\n    }\r\n    this._removeStylesheet();\r\n    this.el.removeAttribute('gs-current-row');\r\n    delete this.parentGridItem;\r\n    delete this.opts;\r\n    delete this._placeholder;\r\n    delete this.engine;\r\n    delete this.el.gridstack; // remove circular dependency that would prevent a freeing\r\n    delete this.el;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * enable/disable floating widgets (default: `false`) See [example](http://gridstackjs.com/demo/float.html)\r\n   */\r\n  public float(val: boolean): GridStack {\r\n    if (this.opts.float !== val) {\r\n      this.opts.float = this.engine.float = val;\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * get the current float mode\r\n   */\r\n  public getFloat(): boolean {\r\n    return this.engine.float;\r\n  }\r\n\r\n  /**\r\n   * Get the position of the cell under a pixel on screen.\r\n   * @param position the position of the pixel to resolve in\r\n   * absolute coordinates, as an object with top and left properties\r\n   * @param useDocRelative if true, value will be based on document position vs parent position (Optional. Default false).\r\n   * Useful when grid is within `position: relative` element\r\n   *\r\n   * Returns an object with properties `x` and `y` i.e. the column and row in the grid.\r\n   */\r\n  public getCellFromPixel(position: MousePosition, useDocRelative = false): CellPosition {\r\n    let box = this.el.getBoundingClientRect();\r\n    // console.log(`getBoundingClientRect left: ${box.left} top: ${box.top} w: ${box.w} h: ${box.h}`)\r\n    let containerPos: {top: number, left: number};\r\n    if (useDocRelative) {\r\n      containerPos = {top: box.top + document.documentElement.scrollTop, left: box.left};\r\n      // console.log(`getCellFromPixel scrollTop: ${document.documentElement.scrollTop}`)\r\n    } else {\r\n      containerPos = {top: this.el.offsetTop, left: this.el.offsetLeft}\r\n      // console.log(`getCellFromPixel offsetTop: ${containerPos.left} offsetLeft: ${containerPos.top}`)\r\n    }\r\n    let relativeLeft = position.left - containerPos.left;\r\n    let relativeTop = position.top - containerPos.top;\r\n\r\n    let columnWidth = (box.width / this.getColumn());\r\n    let rowHeight = (box.height / parseInt(this.el.getAttribute('gs-current-row')));\r\n\r\n    return {x: Math.floor(relativeLeft / columnWidth), y: Math.floor(relativeTop / rowHeight)};\r\n  }\r\n\r\n  /** returns the current number of rows, which will be at least `minRow` if set */\r\n  public getRow(): number {\r\n    return Math.max(this.engine.getRow(), this.opts.minRow);\r\n  }\r\n\r\n  /**\r\n   * Checks if specified area is empty.\r\n   * @param x the position x.\r\n   * @param y the position y.\r\n   * @param w the width of to check\r\n   * @param h the height of to check\r\n   */\r\n  public isAreaEmpty(x: number, y: number, w: number, h: number): boolean {\r\n    return this.engine.isAreaEmpty(x, y, w, h);\r\n  }\r\n\r\n  /**\r\n   * If you add elements to your grid by hand, you have to tell gridstack afterwards to make them widgets.\r\n   * If you want gridstack to add the elements for you, use `addWidget()` instead.\r\n   * Makes the given element a widget and returns it.\r\n   * @param els widget or single selector to convert.\r\n   *\r\n   * @example\r\n   * let grid = GridStack.init();\r\n   * grid.el.appendChild('<div id=\"gsi-1\" gs-w=\"3\"></div>');\r\n   * grid.makeWidget('#gsi-1');\r\n   */\r\n  public makeWidget(els: GridStackElement): GridItemHTMLElement {\r\n    let el = GridStack.getElement(els);\r\n    this._prepareElement(el, true);\r\n    this._updateContainerHeight();\r\n    this._triggerAddEvent();\r\n    this._triggerChangeEvent();\r\n    return el;\r\n  }\r\n\r\n  /**\r\n   * Event handler that extracts our CustomEvent data out automatically for receiving custom\r\n   * notifications (see doc for supported events)\r\n   * @param name of the event (see possible values) or list of names space separated\r\n   * @param callback function called with event and optional second/third param\r\n   * (see README documentation for each signature).\r\n   *\r\n   * @example\r\n   * grid.on('added', function(e, items) { log('added ', items)} );\r\n   * or\r\n   * grid.on('added removed change', function(e, items) { log(e.type, items)} );\r\n   *\r\n   * Note: in some cases it is the same as calling native handler and parsing the event.\r\n   * grid.el.addEventListener('added', function(event) { log('added ', event.detail)} );\r\n   *\r\n   */\r\n  public on(name: GridStackEvent, callback: GridStackEventHandlerCallback): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.on(name, callback));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // native CustomEvent handlers - cash the generic handlers so we can easily remove\r\n      let noData = (name === 'enable' || name === 'disable');\r\n      if (noData) {\r\n        this._gsEventHandler[name] = (event: Event) => callback(event);\r\n      } else {\r\n        this._gsEventHandler[name] = (event: CustomEvent) => callback(event, event.detail);\r\n      }\r\n      this.el.addEventListener(name, this._gsEventHandler[name]);\r\n    } else if (name === 'drag' || name === 'dragstart' || name === 'dragstop' || name === 'resizestart' || name === 'resize' || name === 'resizestop' || name === 'dropped') {\r\n      // drag&drop stop events NEED to be call them AFTER we update node attributes so handle them ourself.\r\n      // do same for start event to make it easier...\r\n      this._gsEventHandler[name] = callback;\r\n    } else {\r\n      console.log('GridStack.on(' + name + ') event not supported, but you can still use $(\".grid-stack\").on(...) while jquery-ui is still used internally.');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * unsubscribe from the 'on' event below\r\n   * @param name of the event (see possible values)\r\n   */\r\n  public off(name: GridStackEvent): GridStack {\r\n    // check for array of names being passed instead\r\n    if (name.indexOf(' ') !== -1) {\r\n      let names = name.split(' ') as GridStackEvent[];\r\n      names.forEach(name => this.off(name));\r\n      return this;\r\n    }\r\n\r\n    if (name === 'change' || name === 'added' || name === 'removed' || name === 'enable' || name === 'disable') {\r\n      // remove native CustomEvent handlers\r\n      if (this._gsEventHandler[name]) {\r\n        this.el.removeEventListener(name, this._gsEventHandler[name]);\r\n      }\r\n    }\r\n    delete this._gsEventHandler[name];\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes widget from the grid.\r\n   * @param el  widget or selector to modify\r\n   * @param removeDOM if `false` DOM element won't be removed from the tree (Default? true).\r\n   * @param triggerEvent if `false` (quiet mode) element will not be added to removed list and no 'removed' callbacks will be called (Default? true).\r\n   */\r\n  public removeWidget(els: GridStackElement, removeDOM = true, triggerEvent = true): GridStack {\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (el.parentElement && el.parentElement !== this.el) return; // not our child!\r\n      let node = el.gridstackNode;\r\n      // For Meteor support: https://github.com/gridstack/gridstack.js/pull/272\r\n      if (!node) {\r\n        node = this.engine.nodes.find(n => el === n.el);\r\n      }\r\n      if (!node) return;\r\n\r\n      // remove our DOM data (circular link) and drag&drop permanently\r\n      delete el.gridstackNode;\r\n      this._removeDD(el);\r\n\r\n      this.engine.removeNode(node, removeDOM, triggerEvent);\r\n\r\n      if (removeDOM && el.parentElement) {\r\n        el.remove(); // in batch mode engine.removeNode doesn't call back to remove DOM\r\n      }\r\n    });\r\n    if (triggerEvent) {\r\n      this._triggerRemoveEvent();\r\n      this._triggerChangeEvent();\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Removes all widgets from the grid.\r\n   * @param removeDOM if `false` DOM elements won't be removed from the tree (Default? `true`).\r\n   */\r\n  public removeAll(removeDOM = true): GridStack {\r\n    // always remove our DOM data (circular link) before list gets emptied and drag&drop permanently\r\n    this.engine.nodes.forEach(n => {\r\n      delete n.el.gridstackNode;\r\n      this._removeDD(n.el);\r\n    });\r\n    this.engine.removeAll(removeDOM);\r\n    this._triggerRemoveEvent();\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid animation state.  Toggles the `grid-stack-animate` class.\r\n   * @param doAnimate if true the grid will animate.\r\n   */\r\n  public setAnimation(doAnimate: boolean): GridStack {\r\n    if (doAnimate) {\r\n      this.el.classList.add('grid-stack-animate');\r\n    } else {\r\n      this.el.classList.remove('grid-stack-animate');\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Toggle the grid static state, which permanently removes/add Drag&Drop support, unlike disable()/enable() that just turns it off/on.\r\n   * Also toggle the grid-stack-static class.\r\n   * @param val if true the grid become static.\r\n   */\r\n  public setStatic(val: boolean, updateClass = true): GridStack {\r\n    if (this.opts.staticGrid === val) return this;\r\n    this.opts.staticGrid = val;\r\n    this._setupRemoveDrop();\r\n    this._setupAcceptWidget();\r\n    this.engine.nodes.forEach(n => this._prepareDragDropByNode(n)); // either delete or init Drag&drop\r\n    if (updateClass) { this._setStaticClass(); }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates widget position/size and other info. Note: if you need to call this on all nodes, use load() instead which will update what changed.\r\n   * @param els  widget or selector of objects to modify (note: setting the same x,y for multiple items will be indeterministic and likely unwanted)\r\n   * @param opt new widget options (x,y,w,h, etc..). Only those set will be updated.\r\n   */\r\n  public update(els: GridStackElement, opt: GridStackWidget): GridStack {\r\n\r\n    // support legacy call for now ?\r\n    if (arguments.length > 2) {\r\n      console.warn('gridstack.ts: `update(el, x, y, w, h)` is deprecated. Use `update(el, {x, w, content, ...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 1;\r\n      opt = { x:a[i++], y:a[i++], w:a[i++], h:a[i++] };\r\n      return this.update(els, opt);\r\n    }\r\n\r\n    GridStack.getElements(els).forEach(el => {\r\n      if (!el || !el.gridstackNode) return;\r\n      let n = el.gridstackNode;\r\n      let w = Utils.cloneDeep(opt); // make a copy we can modify in case they re-use it or multiple items\r\n      delete w.autoPosition;\r\n\r\n      // move/resize widget if anything changed\r\n      let keys = ['x', 'y', 'w', 'h'];\r\n      let m: GridStackWidget;\r\n      if (keys.some(k => w[k] !== undefined && w[k] !== n[k])) {\r\n        m = {};\r\n        keys.forEach(k => {\r\n          m[k] = (w[k] !== undefined) ? w[k] : n[k];\r\n          delete w[k];\r\n        });\r\n      }\r\n      // for a move as well IFF there is any min/max fields set\r\n      if (!m && (w.minW || w.minH || w.maxW || w.maxH)) {\r\n        m = {}; // will use node position but validate values\r\n      }\r\n\r\n      // check for content changing\r\n      if (w.content) {\r\n        let sub = el.querySelector('.grid-stack-item-content');\r\n        if (sub && sub.innerHTML !== w.content) {\r\n          sub.innerHTML = w.content;\r\n        }\r\n        delete w.content;\r\n      }\r\n\r\n      // any remaining fields are assigned, but check for dragging changes, resize constrain\r\n      let changed = false;\r\n      let ddChanged = false;\r\n      for (const key in w) {\r\n        if (key[0] !== '_' && n[key] !== w[key]) {\r\n          n[key] = w[key];\r\n          changed = true;\r\n          ddChanged = ddChanged || (!this.opts.staticGrid && (key === 'noResize' || key === 'noMove' || key === 'locked'));\r\n        }\r\n      }\r\n\r\n      // finally move the widget\r\n      if (m) {\r\n        this.engine.cleanNodes()\r\n          .beginUpdate(n)\r\n          .moveNode(n, m);\r\n        this._updateContainerHeight();\r\n        this._triggerChangeEvent();\r\n        this.engine.endUpdate();\r\n      }\r\n      if (changed) { // move will only update x,y,w,h so update the rest too\r\n        this._writeAttr(el, n);\r\n      }\r\n      if (ddChanged) {\r\n        this._prepareDragDropByNode(n);\r\n      }\r\n    });\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Updates the margins which will set all 4 sides at once - see `GridStackOptions.margin` for format options (CSS string format of 1,2,4 values or single number).\r\n   * @param value margin value\r\n   */\r\n  public margin(value: numberOrString): GridStack {\r\n    let isMultiValue = (typeof value === 'string' && value.split(' ').length > 1);\r\n    // check if we can skip re-creating our CSS file... won't check if multi values (too much hassle)\r\n    if (!isMultiValue) {\r\n      let data = Utils.parseHeight(value);\r\n      if (this.opts.marginUnit === data.unit && this.opts.margin === data.h) return;\r\n    }\r\n    // re-use existing margin handling\r\n    this.opts.margin = value;\r\n    this.opts.marginTop = this.opts.marginBottom = this.opts.marginLeft = this.opts.marginRight = undefined;\r\n    this._initMargin();\r\n\r\n    this._updateStyles(true); // true = force re-create\r\n\r\n    return this;\r\n  }\r\n\r\n  /** returns current margin number value (undefined if 4 sides don't match) */\r\n  public getMargin(): number { return this.opts.margin as number; }\r\n\r\n  /**\r\n   * Returns true if the height of the grid will be less than the vertical\r\n   * constraint. Always returns true if grid doesn't have height constraint.\r\n   * @param node contains x,y,w,h,auto-position options\r\n   *\r\n   * @example\r\n   * if (grid.willItFit(newWidget)) {\r\n   *   grid.addWidget(newWidget);\r\n   * } else {\r\n   *   alert('Not enough free space to place the widget');\r\n   * }\r\n   */\r\n  public willItFit(node: GridStackWidget): boolean {\r\n    // support legacy call for now\r\n    if (arguments.length > 1) {\r\n      console.warn('gridstack.ts: `willItFit(x,y,w,h,autoPosition)` is deprecated. Use `willItFit({x, y,...})`. It will be removed soon');\r\n      // eslint-disable-next-line prefer-rest-params\r\n      let a = arguments, i = 0,\r\n        w: GridStackWidget = { x:a[i++], y:a[i++], w:a[i++], h:a[i++], autoPosition:a[i++] };\r\n      return this.willItFit(w);\r\n    }\r\n    return this.engine.willItFit(node);\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerChangeEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    let elements = this.engine.getDirtyNodes(true); // verify they really changed\r\n    if (elements && elements.length) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(elements);\r\n      }\r\n      this._triggerEvent('change', elements);\r\n    }\r\n    this.engine.saveInitial(); // we called, now reset initial values & dirty flags\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerAddEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.addedNodes && this.engine.addedNodes.length > 0) {\r\n      if (!this._ignoreLayoutsNodeChange) {\r\n        this.engine.layoutsNodesChange(this.engine.addedNodes);\r\n      }\r\n      // prevent added nodes from also triggering 'change' event (which is called next)\r\n      this.engine.addedNodes.forEach(n => { delete n._dirty; });\r\n      this._triggerEvent('added', this.engine.addedNodes);\r\n      this.engine.addedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  public _triggerRemoveEvent(): GridStack {\r\n    if (this.engine.batchMode) return this;\r\n    if (this.engine.removedNodes && this.engine.removedNodes.length > 0) {\r\n      this._triggerEvent('removed', this.engine.removedNodes);\r\n      this.engine.removedNodes = [];\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _triggerEvent(type: string, data?: GridStackNode[]): GridStack {\r\n    let event = data ? new CustomEvent(type, {bubbles: false, detail: data}) : new Event(type);\r\n    this.el.dispatchEvent(event);\r\n    return this;\r\n  }\r\n\r\n  /** @internal called to delete the current dynamic style sheet used for our layout */\r\n  protected _removeStylesheet(): GridStack {\r\n\r\n    if (this._styles) {\r\n      Utils.removeStylesheet(this._styleSheetClass);\r\n      delete this._styles;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal updated/create the CSS styles for row based layout and initial margin setting */\r\n  protected _updateStyles(forceUpdate = false, maxH?: number): GridStack {\r\n    // call to delete existing one if we change cellHeight / margin\r\n    if (forceUpdate) {\r\n      this._removeStylesheet();\r\n    }\r\n\r\n    if (!maxH) maxH = this.getRow();\r\n    this._updateContainerHeight();\r\n\r\n    // if user is telling us they will handle the CSS themselves by setting heights to 0. Do we need this opts really ??\r\n    if (this.opts.cellHeight === 0) {\r\n      return this;\r\n    }\r\n\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let cellHeightUnit = this.opts.cellHeightUnit;\r\n    let prefix = `.${this._styleSheetClass} > .${this.opts.itemClass}`;\r\n\r\n    // create one as needed\r\n    if (!this._styles) {\r\n      // insert style to parent (instead of 'head' by default) to support WebComponent\r\n      let styleLocation = this.opts.styleInHead ? undefined : this.el.parentNode as HTMLElement;\r\n      this._styles = Utils.createStylesheet(this._styleSheetClass, styleLocation);\r\n      if (!this._styles) return this;\r\n      this._styles._max = 0;\r\n\r\n      // these are done once only\r\n      Utils.addCSSRule(this._styles, prefix, `min-height: ${cellHeight}${cellHeightUnit}`);\r\n      // content margins\r\n      let top: string = this.opts.marginTop + this.opts.marginUnit;\r\n      let bottom: string = this.opts.marginBottom + this.opts.marginUnit;\r\n      let right: string = this.opts.marginRight + this.opts.marginUnit;\r\n      let left: string = this.opts.marginLeft + this.opts.marginUnit;\r\n      let content = `${prefix} > .grid-stack-item-content`;\r\n      let placeholder = `.${this._styleSheetClass} > .grid-stack-placeholder > .placeholder-content`;\r\n      Utils.addCSSRule(this._styles, content, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      Utils.addCSSRule(this._styles, placeholder, `top: ${top}; right: ${right}; bottom: ${bottom}; left: ${left};`);\r\n      // resize handles offset (to match margin)\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-ne`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-e`, `right: ${right}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-se`, `right: ${right}; bottom: ${bottom}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-nw`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-w`, `left: ${left}`);\r\n      Utils.addCSSRule(this._styles, `${prefix} > .ui-resizable-sw`, `left: ${left}; bottom: ${bottom}`);\r\n    }\r\n\r\n    // now update the height specific fields\r\n    maxH = maxH || this._styles._max;\r\n    if (maxH > this._styles._max) {\r\n      let getHeight = (rows: number): string => (cellHeight * rows) + cellHeightUnit;\r\n      for (let i = this._styles._max + 1; i <= maxH; i++) { // start at 1\r\n        let h: string = getHeight(i);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-y=\"${i-1}\"]`,   `top: ${getHeight(i-1)}`); // start at 0\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-h=\"${i}\"]`,     `height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-min-h=\"${i}\"]`, `min-height: ${h}`);\r\n        Utils.addCSSRule(this._styles, `${prefix}[gs-max-h=\"${i}\"]`, `max-height: ${h}`);\r\n      }\r\n      this._styles._max = maxH;\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _updateContainerHeight(): GridStack {\r\n    if (!this.engine || this.engine.batchMode) return this;\r\n    let row = this.getRow() + this._extraDragRow; // checks for minRow already\r\n    // check for css min height\r\n    // Note: we don't handle %,rem correctly so comment out, beside we don't need need to create un-necessary\r\n    // rows as the CSS will make us bigger than our set height if needed... not sure why we had this.\r\n    // let cssMinHeight = parseInt(getComputedStyle(this.el)['min-height']);\r\n    // if (cssMinHeight > 0) {\r\n    //   let minRow = Math.round(cssMinHeight / this.getCellHeight(true));\r\n    //   if (row < minRow) {\r\n    //     row = minRow;\r\n    //   }\r\n    // }\r\n    this.el.setAttribute('gs-current-row', String(row));\r\n    if (row === 0) {\r\n      this.el.style.removeProperty('min-height');\r\n      return this;\r\n    }\r\n    let cellHeight = this.opts.cellHeight as number;\r\n    let unit = this.opts.cellHeightUnit;\r\n    if (!cellHeight) return this;\r\n    this.el.style.minHeight = row * cellHeight + unit;\r\n    return this;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _prepareElement(el: GridItemHTMLElement, triggerAddEvent = false, node?: GridStackNode): GridStack {\r\n    if (!node) {\r\n      el.classList.add(this.opts.itemClass);\r\n      node = this._readAttr(el);\r\n    }\r\n    el.gridstackNode = node;\r\n    node.el = el;\r\n    node.grid = this;\r\n    let copy = {...node};\r\n    node = this.engine.addNode(node, triggerAddEvent);\r\n    // write node attr back in case there was collision or we have to fix bad values during addNode()\r\n    if (!Utils.same(node, copy)) {\r\n      this._writeAttr(el, node);\r\n    }\r\n    this._prepareDragDropByNode(node);\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write position x,y,w,h attributes back to element */\r\n  protected _writePosAttr(el: HTMLElement, n: GridStackPosition): GridStack {\r\n    if (n.x !== undefined && n.x !== null) { el.setAttribute('gs-x', String(n.x)); }\r\n    if (n.y !== undefined && n.y !== null) { el.setAttribute('gs-y', String(n.y)); }\r\n    if (n.w) { el.setAttribute('gs-w', String(n.w)); }\r\n    if (n.h) { el.setAttribute('gs-h', String(n.h)); }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to write any default attributes back to element */\r\n  protected _writeAttr(el: HTMLElement, node: GridStackWidget): GridStack {\r\n    if (!node) return this;\r\n    this._writePosAttr(el, node);\r\n\r\n    let attrs /*: GridStackWidget but strings */ = { // remaining attributes\r\n      autoPosition: 'gs-auto-position',\r\n      minW: 'gs-min-w',\r\n      minH: 'gs-min-h',\r\n      maxW: 'gs-max-w',\r\n      maxH: 'gs-max-h',\r\n      noResize: 'gs-no-resize',\r\n      noMove: 'gs-no-move',\r\n      locked: 'gs-locked',\r\n      id: 'gs-id',\r\n      resizeHandles: 'gs-resize-handles'\r\n    };\r\n    for (const key in attrs) {\r\n      if (node[key]) { // 0 is valid for x,y only but done above already and not in list anyway\r\n        el.setAttribute(attrs[key], String(node[key]));\r\n      } else {\r\n        el.removeAttribute(attrs[key]);\r\n      }\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /** @internal call to read any default attributes from element */\r\n  protected _readAttr(el: HTMLElement): GridStackWidget {\r\n    let node: GridStackNode = {};\r\n    node.x = Utils.toNumber(el.getAttribute('gs-x'));\r\n    node.y = Utils.toNumber(el.getAttribute('gs-y'));\r\n    node.w = Utils.toNumber(el.getAttribute('gs-w'));\r\n    node.h = Utils.toNumber(el.getAttribute('gs-h'));\r\n    node.maxW = Utils.toNumber(el.getAttribute('gs-max-w'));\r\n    node.minW = Utils.toNumber(el.getAttribute('gs-min-w'));\r\n    node.maxH = Utils.toNumber(el.getAttribute('gs-max-h'));\r\n    node.minH = Utils.toNumber(el.getAttribute('gs-min-h'));\r\n    node.autoPosition = Utils.toBool(el.getAttribute('gs-auto-position'));\r\n    node.noResize = Utils.toBool(el.getAttribute('gs-no-resize'));\r\n    node.noMove = Utils.toBool(el.getAttribute('gs-no-move'));\r\n    node.locked = Utils.toBool(el.getAttribute('gs-locked'));\r\n    node.resizeHandles = el.getAttribute('gs-resize-handles');\r\n    node.id = el.getAttribute('gs-id');\r\n\r\n    // remove any key not found (null or false which is default)\r\n    for (const key in node) {\r\n      if (!node.hasOwnProperty(key)) return;\r\n      if (!node[key] && node[key] !== 0) { // 0 can be valid value (x,y only really)\r\n        delete node[key];\r\n      }\r\n    }\r\n\r\n    return node;\r\n  }\r\n\r\n  /** @internal */\r\n  protected _setStaticClass(): GridStack {\r\n    let classes = ['grid-stack-static'];\r\n\r\n    if (this.opts.staticGrid) {\r\n      this.el.classList.add(...classes);\r\n      this.el.setAttribute('gs-static', 'true');\r\n    } else {\r\n      this.el.classList.remove(...classes);\r\n      this.el.removeAttribute('gs-static');\r\n\r\n    }\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * called when we are being resized by the window - check if the one Column Mode needs to be turned on/off\r\n   * and remember the prev columns we used, or get our count from parent, as well as check for auto cell height (square)\r\n   */\r\n  public onParentResize(): GridStack {\r\n    if (!this.el || !this.el.clientWidth) return; // return if we're gone or no size yet (will get called again)\r\n    let changedColumn = false;\r\n\r\n    // see if we're nested and take our column count from our parent....\r\n    if (this._autoColumn && this.parentGridItem) {\r\n      if (this.opts.column !== this.parentGridItem.w) {\r\n        changedColumn = true;\r\n        this.column(this.parentGridItem.w, 'none');\r\n      }\r\n    } else {\r\n      // else check for 1 column in/out behavior\r\n      let oneColumn = !this.opts.disableOneColumnMode && this.el.clientWidth <= this.opts.oneColumnSize;\r\n      if ((this.opts.column === 1) !== oneColumn) {\r\n        changedColumn = true;\r\n        if (this.opts.animate) { this.setAnimation(false); } // 1 <-> 12 is too radical, turn off animation\r\n        this.column(oneColumn ? 1 : this._prevColumn);\r\n        if (this.opts.animate) { this.setAnimation(true); }\r\n      }\r\n    }\r\n\r\n    // make the cells content square again\r\n    if (this._isAutoCellHeight) {\r\n      if (!changedColumn && this.opts.cellHeightThrottle) {\r\n        if (!this._cellHeightThrottle) {\r\n          this._cellHeightThrottle = Utils.throttle(() => this.cellHeight(), this.opts.cellHeightThrottle);\r\n        }\r\n        this._cellHeightThrottle();\r\n      } else {\r\n        // immediate update if we've changed column count or have no threshold\r\n        this.cellHeight();\r\n      }\r\n    }\r\n\r\n    // finally update any nested grids\r\n    this.engine.nodes.forEach(n => {\r\n      if (n.subGrid) {(n.subGrid as GridStack).onParentResize()}\r\n    });\r\n\r\n    return this;\r\n  }\r\n\r\n  /** add or remove the window size event handler */\r\n  protected _updateWindowResizeEvent(forceRemove = false): GridStack {\r\n    // only add event if we're not nested (parent will call us) and we're auto sizing cells or supporting oneColumn (i.e. doing work)\r\n    const workTodo = (this._isAutoCellHeight || !this.opts.disableOneColumnMode) && !this.parentGridItem;\r\n\r\n    if (!forceRemove && workTodo && !this._windowResizeBind) {\r\n      this._windowResizeBind = this.onParentResize.bind(this); // so we can properly remove later\r\n      window.addEventListener('resize', this._windowResizeBind);\r\n    } else if ((forceRemove || !workTodo) && this._windowResizeBind) {\r\n      window.removeEventListener('resize', this._windowResizeBind);\r\n      delete this._windowResizeBind; // remove link to us so we can free\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /** @internal convert a potential selector into actual element */\r\n  public static getElement(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement { return Utils.getElement(els) }\r\n  /** @internal */\r\n  public static getElements(els: GridStackElement = '.grid-stack-item'): GridItemHTMLElement[] { return Utils.getElements(els) }\r\n  /** @internal */\r\n  public static getGridElement(els: GridStackElement): GridHTMLElement { return GridStack.getElement(els) }\r\n  /** @internal */\r\n  public static getGridElements(els: string): GridHTMLElement[] { return Utils.getElements(els) }\r\n\r\n  /** @internal initialize margin top/bottom/left/right and units */\r\n  protected _initMargin(): GridStack {\r\n\r\n    let data: HeightData;\r\n    let margin = 0;\r\n\r\n    // support passing multiple values like CSS (ex: '5px 10px 0 20px')\r\n    let margins: string[] = [];\r\n    if (typeof this.opts.margin === 'string') {\r\n      margins = this.opts.margin.split(' ')\r\n    }\r\n    if (margins.length === 2) { // top/bot, left/right like CSS\r\n      this.opts.marginTop = this.opts.marginBottom = margins[0];\r\n      this.opts.marginLeft = this.opts.marginRight = margins[1];\r\n    } else if (margins.length === 4) { // Clockwise like CSS\r\n      this.opts.marginTop = margins[0];\r\n      this.opts.marginRight = margins[1];\r\n      this.opts.marginBottom = margins[2];\r\n      this.opts.marginLeft = margins[3];\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.margin);\r\n      this.opts.marginUnit = data.unit;\r\n      margin = this.opts.margin = data.h;\r\n    }\r\n\r\n    // see if top/bottom/left/right need to be set as well\r\n    if (this.opts.marginTop === undefined) {\r\n      this.opts.marginTop = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginTop);\r\n      this.opts.marginTop = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginBottom === undefined) {\r\n      this.opts.marginBottom = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginBottom);\r\n      this.opts.marginBottom = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginRight === undefined) {\r\n      this.opts.marginRight = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginRight);\r\n      this.opts.marginRight = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n\r\n    if (this.opts.marginLeft === undefined) {\r\n      this.opts.marginLeft = margin;\r\n    } else {\r\n      data = Utils.parseHeight(this.opts.marginLeft);\r\n      this.opts.marginLeft = data.h;\r\n      delete this.opts.margin;\r\n    }\r\n    this.opts.marginUnit = data.unit; // in case side were spelled out, use those units instead...\r\n    if (this.opts.marginTop === this.opts.marginBottom && this.opts.marginLeft === this.opts.marginRight && this.opts.marginTop === this.opts.marginRight) {\r\n      this.opts.margin = this.opts.marginTop; // makes it easier to check for no-ops in setMargin()\r\n    }\r\n    return this;\r\n  }\r\n\r\n  static GDRev = '7.1.0';\r\n\r\n  /*\r\n   * drag&drop empty stubs that will be implemented in dd-gridstack.ts for non static grid\r\n   * so we don't incur the load unless needed.\r\n   * NOTE: had to make those methods public in order to define them else as\r\n   *   GridStack.prototype._setupAcceptWidget = function()\r\n   * maybe there is a better way ????\r\n   */\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n\r\n  /**\r\n   * call to setup dragging in from the outside (say toolbar), by specifying the class selection and options.\r\n   * Called during GridStack.init() as options, but can also be called directly (last param are used) in case the toolbar\r\n   * is dynamically create and needs to be set later.\r\n   * @param dragIn string selector (ex: '.sidebar .grid-stack-item')\r\n   * @param dragInOptions options - see DDDragInOpt. (default: {handle: '.grid-stack-item-content', appendTo: 'body'}\r\n   **/\r\n  public static setupDragIn(dragIn?: string, dragInOptions?: DDDragInOpt): void { /* implemented in dd-gridstack.ts */ }\r\n\r\n  /**\r\n   * Enables/Disables dragging by the user of specific grid element. If you want all items, and have it affect future items, use enableMove() instead. No-op for static grids.\r\n   * IF you are looking to prevent an item from moving (due to being pushed around by another during collision) use locked property instead.\r\n   * @param els widget or selector to modify.\r\n   * @param val if true widget will be draggable.\r\n   */\r\n  public movable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/Disables user resizing of specific grid element. If you want all items, and have it affect future items, use enableResize() instead. No-op for static grids.\r\n   * @param els  widget or selector to modify\r\n   * @param val  if true widget will be resizable.\r\n   */\r\n  public resizable(els: GridStackElement, val: boolean): GridStack { return this }\r\n  /**\r\n   * Temporarily disables widgets moving/resizing.\r\n   * If you want a more permanent way (which freezes up resources) use `setStatic(true)` instead.\r\n   * Note: no-op for static grid\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(false);\r\n   *  grid.enableResize(false);\r\n   */\r\n  public disable(): GridStack { return this }\r\n  /**\r\n   * Re-enables widgets moving/resizing - see disable().\r\n   * Note: no-op for static grid.\r\n   * This is a shortcut for:\r\n   * @example\r\n   *  grid.enableMove(true);\r\n   *  grid.enableResize(true);\r\n   */\r\n  public enable(): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget moving. No-op for static grids.\r\n   */\r\n  public enableMove(doEnable: boolean): GridStack { return this }\r\n  /**\r\n   * Enables/disables widget resizing. No-op for static grids.\r\n   */\r\n  public enableResize(doEnable: boolean): GridStack { return this }\r\n\r\n  /** @internal removes any drag&drop present (called during destroy) */\r\n  public _removeDD(el: GridItemHTMLElement): GridStack { return this }\r\n  /** @internal called to add drag over support to support widgets */\r\n  public _setupAcceptWidget(): GridStack { return this }\r\n  /** @internal called to setup a trash drop zone if the user specifies it */\r\n  public _setupRemoveDrop(): GridStack { return this }\r\n  /** @internal prepares the element for drag&drop **/\r\n  public _prepareDragDropByNode(node: GridStackNode): GridStack { return this }\r\n  /** @internal handles actual drag/resize start **/\r\n  public _onStartMoving(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal handles actual drag/resize **/\r\n  public _dragOrResize(el: GridItemHTMLElement, event: Event, ui: DDUIData, node: GridStackNode, cellWidth: number, cellHeight: number): void { return }\r\n  /** @internal called when a node leaves our area (mouse out or shape outside) **/\r\n  public _leave(el: GridItemHTMLElement, helper?: GridItemHTMLElement): void { return }\r\n  // legacy method removed\r\n  public commit(): GridStack { obsolete(this, this.batchUpdate(false), 'commit', 'batchUpdate', '5.2'); return this; }\r\n}\r\n\r\n/*\r\n * and include D&D by default, which override some methods here\r\n * TODO: while we can generate a gridstack-static.js at smaller size - saves about 31k (41k -> 72k)\r\n * I don't know how to generate the DD only code at the remaining 31k to delay load as code depends on Gridstack.ts\r\n */\r\nimport { DDGridStack } from './dd-gridstack'; // not called, but compiled in\r\nimport { isTouch } from './dd-touch';\r\nimport { DDManager } from './dd-manager';\r\nexport * from './dd-gridstack';\r\n","/**\r\n * types.ts 7.1.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStack } from './gridstack';\r\nimport { GridStackEngine } from './gridstack-engine';\r\n\r\n// default values for grid options - used during init and when saving out\r\nexport const gridDefaults: GridStackOptions = {\r\n  alwaysShowResizeHandle: 'mobile',\r\n  animate: true,\r\n  auto: true,\r\n  cellHeight: 'auto',\r\n  cellHeightThrottle: 100,\r\n  cellHeightUnit: 'px',\r\n  column: 12,\r\n  draggable: { handle: '.grid-stack-item-content', appendTo: 'body' },\r\n  handle: '.grid-stack-item-content',\r\n  itemClass: 'grid-stack-item',\r\n  margin: 10,\r\n  marginUnit: 'px',\r\n  maxRow: 0,\r\n  minRow: 0,\r\n  oneColumnSize: 768,\r\n  placeholderClass: 'grid-stack-placeholder',\r\n  placeholderText: '',\r\n  removableOptions: { accept: '.grid-stack-item' },\r\n  resizable: { handles: 'se' },\r\n  rtl: 'auto',\r\n\r\n  // **** same as not being set ****\r\n  // disableDrag: false,\r\n  // disableOneColumnMode: false,\r\n  // disableResize: false,\r\n  // float: false,\r\n  // handleClass: null,\r\n  // oneColumnModeDomSort: false,\r\n  // removable: false,\r\n  // staticGrid: false,\r\n  // styleInHead: false,\r\n};\r\n\r\n/** default dragIn options */\r\nexport const dragInDefaultOptions: DDDragInOpt = {\r\n  handle: '.grid-stack-item-content',\r\n  appendTo: 'body',\r\n  // revert: 'invalid',\r\n  // scroll: false,\r\n};\r\n\r\n/** different layout options when changing # of columns,\r\n * including a custom function that takes new/old column count, and array of new/old positions\r\n * Note: new list may be partially already filled if we have a cache of the layout at that size and new items were added later.\r\n */\r\nexport type ColumnOptions = 'moveScale' | 'move' | 'scale' | 'none' |\r\n  ((column: number, oldColumn: number, nodes: GridStackNode[], oldNodes: GridStackNode[]) => void);\r\n\r\nexport type numberOrString = number | string;\r\nexport interface GridItemHTMLElement extends HTMLElement {\r\n  /** pointer to grid node instance */\r\n  gridstackNode?: GridStackNode;\r\n  /** @internal */\r\n  _gridstackNodeOrig?: GridStackNode;\r\n}\r\n\r\nexport type GridStackElement = string | HTMLElement | GridItemHTMLElement;\r\n\r\nexport type GridStackEventHandlerCallback = (event: Event, arg2?: GridItemHTMLElement | GridStackNode | GridStackNode[], newNode?: GridStackNode) => void;\r\n\r\n/**\r\n * Defines the options for a Grid\r\n */\r\nexport interface GridStackOptions {\r\n  /**\r\n   * accept widgets dragged from other grids or from outside (default: `false`). Can be:\r\n   * `true` (uses `'.grid-stack-item'` class filter) or `false`,\r\n   * string for explicit class name,\r\n   * function returning a boolean. See [example](http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  acceptWidgets?: boolean | string | ((element: Element) => boolean);\r\n\r\n  /** possible values (default: `mobile`) - does not apply to non-resizable widgets\r\n    * `false` the resizing handles are only shown while hovering over a widget\r\n    * `true` the resizing handles are always shown\r\n    * 'mobile' if running on a mobile device, default to `true` (since there is no hovering per say), else `false`.\r\n    * this uses this condition on browser agent check:\r\n    `alwaysShowResizeHandle: /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test( navigator.userAgent )`\r\n    See [example](http://gridstack.github.io/gridstack.js/demo/mobile.html) */\r\n  alwaysShowResizeHandle?: true | false | 'mobile';\r\n\r\n  /** turns animation on (default?: true) */\r\n  animate?: boolean;\r\n\r\n  /** if false gridstack will not initialize existing items (default?: true) */\r\n  auto?: boolean;\r\n\r\n  /**\r\n   * one cell height (default?: 'auto'). Can be:\r\n   *  an integer (px)\r\n   *  a string (ex: '100px', '10em', '10rem'). Note: % doesn't right - see demo/cell-height.html\r\n   *  0, in which case the library will not generate styles for rows. Everything must be defined in your own CSS files.\r\n   *  'auto' - height will be calculated for square cells (width / column) and updated live as you resize the window - also see `cellHeightThrottle`\r\n   *  'initial' - similar to 'auto' (start at square cells) but stay that size during window resizing.\r\n   */\r\n  cellHeight?: numberOrString;\r\n\r\n  /** throttle time delay (in ms) used when cellHeight='auto' to improve performance vs usability (default?: 100).\r\n   * A value of 0 will make it instant at a cost of re-creating the CSS file at ever window resize event!\r\n   * */\r\n  cellHeightThrottle?: number;\r\n\r\n  /** (internal) unit for cellHeight (default? 'px') which is set when a string cellHeight with a unit is passed (ex: '10rem') */\r\n  cellHeightUnit?: string;\r\n\r\n  /** list of children item to create when calling load() or addGrid() */\r\n  children?: GridStackWidget[];\r\n\r\n  /** number of columns (default?: 12). Note: IF you change this, CSS also have to change. See https://github.com/gridstack/gridstack.js#change-grid-columns.\r\n   * Note: for nested grids, it is recommended to use 'auto' which will always match the container grid-item current width (in column) to keep inside and outside\r\n   * items always to same. flag is not supported for regular non-nested grids.\r\n   */\r\n  column?: number | 'auto';\r\n\r\n  /** additional class on top of '.grid-stack' (which is required for our CSS) to differentiate this instance.\r\n  Note: only used by addGrid(), else your element should have the needed class */\r\n  class?: string;\r\n\r\n  /** disallows dragging of widgets (default?: false) */\r\n  disableDrag?: boolean;\r\n\r\n  /** disables the onColumnMode when the grid width is less than oneColumnSize (default?: false) */\r\n  disableOneColumnMode?: boolean;\r\n\r\n  /** disallows resizing of widgets (default?: false). */\r\n  disableResize?: boolean;\r\n\r\n  /** allows to override UI draggable options. (default?: { handle?: '.grid-stack-item-content', appendTo?: 'body' }) */\r\n  draggable?: DDDragOpt;\r\n\r\n  /** @internal Use `GridStack.setupDragIn()` instead (global, not per grid). old way to allow external items to be draggable. (default: undefined) */\r\n  dragIn?: string;\r\n\r\n  /** @internal Use `GridStack.setupDragIn()` instead (global, not per grid).  old way to allow external items to be draggable. (default: undefined) */\r\n  dragInOptions?: DDDragInOpt;\r\n\r\n  /** let user drag nested grid items out of a parent or not (default true - not supported yet) */\r\n  //dragOut?: boolean;\r\n\r\n  /** the type of engine to create (so you can subclass) default to GridStackEngine */\r\n  engineClass?: typeof GridStackEngine;\r\n\r\n  /** enable floating widgets (default?: false) See example (http://gridstack.github.io/gridstack.js/demo/float.html) */\r\n  float?: boolean;\r\n\r\n  /** draggable handle selector (default?: '.grid-stack-item-content') */\r\n  handle?: string;\r\n\r\n  /** draggable handle class (e.g. 'grid-stack-item-content'). If set 'handle' is ignored (default?: null) */\r\n  handleClass?: string;\r\n\r\n  /** id used to debug grid instance, not currently stored in DOM attributes */\r\n  id?: numberOrString;\r\n\r\n  /** additional widget class (default?: 'grid-stack-item') */\r\n  itemClass?: string;\r\n\r\n  /**\r\n   * gap between grid item and content (default?: 10). This will set all 4 sides and support the CSS formats below\r\n   *  an integer (px)\r\n   *  a string with possible units (ex: '2em', '20px', '2rem')\r\n   *  string with space separated values (ex: '5px 10px 0 20px' for all 4 sides, or '5em 10em' for top/bottom and left/right pairs like CSS).\r\n   * Note: all sides must have same units (last one wins, default px)\r\n   */\r\n  margin?: numberOrString;\r\n\r\n  /** OLD way to optionally set each side - use margin: '5px 10px 0 20px' instead. Used internally to store each side. */\r\n  marginTop?: numberOrString;\r\n  marginRight?: numberOrString;\r\n  marginBottom?: numberOrString;\r\n  marginLeft?: numberOrString;\r\n\r\n  /** (internal) unit for margin (default? 'px') set when `margin` is set as string with unit (ex: 2rem') */\r\n  marginUnit?: string;\r\n\r\n  /** maximum rows amount. Default? is 0 which means no maximum rows */\r\n  maxRow?: number;\r\n\r\n  /** minimum rows amount. Default is `0`. You can also do this with `min-height` CSS attribute\r\n   * on the grid div in pixels, which will round to the closest row.\r\n   */\r\n  minRow?: number;\r\n\r\n  /** minimal width before grid will be shown in one column mode (default?: 768) */\r\n  oneColumnSize?: number;\r\n\r\n  /**\r\n   * set to true if you want oneColumnMode to use the DOM order and ignore x,y from normal multi column\r\n   * layouts during sorting. This enables you to have custom 1 column layout that differ from the rest. (default?: false)\r\n   */\r\n  oneColumnModeDomSort?: boolean;\r\n\r\n  /** class for placeholder (default?: 'grid-stack-placeholder') */\r\n  placeholderClass?: string;\r\n\r\n  /** placeholder default content (default?: '') */\r\n  placeholderText?: string;\r\n\r\n  /** allows to override UI resizable options. (default?: { handles: 'se' }) */\r\n  resizable?: DDResizeOpt;\r\n\r\n  /**\r\n   * if true widgets could be removed by dragging outside of the grid. It could also be a selector string (ex: \".trash\"),\r\n   * in this case widgets will be removed by dropping them there (default?: false)\r\n   * See example (http://gridstack.github.io/gridstack.js/demo/two.html)\r\n   */\r\n  removable?: boolean | string;\r\n\r\n  /** allows to override UI removable options. (default?: { accept: '.grid-stack-item' }) */\r\n  removableOptions?: DDRemoveOpt;\r\n\r\n  /** fix grid number of rows. This is a shortcut of writing `minRow:N, maxRow:N`. (default `0` no constrain) */\r\n  row?: number;\r\n\r\n  /**\r\n   * if true turns grid to RTL. Possible values are true, false, 'auto' (default?: 'auto')\r\n   * See [example](http://gridstack.github.io/gridstack.js/demo/rtl.html)\r\n   */\r\n  rtl?: boolean | 'auto';\r\n\r\n  /**\r\n   * makes grid static (default?: false). If `true` widgets are not movable/resizable.\r\n   * You don't even need draggable/resizable. A CSS class\r\n   * 'grid-stack-static' is also added to the element.\r\n   */\r\n  staticGrid?: boolean;\r\n\r\n  /** if `true` will add style element to `<head>` otherwise will add it to element's parent node (default `false`). */\r\n  styleInHead?: boolean;\r\n\r\n  /** list of differences in options for automatically created sub-grids under us */\r\n  subGrid?: GridStackOptions;\r\n\r\n  /** enable/disable the creation of sub-grids on the fly by dragging items completely\r\n   * over others (nest) vs partially (push). Forces `DDDragOpt.pause=true` to accomplish that. */\r\n  subGridDynamic?: boolean;\r\n}\r\n\r\n/** options used during GridStackEngine.moveNode() */\r\nexport interface GridStackMoveOpts extends GridStackPosition {\r\n  /** node to skip collision */\r\n  skip?: GridStackNode;\r\n  /** do we pack (default true) */\r\n  pack?: boolean;\r\n  /** true if we are calling this recursively to prevent simple swap or coverage collision - default false*/\r\n  nested?: boolean;\r\n  /** vars to calculate other cells coordinates */\r\n  cellWidth?: number;\r\n  cellHeight?: number;\r\n  marginTop?: number;\r\n  marginBottom?: number;\r\n  marginLeft?: number;\r\n  marginRight?: number;\r\n  /** position in pixels of the currently dragged items (for overlap check) */\r\n  rect?: GridStackPosition;\r\n  /** true if we're live resizing */\r\n  resizing?: boolean;\r\n  /** best node (most coverage) we collied with */\r\n  collide?: GridStackNode;\r\n}\r\n\r\nexport interface GridStackPosition {\r\n  /** widget position x (default?: 0) */\r\n  x?: number;\r\n  /** widget position y (default?: 0) */\r\n  y?: number;\r\n  /** widget dimension width (default?: 1) */\r\n  w?: number;\r\n  /** widget dimension height (default?: 1) */\r\n  h?: number;\r\n}\r\n\r\n/**\r\n * GridStack Widget creation options\r\n */\r\nexport interface GridStackWidget extends GridStackPosition {\r\n  /** if true then x, y parameters will be ignored and widget will be places on the first available position (default?: false) */\r\n  autoPosition?: boolean;\r\n  /** minimum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minW?: number;\r\n  /** maximum width allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxW?: number;\r\n  /** minimum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  minH?: number;\r\n  /** maximum height allowed during resize/creation (default?: undefined = un-constrained) */\r\n  maxH?: number;\r\n  /** prevent resizing (default?: undefined = un-constrained) */\r\n  noResize?: boolean;\r\n  /** prevents moving (default?: undefined = un-constrained) */\r\n  noMove?: boolean;\r\n  /** prevents being moved by others during their (default?: undefined = un-constrained) */\r\n  locked?: boolean;\r\n  /** widgets can have their own custom resize handles. For example 'e,w' will make that particular widget only resize east and west. See `resizable: {handles: string}` option */\r\n  resizeHandles?: string;\r\n  /** value for `gs-id` stored on the widget (default?: undefined) */\r\n  id?: numberOrString;\r\n  /** html to append inside as content */\r\n  content?: string;\r\n  /** optional nested grid options and list of children, which then turns into actual instance at runtime */\r\n  subGrid?: GridStackOptions | GridStack;\r\n}\r\n\r\n/** Drag&Drop resize options */\r\nexport interface DDResizeOpt {\r\n  /** do resize handle hide by default until mouse over ? - default: true on desktop, false on mobile*/\r\n  autoHide?: boolean;\r\n  /**\r\n   * sides where you can resize from (ex: 'e, se, s, sw, w') - default 'se' (south-east)\r\n   * Note: it is not recommended to resize from the top sides as weird side effect may occur.\r\n  */\r\n  handles?: string;\r\n}\r\n\r\n/** Drag&Drop remove options */\r\nexport interface DDRemoveOpt {\r\n  /** class that can be removed (default?: '.' + opts.itemClass) */\r\n  accept?: string;\r\n}\r\n\r\n/** Drag&Drop dragging options */\r\nexport interface DDDragOpt {\r\n  /** class selector of items that can be dragged. default to '.grid-stack-item-content' */\r\n  handle?: string;\r\n  /** default to 'body' */\r\n  appendTo?: string;\r\n  /** if set (true | msec), dragging placement (collision) will only happen after a pause by the user. Note: this is Global */\r\n  pause?: boolean | number;\r\n  /** default to `true` */\r\n  // scroll?: boolean;\r\n  /** parent constraining where item can be dragged out from (default: null = no constrain) */\r\n  // containment?: string;\r\n}\r\nexport interface DDDragInOpt extends DDDragOpt {\r\n  /** helper function when dropping (ex: 'clone' or your own method) */\r\n  helper?: string | ((event: Event) => HTMLElement);\r\n  /** used when dragging item from the outside, and canceling (ex: 'invalid' or your own method)*/\r\n  // revert?: string | ((event: Event) => HTMLElement);\r\n}\r\n\r\nexport interface Size {\r\n  width: number;\r\n  height: number;\r\n}\r\nexport interface Position {\r\n  top: number;\r\n  left: number;\r\n}\r\nexport interface Rect extends Size, Position {}\r\n\r\n/** data that is passed during drag and resizing callbacks */\r\nexport interface DDUIData {\r\n  position?: Position;\r\n  size?: Size;\r\n  /* fields not used by GridStack but sent by jq ? leave in case we go back to them...\r\n  originalPosition? : Position;\r\n  offset?: Position;\r\n  originalSize?: Size;\r\n  element?: HTMLElement[];\r\n  helper?: HTMLElement[];\r\n  originalElement?: HTMLElement[];\r\n  */\r\n}\r\n\r\n/**\r\n * internal descriptions describing the items in the grid\r\n */\r\nexport interface GridStackNode extends GridStackWidget {\r\n  /** pointer back to HTML element */\r\n  el?: GridItemHTMLElement;\r\n  /** pointer back to Grid instance */\r\n  grid?: GridStack;\r\n  /** @internal internal id used to match when cloning engines or saving column layouts */\r\n  _id?: number;\r\n  /** @internal */\r\n  _dirty?: boolean;\r\n  /** @internal */\r\n  _updating?: boolean;\r\n  /** @internal true when over trash/another grid so we don't bother removing drag CSS style that would animate back to old position */\r\n  _isAboutToRemove?: boolean;\r\n  /** @internal true if item came from outside of the grid -> actual item need to be moved over */\r\n  _isExternal?: boolean;\r\n  /** @internal Mouse event that's causing moving|resizing */\r\n  _event?: MouseEvent;\r\n  /** @internal moving vs resizing */\r\n  _moving?: boolean;\r\n  /** @internal true if we jumped down past item below (one time jump so we don't have to totally pass it) */\r\n  _skipDown?: boolean;\r\n  /** @internal original values before a drag/size */\r\n  _orig?: GridStackPosition;\r\n  /** @internal position in pixels used during collision check  */\r\n  _rect?: GridStackPosition;\r\n  /** @internal top/left pixel location before a drag so we can detect direction of move from last position*/\r\n  _lastUiPosition?: Position;\r\n  /** @internal set on the item being dragged/resized remember the last positions we've tried (but failed) so we don't try again during drag/resize */\r\n  _lastTried?: GridStackPosition;\r\n  /** @internal position willItFit() will use to position the item */\r\n  _willFitPos?: GridStackPosition;\r\n  /** @internal last drag Y pixel position used to incrementally update V scroll bar */\r\n  _prevYPix?: number;\r\n  /** @internal true if we've remove the item from ourself (dragging out) but might revert it back (release on nothing -> goes back) */\r\n  _temporaryRemoved?: boolean;\r\n  /** @internal true if we should remove DOM element on _notify() rather than clearing _id (old way) */\r\n  _removeDOM?: boolean;\r\n  /** @internal */\r\n  _initDD?: boolean;\r\n}\r\n","/**\r\n * utils.ts 7.1.0\r\n * Copyright (c) 2021 Alain Dumesny - see GridStack root license\r\n */\r\n\r\nimport { GridStackElement, GridStackNode, GridStackOptions, numberOrString, GridStackPosition, GridStackWidget } from './types';\r\n\r\nexport interface HeightData {\r\n  h: number;\r\n  unit: string;\r\n}\r\n\r\n/** checks for obsolete method names */\r\n// eslint-disable-next-line\r\nexport function obsolete(self, f, oldName: string, newName: string, rev: string): (...args: any[]) => any {\r\n  let wrapper = (...args) => {\r\n    console.warn('gridstack.js: Function `' + oldName + '` is deprecated in ' + rev + ' and has been replaced ' +\r\n    'with `' + newName + '`. It will be **removed** in a future release');\r\n    return f.apply(self, args);\r\n  }\r\n  wrapper.prototype = f.prototype;\r\n  return wrapper;\r\n}\r\n\r\n/** checks for obsolete grid options (can be used for any fields, but msg is about options) */\r\nexport function obsoleteOpts(opts: GridStackOptions, oldName: string, newName: string, rev: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    opts[newName] = opts[oldName];\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/** checks for obsolete grid options which are gone */\r\nexport function obsoleteOptsDel(opts: GridStackOptions, oldName: string, rev: string, info: string): void {\r\n  if (opts[oldName] !== undefined) {\r\n    console.warn('gridstack.js: Option `' + oldName + '` is deprecated in ' + rev + info);\r\n  }\r\n}\r\n\r\n/** checks for obsolete Jquery element attributes */\r\nexport function obsoleteAttr(el: HTMLElement, oldName: string, newName: string, rev: string): void {\r\n  let oldAttr = el.getAttribute(oldName);\r\n  if (oldAttr !== null) {\r\n    el.setAttribute(newName, oldAttr);\r\n    console.warn('gridstack.js: attribute `' + oldName + '`=' + oldAttr + ' is deprecated on this object in ' + rev + ' and has been replaced with `' +\r\n      newName + '`. It will be **removed** in a future release');\r\n  }\r\n}\r\n\r\n/**\r\n * Utility methods\r\n */\r\nexport class Utils {\r\n\r\n  /** convert a potential selector into actual list of html elements */\r\n  static getElements(els: GridStackElement): HTMLElement[] {\r\n    if (typeof els === 'string') {\r\n      let list = document.querySelectorAll(els);\r\n      if (!list.length && els[0] !== '.' && els[0] !== '#') {\r\n        list = document.querySelectorAll('.' + els);\r\n        if (!list.length) { list = document.querySelectorAll('#' + els) }\r\n      }\r\n      return Array.from(list) as HTMLElement[];\r\n    }\r\n    return [els];\r\n  }\r\n\r\n  /** convert a potential selector into actual single element */\r\n  static getElement(els: GridStackElement): HTMLElement {\r\n    if (typeof els === 'string') {\r\n      if (!els.length) return null;\r\n      if (els[0] === '#') {\r\n        return document.getElementById(els.substring(1));\r\n      }\r\n      if (els[0] === '.' || els[0] === '[') {\r\n        return document.querySelector(els);\r\n      }\r\n\r\n      // if we start with a digit, assume it's an id (error calling querySelector('#1')) as class are not valid CSS\r\n      if(!isNaN(+els[0])) { // start with digit\r\n        return document.getElementById(els);\r\n      }\r\n\r\n      // finally try string, then id then class\r\n      let el = document.querySelector(els);\r\n      if (!el) { el = document.getElementById(els) }\r\n      if (!el) { el = document.querySelector('.' + els) }\r\n      return el as HTMLElement;\r\n    }\r\n    return els;\r\n  }\r\n\r\n  /** returns true if a and b overlap */\r\n  static isIntercepted(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return !(a.y >= b.y + b.h || a.y + a.h <= b.y || a.x + a.w <= b.x || a.x >= b.x + b.w);\r\n  }\r\n\r\n  /** returns true if a and b touch edges or corners */\r\n  static isTouching(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return Utils.isIntercepted(a, {x: b.x-0.5, y: b.y-0.5, w: b.w+1, h: b.h+1})\r\n  }\r\n\r\n  /** returns the area a and b overlap */\r\n  static areaIntercept(a: GridStackPosition, b: GridStackPosition): number {\r\n    let x0 = (a.x > b.x) ? a.x : b.x;\r\n    let x1 = (a.x+a.w < b.x+b.w) ? a.x+a.w : b.x+b.w;\r\n    if (x1 <= x0) return 0; // no overlap\r\n    let y0 = (a.y > b.y) ? a.y : b.y;\r\n    let y1 = (a.y+a.h < b.y+b.h) ? a.y+a.h : b.y+b.h;\r\n    if (y1 <= y0) return 0; // no overlap\r\n    return (x1-x0) * (y1-y0);\r\n  }\r\n\r\n  /** returns the area */\r\n  static area(a: GridStackPosition): number {\r\n    return a.w * a.h;\r\n  }\r\n\r\n  /**\r\n   * Sorts array of nodes\r\n   * @param nodes array to sort\r\n   * @param dir 1 for asc, -1 for desc (optional)\r\n   * @param width width of the grid. If undefined the width will be calculated automatically (optional).\r\n   **/\r\n  static sort(nodes: GridStackNode[], dir?: -1 | 1, column?: number): GridStackNode[] {\r\n    column = column || nodes.reduce((col, n) => Math.max(n.x + n.w, col), 0) || 12;\r\n    if (dir === -1)\r\n      return nodes.sort((a, b) => (b.x + b.y * column)-(a.x + a.y * column));\r\n    else\r\n      return nodes.sort((b, a) => (b.x + b.y * column)-(a.x + a.y * column));\r\n  }\r\n\r\n  /**\r\n   * creates a style sheet with style id under given parent\r\n   * @param id will set the 'gs-style-id' attribute to that id\r\n   * @param parent to insert the stylesheet as first child,\r\n   * if none supplied it will be appended to the document head instead.\r\n   */\r\n  static createStylesheet(id: string, parent?: HTMLElement): CSSStyleSheet {\r\n    let style: HTMLStyleElement = document.createElement('style');\r\n    style.setAttribute('type', 'text/css');\r\n    style.setAttribute('gs-style-id', id);\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    if ((style as any).styleSheet) { // TODO: only CSSImportRule have that and different beast ??\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      (style as any).styleSheet.cssText = '';\r\n    } else {\r\n      style.appendChild(document.createTextNode('')); // WebKit hack\r\n    }\r\n    if (!parent) {\r\n      // default to head\r\n      parent = document.getElementsByTagName('head')[0];\r\n      parent.appendChild(style);\r\n    } else {\r\n      parent.insertBefore(style, parent.firstChild);\r\n    }\r\n    return style.sheet as CSSStyleSheet;\r\n  }\r\n\r\n  /** removed the given stylesheet id */\r\n  static removeStylesheet(id: string): void {\r\n    let el = document.querySelector('STYLE[gs-style-id=' + id + ']');\r\n    if (el && el.parentNode) el.remove();\r\n  }\r\n\r\n  /** inserts a CSS rule */\r\n  static addCSSRule(sheet: CSSStyleSheet, selector: string, rules: string): void {\r\n    if (typeof sheet.addRule === 'function') {\r\n      sheet.addRule(selector, rules);\r\n    } else if (typeof sheet.insertRule === 'function') {\r\n      sheet.insertRule(`${selector}{${rules}}`);\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n  static toBool(v: unknown): boolean {\r\n    if (typeof v === 'boolean') {\r\n      return v;\r\n    }\r\n    if (typeof v === 'string') {\r\n      v = v.toLowerCase();\r\n      return !(v === '' || v === 'no' || v === 'false' || v === '0');\r\n    }\r\n    return Boolean(v);\r\n  }\r\n\r\n  static toNumber(value: null | string): number {\r\n    return (value === null || value.length === 0) ? undefined : Number(value);\r\n  }\r\n\r\n  static parseHeight(val: numberOrString): HeightData {\r\n    let h: number;\r\n    let unit = 'px';\r\n    if (typeof val === 'string') {\r\n      let match = val.match(/^(-[0-9]+\\.[0-9]+|[0-9]*\\.[0-9]+|-[0-9]+|[0-9]+)(px|em|rem|vh|vw|%)?$/);\r\n      if (!match) {\r\n        throw new Error('Invalid height');\r\n      }\r\n      unit = match[2] || 'px';\r\n      h = parseFloat(match[1]);\r\n    } else {\r\n      h = val;\r\n    }\r\n    return { h, unit };\r\n  }\r\n\r\n  /** copies unset fields in target to use the given default sources values */\r\n  // eslint-disable-next-line\r\n  static defaults(target, ...sources): {} {\r\n\r\n    sources.forEach(source => {\r\n      for (const key in source) {\r\n        if (!source.hasOwnProperty(key)) return;\r\n        if (target[key] === null || target[key] === undefined) {\r\n          target[key] = source[key];\r\n        } else if (typeof source[key] === 'object' && typeof target[key] === 'object') {\r\n          // property is an object, recursively add it's field over... #1373\r\n          this.defaults(target[key], source[key]);\r\n        }\r\n      }\r\n    });\r\n\r\n    return target;\r\n  }\r\n\r\n  /** given 2 objects return true if they have the same values. Checks for Object {} having same fields and values (just 1 level down) */\r\n  static same(a: unknown, b: unknown): boolean {\r\n    if (typeof a !== 'object')  return a == b;\r\n    if (typeof a !== typeof b) return false;\r\n    // else we have object, check just 1 level deep for being same things...\r\n    if (Object.keys(a).length !== Object.keys(b).length) return false;\r\n    for (const key in a) {\r\n      if (a[key] !== b[key]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /** copies over b size & position (GridStackPosition), and optionally min/max as well */\r\n  static copyPos(a: GridStackWidget, b: GridStackWidget, doMinMax = false): GridStackWidget {\r\n    a.x = b.x;\r\n    a.y = b.y;\r\n    a.w = b.w;\r\n    a.h = b.h;\r\n    if (doMinMax) {\r\n      if (b.minW) a.minW = b.minW;\r\n      if (b.minH) a.minH = b.minH;\r\n      if (b.maxW) a.maxW = b.maxW;\r\n      if (b.maxH) a.maxH = b.maxH;\r\n    }\r\n    return a;\r\n  }\r\n\r\n  /** true if a and b has same size & position */\r\n  static samePos(a: GridStackPosition, b: GridStackPosition): boolean {\r\n    return a && b && a.x === b.x && a.y === b.y && a.w === b.w && a.h === b.h;\r\n  }\r\n\r\n  /** removes field from the first object if same as the second objects (like diffing) and internal '_' for saving */\r\n  static removeInternalAndSame(a: unknown, b: unknown):void {\r\n    if (typeof a !== 'object' || typeof b !== 'object') return;\r\n    for (let key in a) {\r\n      let val = a[key];\r\n      if (key[0] === '_' || val === b[key]) {\r\n        delete a[key]\r\n      } else if (val && typeof val === 'object' && b[key] !== undefined) {\r\n        for (let i in val) {\r\n          if (val[i] === b[key][i] || i[0] === '_') { delete val[i] }\r\n        }\r\n        if (!Object.keys(val).length) { delete a[key] }\r\n      }\r\n    }\r\n  }\r\n\r\n  /** removes internal fields '_' and default values for saving */\r\n  static removeInternalForSave(n: GridStackNode, removeEl = true) {\r\n    for (let key in n) { if (key[0] === '_' || n[key] === null || n[key] === undefined ) delete n[key]; }\r\n    delete n.grid;\r\n    if (removeEl) delete n.el;\r\n    // delete default values (will be re-created on read)\r\n    if (!n.autoPosition) delete n.autoPosition;\r\n    if (!n.noResize) delete n.noResize;\r\n    if (!n.noMove) delete n.noMove;\r\n    if (!n.locked) delete n.locked;\r\n    if (n.w === 1 || n.w === n.minW) delete n.w;\r\n    if (n.h === 1 || n.h === n.minH) delete n.h;\r\n  }\r\n\r\n  /** return the closest parent (or itself) matching the given class */\r\n  static closestUpByClass(el: HTMLElement, name: string): HTMLElement {\r\n    while (el) {\r\n      if (el.classList.contains(name)) return el;\r\n      el = el.parentElement\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /** delay calling the given function for given delay, preventing new calls from happening while waiting */\r\n  static throttle(func: () => void, delay: number): () => void {\r\n    let isWaiting = false;\r\n    return (...args) => {\r\n      if (!isWaiting) {\r\n        isWaiting = true;\r\n        setTimeout(() => { func(...args); isWaiting = false; }, delay);\r\n      }\r\n    }\r\n  }\r\n\r\n  static removePositioningStyles(el: HTMLElement): void {\r\n    let style = el.style;\r\n    if (style.position) {\r\n      style.removeProperty('position');\r\n    }\r\n    if (style.left) {\r\n      style.removeProperty('left');\r\n    }\r\n    if (style.top) {\r\n      style.removeProperty('top');\r\n    }\r\n    if (style.width) {\r\n      style.removeProperty('width');\r\n    }\r\n    if (style.height) {\r\n      style.removeProperty('height');\r\n    }\r\n  }\r\n\r\n  /** @internal returns the passed element if scrollable, else the closest parent that will, up to the entire document scrolling element */\r\n  static getScrollElement(el?: HTMLElement): HTMLElement {\r\n    if (!el) return document.scrollingElement as HTMLElement || document.documentElement; // IE support\r\n    const style = getComputedStyle(el);\r\n    const overflowRegex = /(auto|scroll)/;\r\n\r\n    if (overflowRegex.test(style.overflow + style.overflowY)) {\r\n      return el;\r\n    } else {\r\n      return this.getScrollElement(el.parentElement);\r\n    }\r\n  }\r\n\r\n  /** @internal */\r\n  static updateScrollPosition(el: HTMLElement, position: {top: number}, distance: number): void {\r\n    // is widget in view?\r\n    let rect = el.getBoundingClientRect();\r\n    let innerHeightOrClientHeight = (window.innerHeight || document.documentElement.clientHeight);\r\n    if (rect.top < 0 ||\r\n      rect.bottom > innerHeightOrClientHeight\r\n    ) {\r\n      // set scrollTop of first parent that scrolls\r\n      // if parent is larger than el, set as low as possible\r\n      // to get entire widget on screen\r\n      let offsetDiffDown = rect.bottom - innerHeightOrClientHeight;\r\n      let offsetDiffUp = rect.top;\r\n      let scrollEl = this.getScrollElement(el);\r\n      if (scrollEl !== null) {\r\n        let prevScroll = scrollEl.scrollTop;\r\n        if (rect.top < 0 && distance < 0) {\r\n          // moving up\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += Math.abs(offsetDiffUp) > Math.abs(distance) ? distance : offsetDiffUp;\r\n          }\r\n        } else if (distance > 0) {\r\n          // moving down\r\n          if (el.offsetHeight > innerHeightOrClientHeight) {\r\n            scrollEl.scrollTop += distance;\r\n          } else {\r\n            scrollEl.scrollTop += offsetDiffDown > distance ? distance : offsetDiffDown;\r\n          }\r\n        }\r\n        // move widget y by amount scrolled\r\n        position.top += scrollEl.scrollTop - prevScroll;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @internal Function used to scroll the page.\r\n   *\r\n   * @param event `MouseEvent` that triggers the resize\r\n   * @param el `HTMLElement` that's being resized\r\n   * @param distance Distance from the V edges to start scrolling\r\n   */\r\n  static updateScrollResize(event: MouseEvent, el: HTMLElement, distance: number): void {\r\n    const scrollEl = this.getScrollElement(el);\r\n    const height = scrollEl.clientHeight;\r\n    // #1727 event.clientY is relative to viewport, so must compare this against position of scrollEl getBoundingClientRect().top\r\n    // #1745 Special situation if scrollEl is document 'html': here browser spec states that\r\n    // clientHeight is height of viewport, but getBoundingClientRect() is rectangle of html element;\r\n    // this discrepancy arises because in reality scrollbar is attached to viewport, not html element itself.\r\n    const offsetTop = (scrollEl === this.getScrollElement()) ? 0 : scrollEl.getBoundingClientRect().top;\r\n    const pointerPosY = event.clientY - offsetTop;\r\n    const top = pointerPosY < distance;\r\n    const bottom = pointerPosY > height - distance;\r\n\r\n    if (top) {\r\n      // This also can be done with a timeout to keep scrolling while the mouse is\r\n      // in the scrolling zone. (will have smoother behavior)\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: pointerPosY - distance});\r\n    } else if (bottom) {\r\n      scrollEl.scrollBy({ behavior: 'smooth', top: distance - (height - pointerPosY)});\r\n    }\r\n  }\r\n\r\n  /** single level clone, returning a new object with same top fields. This will share sub objects and arrays */\r\n  static clone<T>(obj: T): T {\r\n    if (obj === null || obj === undefined || typeof(obj) !== 'object') {\r\n      return obj;\r\n    }\r\n    // return Object.assign({}, obj);\r\n    if (obj instanceof Array) {\r\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n      return [...obj] as any;\r\n    }\r\n    return {...obj};\r\n  }\r\n\r\n  /**\r\n   * Recursive clone version that returns a full copy, checking for nested objects and arrays ONLY.\r\n   * Note: this will use as-is any key starting with double __ (and not copy inside) some lib have circular dependencies.\r\n   */\r\n  static cloneDeep<T>(obj: T): T {\r\n    // list of fields we will skip during cloneDeep (nested objects, other internal)\r\n    const skipFields = ['parentGrid', 'el', 'grid', 'subGrid', 'engine'];\r\n    // return JSON.parse(JSON.stringify(obj)); // doesn't work with date format ?\r\n    const ret = Utils.clone(obj);\r\n    for (const key in ret) {\r\n      // NOTE: we don't support function/circular dependencies so skip those properties for now...\r\n      if (ret.hasOwnProperty(key) && typeof(ret[key]) === 'object' && key.substring(0, 2) !== '__' && !skipFields.find(k => k === key)) {\r\n        ret[key] = Utils.cloneDeep(obj[key]);\r\n      }\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  /** deep clone the given HTML node, removing teh unique id field */\r\n  public static cloneNode(el: HTMLElement): HTMLElement {\r\n    const node = el.cloneNode(true) as HTMLElement;\r\n    node.removeAttribute('id');\r\n    return node;\r\n  }\r\n\r\n  public static appendTo(el: HTMLElement, parent: string | HTMLElement | Node): void {\r\n    let parentNode: HTMLElement;\r\n    if (typeof parent === 'string') {\r\n      parentNode = document.querySelector(parent as string);\r\n    } else {\r\n      parentNode = parent as HTMLElement;\r\n    }\r\n    if (parentNode) {\r\n      parentNode.appendChild(el);\r\n    }\r\n  }\r\n\r\n  // public static setPositionRelative(el: HTMLElement): void {\r\n  //   if (!(/^(?:r|a|f)/).test(window.getComputedStyle(el).position)) {\r\n  //     el.style.position = \"relative\";\r\n  //   }\r\n  // }\r\n\r\n  public static addElStyles(el: HTMLElement, styles: { [prop: string]: string | string[] }): void {\r\n    if (styles instanceof Object) {\r\n      for (const s in styles) {\r\n        if (styles.hasOwnProperty(s)) {\r\n          if (Array.isArray(styles[s])) {\r\n            // support fallback value\r\n            (styles[s] as string[]).forEach(val => {\r\n              el.style[s] = val;\r\n            });\r\n          } else {\r\n            el.style[s] = styles[s];\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public static initEvent<T>(e: DragEvent | MouseEvent, info: { type: string; target?: EventTarget }): T {\r\n    const evt = { type: info.type };\r\n    const obj = {\r\n      button: 0,\r\n      which: 0,\r\n      buttons: 1,\r\n      bubbles: true,\r\n      cancelable: true,\r\n      target: info.target ? info.target : e.target\r\n    };\r\n    // don't check for `instanceof DragEvent` as Safari use MouseEvent #1540\r\n    if ((e as DragEvent).dataTransfer) {\r\n      evt['dataTransfer'] = (e as DragEvent).dataTransfer; // workaround 'readonly' field.\r\n    }\r\n    ['altKey','ctrlKey','metaKey','shiftKey'].forEach(p => evt[p] = e[p]); // keys\r\n    ['pageX','pageY','clientX','clientY','screenX','screenY'].forEach(p => evt[p] = e[p]); // point info\r\n    return {...evt, ...obj} as unknown as T;\r\n  }\r\n\r\n  /** copies the MouseEvent properties and sends it as another event to the given target */\r\n  public static simulateMouseEvent(e: MouseEvent, simulatedType: string, target?: EventTarget) {\r\n    const simulatedEvent = document.createEvent('MouseEvents');\r\n    simulatedEvent.initMouseEvent(\r\n      simulatedType, // type\r\n      true,         // bubbles\r\n      true,         // cancelable\r\n      window,       // view\r\n      1,            // detail\r\n      e.screenX,    // screenX\r\n      e.screenY,    // screenY\r\n      e.clientX,    // clientX\r\n      e.clientY,    // clientY\r\n      e.ctrlKey,    // ctrlKey\r\n      e.altKey,     // altKey\r\n      e.shiftKey,   // shiftKey\r\n      e.metaKey,    // metaKey\r\n      0,            // button\r\n      e.target      // relatedTarget\r\n    );\r\n    (target || e.target).dispatchEvent(simulatedEvent);\r\n  }\r\n\r\n  /** returns true if event is inside the given element rectangle */\r\n  // Note: Safari Mac has null event.relatedTarget which causes #1684 so check if DragEvent is inside the coordinates instead\r\n  //    this.el.contains(event.relatedTarget as HTMLElement)\r\n  // public static inside(e: MouseEvent, el: HTMLElement): boolean {\r\n  //   // srcElement, toElement, target: all set to placeholder when leaving simple grid, so we can't use that (Chrome)\r\n  //   let target: HTMLElement = e.relatedTarget || (e as any).fromElement;\r\n  //   if (!target) {\r\n  //     const { bottom, left, right, top } = el.getBoundingClientRect();\r\n  //     return (e.x < right && e.x > left && e.y < bottom && e.y > top);\r\n  //   }\r\n  //   return el.contains(target);\r\n  // }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(270);\n"],"sourceRoot":""}